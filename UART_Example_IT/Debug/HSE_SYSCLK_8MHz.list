
HSE_SYSCLK_8MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a90  08002a90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000218  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000729f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001318  00000000  00000000  0002736e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005e0  00000000  00000000  00028688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000477  00000000  00000000  00028c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020156  00000000  00000000  000290df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007f39  00000000  00000000  00049235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c378c  00000000  00000000  0005116e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c14  00000000  00000000  001148fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00116510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029f4 	.word	0x080029f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080029f4 	.word	0x080029f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Handler>:
 */
#include "stm32f4xx_hal.h"


void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000570:	f000 fa00 	bl	8000974 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000574:	f000 fb4c 	bl	8000c10 <HAL_SYSTICK_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <main>:
char msg [100];

char *user_data = " The application is running\r\n";

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	; 0x48
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	memset(&osc_init, 0, sizeof(osc_init));
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fdae 	bl	80020ec <memset>
	memset(&clk_init, 0, sizeof(clk_init));
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2214      	movs	r2, #20
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fda8 	bl	80020ec <memset>

	HAL_Init();
 800059c:	f000 f998 	bl	80008d0 <HAL_Init>

	UART2_Init();
 80005a0:	f000 f890 	bl	80006c4 <UART2_Init>

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
	osc_init.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
	if( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fcd6 	bl	8000f64 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x46>
	{
		Error_Handler();
 80005be:	f000 f8a7 	bl	8000710 <Error_Handler>
	}

	clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_SYSCLK;
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_SYSCLK_DIV2;
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_SYSCLK_DIV2;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	617b      	str	r3, [r7, #20]
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60bb      	str	r3, [r7, #8]
	if(HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_0) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff3a 	bl	8001454 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0x6e>
	{
		Error_Handler();
 80005e6:	f000 f893 	bl	8000710 <Error_Handler>
	}

	UART2_Init();
 80005ea:	f000 f86b 	bl	80006c4 <UART2_Init>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005ee:	f001 f91d 	bl	800182c <HAL_RCC_GetHCLKFreq>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <main+0x138>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	099b      	lsrs	r3, r3, #6
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fade 	bl	8000bbe <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000602:	2004      	movs	r0, #4
 8000604:	f000 fae8 	bl	8000bd8 <HAL_SYSTICK_CLKSourceConfig>

	memset(msg, 0,  sizeof(msg));
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	2100      	movs	r1, #0
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <main+0x13c>)
 800060e:	f001 fd6d 	bl	80020ec <memset>
	sprintf(msg, "SYSCLK: %ld\r\n", HAL_RCC_GetSysClockFreq());
 8000612:	f001 f805 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4928      	ldr	r1, [pc, #160]	; (80006bc <main+0x140>)
 800061c:	4826      	ldr	r0, [pc, #152]	; (80006b8 <main+0x13c>)
 800061e:	f001 fd45 	bl	80020ac <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	4923      	ldr	r1, [pc, #140]	; (80006b8 <main+0x13c>)
 800062a:	4825      	ldr	r0, [pc, #148]	; (80006c0 <main+0x144>)
 800062c:	f001 f982 	bl	8001934 <HAL_UART_Transmit>

	memset(msg, 0,  sizeof(msg));
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	2100      	movs	r1, #0
 8000634:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x13c>)
 8000636:	f001 fd59 	bl	80020ec <memset>
	sprintf(msg, "SYSCLK: %ld\r\n", HAL_RCC_GetHCLKFreq());
 800063a:	f001 f8f7 	bl	800182c <HAL_RCC_GetHCLKFreq>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	491e      	ldr	r1, [pc, #120]	; (80006bc <main+0x140>)
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <main+0x13c>)
 8000646:	f001 fd31 	bl	80020ac <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2264      	movs	r2, #100	; 0x64
 8000650:	4919      	ldr	r1, [pc, #100]	; (80006b8 <main+0x13c>)
 8000652:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x144>)
 8000654:	f001 f96e 	bl	8001934 <HAL_UART_Transmit>

	memset(msg, 0,  sizeof(msg));
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	2100      	movs	r1, #0
 800065c:	4816      	ldr	r0, [pc, #88]	; (80006b8 <main+0x13c>)
 800065e:	f001 fd45 	bl	80020ec <memset>
	sprintf(msg, "SYSCLK: %ld\r\n", HAL_RCC_GetPCLK1Freq());
 8000662:	f001 f8ef 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4914      	ldr	r1, [pc, #80]	; (80006bc <main+0x140>)
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x13c>)
 800066e:	f001 fd1d 	bl	80020ac <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2264      	movs	r2, #100	; 0x64
 8000678:	490f      	ldr	r1, [pc, #60]	; (80006b8 <main+0x13c>)
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0x144>)
 800067c:	f001 f95a 	bl	8001934 <HAL_UART_Transmit>

	memset(msg, 0,  sizeof(msg));
 8000680:	2264      	movs	r2, #100	; 0x64
 8000682:	2100      	movs	r1, #0
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x13c>)
 8000686:	f001 fd31 	bl	80020ec <memset>
	sprintf(msg, "SYSCLK: %ld\r\n", HAL_RCC_GetPCLK2Freq());
 800068a:	f001 f8ef 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	490a      	ldr	r1, [pc, #40]	; (80006bc <main+0x140>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0x13c>)
 8000696:	f001 fd09 	bl	80020ac <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	4905      	ldr	r1, [pc, #20]	; (80006b8 <main+0x13c>)
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <main+0x144>)
 80006a4:	f001 f946 	bl	8001934 <HAL_UART_Transmit>

	return 0;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3748      	adds	r7, #72	; 0x48
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	10624dd3 	.word	0x10624dd3
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	08002a2c 	.word	0x08002a2c
 80006c0:	20000078 	.word	0x20000078

080006c4 <UART2_Init>:

void UART2_Init()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <UART2_Init+0x44>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <UART2_Init+0x48>)
 80006cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <UART2_Init+0x44>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <UART2_Init+0x44>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <UART2_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <UART2_Init+0x44>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <UART2_Init+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <UART2_Init+0x44>)
 80006f0:	220c      	movs	r2, #12
 80006f2:	615a      	str	r2, [r3, #20]

	if( HAL_UART_Init(&huart2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <UART2_Init+0x44>)
 80006f6:	f001 f8cd 	bl	8001894 <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <UART2_Init+0x40>
	{
		//error
		Error_Handler();
 8000700:	f000 f806 	bl	8000710 <Error_Handler>
	}

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000078 	.word	0x20000078
 800070c:	40004400 	.word	0x40004400

08000710 <Error_Handler>:
void Error_Handler()
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	while(1);
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x4>
	...

08000718 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

 void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	 // Processor specific low level inits

	 //1. Set up the priority grouping of the arm cortex m4 processor
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 fa19 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

	 //2. Enable the system exceptions
	 SCB->SHCSR |= 0x7 << 16;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_MspInit+0x40>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <HAL_MspInit+0x40>)
 8000728:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24

	 //3. Set up the priority for the system exceptions.
	 HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0); //for mem manage fault
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	f06f 000b 	mvn.w	r0, #11
 8000736:	f000 fa18 	bl	8000b6a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0); //for bus fault
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f06f 000a 	mvn.w	r0, #10
 8000742:	f000 fa12 	bl	8000b6a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0); //for usage fault
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	f06f 0009 	mvn.w	r0, #9
 800074e:	f000 fa0c 	bl	8000b6a <HAL_NVIC_SetPriority>

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 {
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	 //configure the low level inits

	 //1. enable the clock for the usart2
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_UART_MspInit+0x88>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <HAL_UART_MspInit+0x88>)
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_UART_MspInit+0x88>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_UART_MspInit+0x88>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <HAL_UART_MspInit+0x88>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <HAL_UART_MspInit+0x88>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
	 //2. do the pin muxing config.
	 GPIO_InitTypeDef gpio_uart;

	 gpio_uart.Pin = GPIO_PIN_2;	//gpio uart tx
 800079c:	2304      	movs	r3, #4
 800079e:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate = GPIO_AF7_USART2;
 80007ac:	2307      	movs	r3, #7
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 80007b8:	f000 fa38 	bl	8000c2c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; 	//gpio uart Rx
 80007bc:	2308      	movs	r3, #8
 80007be:	617b      	str	r3, [r7, #20]

	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <HAL_UART_MspInit+0x8c>)
 80007c8:	f000 fa30 	bl	8000c2c <HAL_GPIO_Init>


	 //3, enable the irq and set up the priority (NVIC settings)
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007cc:	2026      	movs	r0, #38	; 0x26
 80007ce:	f000 f9e8 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	210f      	movs	r1, #15
 80007d6:	2026      	movs	r0, #38	; 0x26
 80007d8:	f000 f9c7 	bl	8000b6a <HAL_NVIC_SetPriority>

 }
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000

080007ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <_sbrk+0x5c>)
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <_sbrk+0x60>)
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <_sbrk+0x64>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <_sbrk+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d207      	bcs.n	800082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800081c:	f001 fc6e 	bl	80020fc <__errno>
 8000820:	4603      	mov	r3, r0
 8000822:	220c      	movs	r2, #12
 8000824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	e009      	b.n	8000840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <_sbrk+0x64>)
 800083c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20020000 	.word	0x20020000
 800084c:	00000400 	.word	0x00000400
 8000850:	20000124 	.word	0x20000124
 8000854:	20000278 	.word	0x20000278

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 fc2d 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fe65 	bl	800057c <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008c0:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 80008c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c8:	20000274 	.word	0x20000274

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <HAL_Init+0x40>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_Init+0x40>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x40>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f92b 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff ff08 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023c00 	.word	0x40023c00

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f943 	bl	8000bbe <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f90b 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000128 	.word	0x20000128

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000128 	.word	0x20000128

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff29 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff3e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff31 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffa2 	bl	8000b10 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d106      	bne.n	8000bf4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bf2:	e005      	b.n	8000c00 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bfa:	f023 0304 	bic.w	r3, r3, #4
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c14:	f000 f802 	bl	8000c1c <HAL_SYSTICK_Callback>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e16b      	b.n	8000f20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f040 815a 	bne.w	8000f1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d005      	beq.n	8000c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d130      	bne.n	8000ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d017      	beq.n	8000d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d123      	bne.n	8000d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0203 	and.w	r2, r3, #3
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80b4 	beq.w	8000f1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b60      	ldr	r3, [pc, #384]	; (8000f38 <HAL_GPIO_Init+0x30c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a5f      	ldr	r2, [pc, #380]	; (8000f38 <HAL_GPIO_Init+0x30c>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_GPIO_Init+0x30c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dce:	4a5b      	ldr	r2, [pc, #364]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <HAL_GPIO_Init+0x314>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d02b      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a51      	ldr	r2, [pc, #324]	; (8000f44 <HAL_GPIO_Init+0x318>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d025      	beq.n	8000e4e <HAL_GPIO_Init+0x222>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <HAL_GPIO_Init+0x31c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d01f      	beq.n	8000e4a <HAL_GPIO_Init+0x21e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <HAL_GPIO_Init+0x320>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d019      	beq.n	8000e46 <HAL_GPIO_Init+0x21a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4e      	ldr	r2, [pc, #312]	; (8000f50 <HAL_GPIO_Init+0x324>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x216>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4d      	ldr	r2, [pc, #308]	; (8000f54 <HAL_GPIO_Init+0x328>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <HAL_GPIO_Init+0x32c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x20e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_GPIO_Init+0x330>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x20a>
 8000e32:	2307      	movs	r3, #7
 8000e34:	e00e      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e36:	2308      	movs	r3, #8
 8000e38:	e00c      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	e00a      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e008      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e42:	2304      	movs	r3, #4
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e004      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_Init+0x228>
 8000e52:	2300      	movs	r3, #0
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	f002 0203 	and.w	r2, r2, #3
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	4093      	lsls	r3, r2
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e64:	4935      	ldr	r1, [pc, #212]	; (8000f3c <HAL_GPIO_Init+0x310>)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e96:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e9c:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec0:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	f67f ae90 	bls.w	8000c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40021400 	.word	0x40021400
 8000f58:	40021800 	.word	0x40021800
 8000f5c:	40021c00 	.word	0x40021c00
 8000f60:	40013c00 	.word	0x40013c00

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e267      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d075      	beq.n	800106e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f82:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8e:	4b85      	ldr	r3, [pc, #532]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d112      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	4b7e      	ldr	r3, [pc, #504]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d05b      	beq.n	800106c <HAL_RCC_OscConfig+0x108>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d157      	bne.n	800106c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e242      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc8:	d106      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x74>
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a75      	ldr	r2, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e01d      	b.n	8001014 <HAL_RCC_OscConfig+0xb0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6f      	ldr	r2, [pc, #444]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e00b      	b.n	8001014 <HAL_RCC_OscConfig+0xb0>
 8000ffc:	4b69      	ldr	r3, [pc, #420]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a68      	ldr	r2, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a65      	ldr	r2, [pc, #404]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800100e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcbe 	bl	800099c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcba 	bl	800099c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e207      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0xc0>
 8001042:	e014      	b.n	800106e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcaa 	bl	800099c <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fca6 	bl	800099c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e1f3      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0xe8>
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d063      	beq.n	8001142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800107a:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d11c      	bne.n	80010cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <HAL_RCC_OscConfig+0x152>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e1c7      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4937      	ldr	r1, [pc, #220]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	e03a      	b.n	8001142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_RCC_OscConfig+0x244>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010da:	f7ff fc5f 	bl	800099c <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fc5b 	bl	800099c <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1a8      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_OscConfig+0x244>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fc3e 	bl	800099c <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fc3a 	bl	800099c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e187      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d036      	beq.n	80011bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d016      	beq.n	8001184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_RCC_OscConfig+0x248>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fc1e 	bl	800099c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001164:	f7ff fc1a 	bl	800099c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e167      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x200>
 8001182:	e01b      	b.n	80011bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_RCC_OscConfig+0x248>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fc07 	bl	800099c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	e00e      	b.n	80011b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001192:	f7ff fc03 	bl	800099c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d907      	bls.n	80011b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e150      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
 80011a4:	40023800 	.word	0x40023800
 80011a8:	42470000 	.word	0x42470000
 80011ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ea      	bne.n	8001192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8097 	beq.w	80012f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a7c      	ldr	r2, [pc, #496]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a73      	ldr	r2, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fbc3 	bl	800099c <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fbbf 	bl	800099c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e10c      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x2ea>
 8001240:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e01c      	b.n	8001288 <HAL_RCC_OscConfig+0x324>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b05      	cmp	r3, #5
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x30c>
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a5b      	ldr	r2, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0x324>
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6713      	str	r3, [r2, #112]	; 0x70
 800127c:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a54      	ldr	r2, [pc, #336]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 0304 	bic.w	r3, r3, #4
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d015      	beq.n	80012bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fb84 	bl	800099c <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001296:	e00a      	b.n	80012ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff fb80 	bl	800099c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0cb      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0ee      	beq.n	8001298 <HAL_RCC_OscConfig+0x334>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fb6e 	bl	800099c <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb6a 	bl	800099c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e0b5      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ee      	bne.n	80012c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a1 	beq.w	8001444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d05c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d141      	bne.n	800139a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb3e 	bl	800099c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fb3a 	bl	800099c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e087      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	491b      	ldr	r1, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fb13 	bl	800099c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fb0f 	bl	800099c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e05c      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x416>
 8001398:	e054      	b.n	8001444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fafc 	bl	800099c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff faf8 	bl	800099c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e045      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
 80013c6:	e03d      	b.n	8001444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e038      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000
 80013dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_RCC_OscConfig+0x4ec>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d028      	beq.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d121      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d11a      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001418:	4293      	cmp	r3, r2
 800141a:	d111      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	3b01      	subs	r3, #1
 800142a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d90c      	bls.n	8001490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	2b03      	cmp	r3, #3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e067      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fa2a 	bl	800099c <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa26 	bl	800099c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d20c      	bcs.n	800159c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f821 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff f98a 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	08002a3c 	.word	0x08002a3c
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001624:	b094      	sub	sp, #80	; 0x50
 8001626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001630:	2300      	movs	r3, #0
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d00d      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x40>
 8001644:	2b08      	cmp	r3, #8
 8001646:	f200 80e1 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x1ec>
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x34>
 800164e:	2b04      	cmp	r3, #4
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x3a>
 8001652:	e0db      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_GetSysClockFreq+0x204>)
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001658:	e0db      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_GetSysClockFreq+0x208>)
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800165e:	e0d8      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	2200      	movs	r2, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	6139      	str	r1, [r7, #16]
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016c4:	4659      	mov	r1, fp
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4651      	mov	r1, sl
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4651      	mov	r1, sl
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4651      	mov	r1, sl
 80016d4:	ebb2 0801 	subs.w	r8, r2, r1
 80016d8:	4659      	mov	r1, fp
 80016da:	eb63 0901 	sbc.w	r9, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f2:	4690      	mov	r8, r2
 80016f4:	4699      	mov	r9, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb18 0303 	adds.w	r3, r8, r3
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb49 0303 	adc.w	r3, r9, r3
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001712:	4629      	mov	r1, r5
 8001714:	024b      	lsls	r3, r1, #9
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171c:	4621      	mov	r1, r4
 800171e:	024a      	lsls	r2, r1, #9
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001726:	2200      	movs	r2, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
 800172a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001730:	f7fe fd9e 	bl	8000270 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173c:	e058      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	2200      	movs	r2, #0
 8001746:	4618      	mov	r0, r3
 8001748:	4611      	mov	r1, r2
 800174a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001758:	4642      	mov	r2, r8
 800175a:	464b      	mov	r3, r9
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	0159      	lsls	r1, r3, #5
 8001766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800176a:	0150      	lsls	r0, r2, #5
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4641      	mov	r1, r8
 8001772:	ebb2 0a01 	subs.w	sl, r2, r1
 8001776:	4649      	mov	r1, r9
 8001778:	eb63 0b01 	sbc.w	fp, r3, r1
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800178c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001790:	ebb2 040a 	subs.w	r4, r2, sl
 8001794:	eb63 050b 	sbc.w	r5, r3, fp
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	00eb      	lsls	r3, r5, #3
 80017a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a6:	00e2      	lsls	r2, r4, #3
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	4643      	mov	r3, r8
 80017ae:	18e3      	adds	r3, r4, r3
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	464b      	mov	r3, r9
 80017b4:	eb45 0303 	adc.w	r3, r5, r3
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017da:	2200      	movs	r2, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	61fa      	str	r2, [r7, #28]
 80017e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e4:	f7fe fd44 	bl	8000270 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetSysClockFreq+0x204>)
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001814:	4618      	mov	r0, r3
 8001816:	3750      	adds	r7, #80	; 0x50
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_RCC_GetHCLKFreq+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff0 	bl	800182c <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	08002a4c 	.word	0x08002a4c

0800186c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001870:	f7ff ffdc 	bl	800182c <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	0b5b      	lsrs	r3, r3, #13
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4903      	ldr	r1, [pc, #12]	; (8001890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	08002a4c 	.word	0x08002a4c

08001894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e042      	b.n	800192c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe ff4e 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f973 	bl	8001bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800190c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b20      	cmp	r3, #32
 8001952:	d175      	bne.n	8001a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_UART_Transmit+0x2c>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e06e      	b.n	8001a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2221      	movs	r2, #33	; 0x21
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001972:	f7ff f813 	bl	800099c <HAL_GetTick>
 8001976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	88fa      	ldrh	r2, [r7, #6]
 800197c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198c:	d108      	bne.n	80019a0 <HAL_UART_Transmit+0x6c>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d104      	bne.n	80019a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e003      	b.n	80019a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019a8:	e02e      	b.n	8001a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2200      	movs	r2, #0
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f848 	bl	8001a4a <UART_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e03a      	b.n	8001a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10b      	bne.n	80019ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	3302      	adds	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	e007      	b.n	80019fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	3301      	adds	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1cb      	bne.n	80019aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f814 	bl	8001a4a <UART_WaitOnFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e006      	b.n	8001a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a5a:	e03b      	b.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d037      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7fe ff9a 	bl	800099c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	6a3a      	ldr	r2, [r7, #32]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e03a      	b.n	8001af4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b80      	cmp	r3, #128	; 0x80
 8001a90:	d020      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b40      	cmp	r3, #64	; 0x40
 8001a96:	d01d      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d116      	bne.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f81d 	bl	8001afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e00f      	b.n	8001af4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d0b4      	beq.n	8001a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b095      	sub	sp, #84	; 0x54
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	330c      	adds	r3, #12
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	e853 3f00 	ldrex	r3, [r3]
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	330c      	adds	r3, #12
 8001b22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b24:	643a      	str	r2, [r7, #64]	; 0x40
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b2c:	e841 2300 	strex	r3, r2, [r1]
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	e853 3f00 	ldrex	r3, [r3]
 8001b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3314      	adds	r3, #20
 8001b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b60:	e841 2300 	strex	r3, r2, [r1]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e5      	bne.n	8001b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d119      	bne.n	8001ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	330c      	adds	r3, #12
 8001b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	e853 3f00 	ldrex	r3, [r3]
 8001b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f023 0310 	bic.w	r3, r3, #16
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	330c      	adds	r3, #12
 8001b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b94:	61ba      	str	r2, [r7, #24]
 8001b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	e841 2300 	strex	r3, r2, [r1]
 8001ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e5      	bne.n	8001b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001bb6:	bf00      	nop
 8001bb8:	3754      	adds	r7, #84	; 0x54
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc8:	b0c0      	sub	sp, #256	; 0x100
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be0:	68d9      	ldr	r1, [r3, #12]
 8001be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	ea40 0301 	orr.w	r3, r0, r1
 8001bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c1c:	f021 010c 	bic.w	r1, r1, #12
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c3e:	6999      	ldr	r1, [r3, #24]
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	ea40 0301 	orr.w	r3, r0, r1
 8001c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b8f      	ldr	r3, [pc, #572]	; (8001e90 <UART_SetConfig+0x2cc>)
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d005      	beq.n	8001c64 <UART_SetConfig+0xa0>
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b8d      	ldr	r3, [pc, #564]	; (8001e94 <UART_SetConfig+0x2d0>)
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d104      	bne.n	8001c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c64:	f7ff fe02 	bl	800186c <HAL_RCC_GetPCLK2Freq>
 8001c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c6c:	e003      	b.n	8001c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c6e:	f7ff fde9 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8001c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c80:	f040 810c 	bne.w	8001e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c96:	4622      	mov	r2, r4
 8001c98:	462b      	mov	r3, r5
 8001c9a:	1891      	adds	r1, r2, r2
 8001c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c9e:	415b      	adcs	r3, r3
 8001ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	eb12 0801 	adds.w	r8, r2, r1
 8001cac:	4629      	mov	r1, r5
 8001cae:	eb43 0901 	adc.w	r9, r3, r1
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4699      	mov	r9, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	eb18 0303 	adds.w	r3, r8, r3
 8001cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	eb49 0303 	adc.w	r3, r9, r3
 8001cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	18db      	adds	r3, r3, r3
 8001cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	eb42 0303 	adc.w	r3, r2, r3
 8001cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8001d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d08:	f7fe fab2 	bl	8000270 <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <UART_SetConfig+0x2d4>)
 8001d12:	fba3 2302 	umull	r2, r3, r3, r2
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	011c      	lsls	r4, r3, #4
 8001d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	464b      	mov	r3, r9
 8001d30:	1891      	adds	r1, r2, r2
 8001d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d34:	415b      	adcs	r3, r3
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d42:	4649      	mov	r1, r9
 8001d44:	eb43 0b01 	adc.w	fp, r3, r1
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d5c:	4692      	mov	sl, r2
 8001d5e:	469b      	mov	fp, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	eb1a 0303 	adds.w	r3, sl, r3
 8001d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	18db      	adds	r3, r3, r3
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8e:	4613      	mov	r3, r2
 8001d90:	eb42 0303 	adc.w	r3, r2, r3
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
 8001d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d9e:	f7fe fa67 	bl	8000270 <__aeabi_uldivmod>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <UART_SetConfig+0x2d4>)
 8001daa:	fba3 2301 	umull	r2, r3, r3, r1
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2264      	movs	r2, #100	; 0x64
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	1acb      	subs	r3, r1, r3
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <UART_SetConfig+0x2d4>)
 8001dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dcc:	441c      	add	r4, r3
 8001dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	1891      	adds	r1, r2, r2
 8001de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001de8:	415b      	adcs	r3, r3
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001df0:	4641      	mov	r1, r8
 8001df2:	1851      	adds	r1, r2, r1
 8001df4:	6339      	str	r1, [r7, #48]	; 0x30
 8001df6:	4649      	mov	r1, r9
 8001df8:	414b      	adcs	r3, r1
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e08:	4659      	mov	r1, fp
 8001e0a:	00cb      	lsls	r3, r1, #3
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e12:	4651      	mov	r1, sl
 8001e14:	00ca      	lsls	r2, r1, #3
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e24:	464b      	mov	r3, r9
 8001e26:	460a      	mov	r2, r1
 8001e28:	eb42 0303 	adc.w	r3, r2, r3
 8001e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e44:	460b      	mov	r3, r1
 8001e46:	18db      	adds	r3, r3, r3
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	eb42 0303 	adc.w	r3, r2, r3
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e5a:	f7fe fa09 	bl	8000270 <__aeabi_uldivmod>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <UART_SetConfig+0x2d4>)
 8001e64:	fba3 1302 	umull	r1, r3, r3, r2
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	2164      	movs	r1, #100	; 0x64
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	3332      	adds	r3, #50	; 0x32
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <UART_SetConfig+0x2d4>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4422      	add	r2, r4
 8001e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e8c:	e106      	b.n	800209c <UART_SetConfig+0x4d8>
 8001e8e:	bf00      	nop
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001eae:	4642      	mov	r2, r8
 8001eb0:	464b      	mov	r3, r9
 8001eb2:	1891      	adds	r1, r2, r2
 8001eb4:	6239      	str	r1, [r7, #32]
 8001eb6:	415b      	adcs	r3, r3
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	1854      	adds	r4, r2, r1
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	eb43 0501 	adc.w	r5, r3, r1
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	00eb      	lsls	r3, r5, #3
 8001ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed6:	00e2      	lsls	r2, r4, #3
 8001ed8:	4614      	mov	r4, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4643      	mov	r3, r8
 8001ede:	18e3      	adds	r3, r4, r3
 8001ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	eb45 0303 	adc.w	r3, r5, r3
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	008b      	lsls	r3, r1, #2
 8001f0e:	4621      	mov	r1, r4
 8001f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f14:	4621      	mov	r1, r4
 8001f16:	008a      	lsls	r2, r1, #2
 8001f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f1c:	f7fe f9a8 	bl	8000270 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <UART_SetConfig+0x4e4>)
 8001f26:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	011c      	lsls	r4, r3, #4
 8001f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	1891      	adds	r1, r2, r2
 8001f46:	61b9      	str	r1, [r7, #24]
 8001f48:	415b      	adcs	r3, r3
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f50:	4641      	mov	r1, r8
 8001f52:	1851      	adds	r1, r2, r1
 8001f54:	6139      	str	r1, [r7, #16]
 8001f56:	4649      	mov	r1, r9
 8001f58:	414b      	adcs	r3, r1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f68:	4659      	mov	r1, fp
 8001f6a:	00cb      	lsls	r3, r1, #3
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f72:	4651      	mov	r1, sl
 8001f74:	00ca      	lsls	r2, r1, #3
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	189b      	adds	r3, r3, r2
 8001f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f84:	464b      	mov	r3, r9
 8001f86:	460a      	mov	r2, r1
 8001f88:	eb42 0303 	adc.w	r3, r2, r3
 8001f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001fa8:	4649      	mov	r1, r9
 8001faa:	008b      	lsls	r3, r1, #2
 8001fac:	4641      	mov	r1, r8
 8001fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb2:	4641      	mov	r1, r8
 8001fb4:	008a      	lsls	r2, r1, #2
 8001fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fba:	f7fe f959 	bl	8000270 <__aeabi_uldivmod>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <UART_SetConfig+0x4e4>)
 8001fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2264      	movs	r2, #100	; 0x64
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	1acb      	subs	r3, r1, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <UART_SetConfig+0x4e4>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	441c      	add	r4, r3
 8001fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fea:	2200      	movs	r2, #0
 8001fec:	673b      	str	r3, [r7, #112]	; 0x70
 8001fee:	677a      	str	r2, [r7, #116]	; 0x74
 8001ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001ff4:	4642      	mov	r2, r8
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	1891      	adds	r1, r2, r2
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	415b      	adcs	r3, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002004:	4641      	mov	r1, r8
 8002006:	1851      	adds	r1, r2, r1
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	4649      	mov	r1, r9
 800200c:	414b      	adcs	r3, r1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800201c:	4659      	mov	r1, fp
 800201e:	00cb      	lsls	r3, r1, #3
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002026:	4651      	mov	r1, sl
 8002028:	00ca      	lsls	r2, r1, #3
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4603      	mov	r3, r0
 8002030:	4642      	mov	r2, r8
 8002032:	189b      	adds	r3, r3, r2
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
 8002036:	464b      	mov	r3, r9
 8002038:	460a      	mov	r2, r1
 800203a:	eb42 0303 	adc.w	r3, r2, r3
 800203e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	663b      	str	r3, [r7, #96]	; 0x60
 800204a:	667a      	str	r2, [r7, #100]	; 0x64
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002058:	4649      	mov	r1, r9
 800205a:	008b      	lsls	r3, r1, #2
 800205c:	4641      	mov	r1, r8
 800205e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002062:	4641      	mov	r1, r8
 8002064:	008a      	lsls	r2, r1, #2
 8002066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800206a:	f7fe f901 	bl	8000270 <__aeabi_uldivmod>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <UART_SetConfig+0x4e4>)
 8002074:	fba3 1302 	umull	r1, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	2164      	movs	r1, #100	; 0x64
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <UART_SetConfig+0x4e4>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	f003 020f 	and.w	r2, r3, #15
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4422      	add	r2, r4
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020a8:	51eb851f 	.word	0x51eb851f

080020ac <siprintf>:
 80020ac:	b40e      	push	{r1, r2, r3}
 80020ae:	b500      	push	{lr}
 80020b0:	b09c      	sub	sp, #112	; 0x70
 80020b2:	ab1d      	add	r3, sp, #116	; 0x74
 80020b4:	9002      	str	r0, [sp, #8]
 80020b6:	9006      	str	r0, [sp, #24]
 80020b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <siprintf+0x38>)
 80020be:	9107      	str	r1, [sp, #28]
 80020c0:	9104      	str	r1, [sp, #16]
 80020c2:	4909      	ldr	r1, [pc, #36]	; (80020e8 <siprintf+0x3c>)
 80020c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80020c8:	9105      	str	r1, [sp, #20]
 80020ca:	6800      	ldr	r0, [r0, #0]
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	a902      	add	r1, sp, #8
 80020d0:	f000 f992 	bl	80023f8 <_svfiprintf_r>
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	b01c      	add	sp, #112	; 0x70
 80020dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80020e0:	b003      	add	sp, #12
 80020e2:	4770      	bx	lr
 80020e4:	20000058 	.word	0x20000058
 80020e8:	ffff0208 	.word	0xffff0208

080020ec <memset>:
 80020ec:	4402      	add	r2, r0
 80020ee:	4603      	mov	r3, r0
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d100      	bne.n	80020f6 <memset+0xa>
 80020f4:	4770      	bx	lr
 80020f6:	f803 1b01 	strb.w	r1, [r3], #1
 80020fa:	e7f9      	b.n	80020f0 <memset+0x4>

080020fc <__errno>:
 80020fc:	4b01      	ldr	r3, [pc, #4]	; (8002104 <__errno+0x8>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000058 	.word	0x20000058

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4d0d      	ldr	r5, [pc, #52]	; (8002140 <__libc_init_array+0x38>)
 800210c:	4c0d      	ldr	r4, [pc, #52]	; (8002144 <__libc_init_array+0x3c>)
 800210e:	1b64      	subs	r4, r4, r5
 8002110:	10a4      	asrs	r4, r4, #2
 8002112:	2600      	movs	r6, #0
 8002114:	42a6      	cmp	r6, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	4d0b      	ldr	r5, [pc, #44]	; (8002148 <__libc_init_array+0x40>)
 800211a:	4c0c      	ldr	r4, [pc, #48]	; (800214c <__libc_init_array+0x44>)
 800211c:	f000 fc6a 	bl	80029f4 <_init>
 8002120:	1b64      	subs	r4, r4, r5
 8002122:	10a4      	asrs	r4, r4, #2
 8002124:	2600      	movs	r6, #0
 8002126:	42a6      	cmp	r6, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002130:	4798      	blx	r3
 8002132:	3601      	adds	r6, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	f855 3b04 	ldr.w	r3, [r5], #4
 800213a:	4798      	blx	r3
 800213c:	3601      	adds	r6, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	08002a90 	.word	0x08002a90
 8002144:	08002a90 	.word	0x08002a90
 8002148:	08002a90 	.word	0x08002a90
 800214c:	08002a94 	.word	0x08002a94

08002150 <__retarget_lock_acquire_recursive>:
 8002150:	4770      	bx	lr

08002152 <__retarget_lock_release_recursive>:
 8002152:	4770      	bx	lr

08002154 <_free_r>:
 8002154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002156:	2900      	cmp	r1, #0
 8002158:	d044      	beq.n	80021e4 <_free_r+0x90>
 800215a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800215e:	9001      	str	r0, [sp, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f1a1 0404 	sub.w	r4, r1, #4
 8002166:	bfb8      	it	lt
 8002168:	18e4      	addlt	r4, r4, r3
 800216a:	f000 f8df 	bl	800232c <__malloc_lock>
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <_free_r+0x94>)
 8002170:	9801      	ldr	r0, [sp, #4]
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	b933      	cbnz	r3, 8002184 <_free_r+0x30>
 8002176:	6063      	str	r3, [r4, #4]
 8002178:	6014      	str	r4, [r2, #0]
 800217a:	b003      	add	sp, #12
 800217c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002180:	f000 b8da 	b.w	8002338 <__malloc_unlock>
 8002184:	42a3      	cmp	r3, r4
 8002186:	d908      	bls.n	800219a <_free_r+0x46>
 8002188:	6825      	ldr	r5, [r4, #0]
 800218a:	1961      	adds	r1, r4, r5
 800218c:	428b      	cmp	r3, r1
 800218e:	bf01      	itttt	eq
 8002190:	6819      	ldreq	r1, [r3, #0]
 8002192:	685b      	ldreq	r3, [r3, #4]
 8002194:	1949      	addeq	r1, r1, r5
 8002196:	6021      	streq	r1, [r4, #0]
 8002198:	e7ed      	b.n	8002176 <_free_r+0x22>
 800219a:	461a      	mov	r2, r3
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b10b      	cbz	r3, 80021a4 <_free_r+0x50>
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	d9fa      	bls.n	800219a <_free_r+0x46>
 80021a4:	6811      	ldr	r1, [r2, #0]
 80021a6:	1855      	adds	r5, r2, r1
 80021a8:	42a5      	cmp	r5, r4
 80021aa:	d10b      	bne.n	80021c4 <_free_r+0x70>
 80021ac:	6824      	ldr	r4, [r4, #0]
 80021ae:	4421      	add	r1, r4
 80021b0:	1854      	adds	r4, r2, r1
 80021b2:	42a3      	cmp	r3, r4
 80021b4:	6011      	str	r1, [r2, #0]
 80021b6:	d1e0      	bne.n	800217a <_free_r+0x26>
 80021b8:	681c      	ldr	r4, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	6053      	str	r3, [r2, #4]
 80021be:	440c      	add	r4, r1
 80021c0:	6014      	str	r4, [r2, #0]
 80021c2:	e7da      	b.n	800217a <_free_r+0x26>
 80021c4:	d902      	bls.n	80021cc <_free_r+0x78>
 80021c6:	230c      	movs	r3, #12
 80021c8:	6003      	str	r3, [r0, #0]
 80021ca:	e7d6      	b.n	800217a <_free_r+0x26>
 80021cc:	6825      	ldr	r5, [r4, #0]
 80021ce:	1961      	adds	r1, r4, r5
 80021d0:	428b      	cmp	r3, r1
 80021d2:	bf04      	itt	eq
 80021d4:	6819      	ldreq	r1, [r3, #0]
 80021d6:	685b      	ldreq	r3, [r3, #4]
 80021d8:	6063      	str	r3, [r4, #4]
 80021da:	bf04      	itt	eq
 80021dc:	1949      	addeq	r1, r1, r5
 80021de:	6021      	streq	r1, [r4, #0]
 80021e0:	6054      	str	r4, [r2, #4]
 80021e2:	e7ca      	b.n	800217a <_free_r+0x26>
 80021e4:	b003      	add	sp, #12
 80021e6:	bd30      	pop	{r4, r5, pc}
 80021e8:	2000026c 	.word	0x2000026c

080021ec <sbrk_aligned>:
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	4e0e      	ldr	r6, [pc, #56]	; (8002228 <sbrk_aligned+0x3c>)
 80021f0:	460c      	mov	r4, r1
 80021f2:	6831      	ldr	r1, [r6, #0]
 80021f4:	4605      	mov	r5, r0
 80021f6:	b911      	cbnz	r1, 80021fe <sbrk_aligned+0x12>
 80021f8:	f000 fba6 	bl	8002948 <_sbrk_r>
 80021fc:	6030      	str	r0, [r6, #0]
 80021fe:	4621      	mov	r1, r4
 8002200:	4628      	mov	r0, r5
 8002202:	f000 fba1 	bl	8002948 <_sbrk_r>
 8002206:	1c43      	adds	r3, r0, #1
 8002208:	d00a      	beq.n	8002220 <sbrk_aligned+0x34>
 800220a:	1cc4      	adds	r4, r0, #3
 800220c:	f024 0403 	bic.w	r4, r4, #3
 8002210:	42a0      	cmp	r0, r4
 8002212:	d007      	beq.n	8002224 <sbrk_aligned+0x38>
 8002214:	1a21      	subs	r1, r4, r0
 8002216:	4628      	mov	r0, r5
 8002218:	f000 fb96 	bl	8002948 <_sbrk_r>
 800221c:	3001      	adds	r0, #1
 800221e:	d101      	bne.n	8002224 <sbrk_aligned+0x38>
 8002220:	f04f 34ff 	mov.w	r4, #4294967295
 8002224:	4620      	mov	r0, r4
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	20000270 	.word	0x20000270

0800222c <_malloc_r>:
 800222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002230:	1ccd      	adds	r5, r1, #3
 8002232:	f025 0503 	bic.w	r5, r5, #3
 8002236:	3508      	adds	r5, #8
 8002238:	2d0c      	cmp	r5, #12
 800223a:	bf38      	it	cc
 800223c:	250c      	movcc	r5, #12
 800223e:	2d00      	cmp	r5, #0
 8002240:	4607      	mov	r7, r0
 8002242:	db01      	blt.n	8002248 <_malloc_r+0x1c>
 8002244:	42a9      	cmp	r1, r5
 8002246:	d905      	bls.n	8002254 <_malloc_r+0x28>
 8002248:	230c      	movs	r3, #12
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	2600      	movs	r6, #0
 800224e:	4630      	mov	r0, r6
 8002250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002254:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002328 <_malloc_r+0xfc>
 8002258:	f000 f868 	bl	800232c <__malloc_lock>
 800225c:	f8d8 3000 	ldr.w	r3, [r8]
 8002260:	461c      	mov	r4, r3
 8002262:	bb5c      	cbnz	r4, 80022bc <_malloc_r+0x90>
 8002264:	4629      	mov	r1, r5
 8002266:	4638      	mov	r0, r7
 8002268:	f7ff ffc0 	bl	80021ec <sbrk_aligned>
 800226c:	1c43      	adds	r3, r0, #1
 800226e:	4604      	mov	r4, r0
 8002270:	d155      	bne.n	800231e <_malloc_r+0xf2>
 8002272:	f8d8 4000 	ldr.w	r4, [r8]
 8002276:	4626      	mov	r6, r4
 8002278:	2e00      	cmp	r6, #0
 800227a:	d145      	bne.n	8002308 <_malloc_r+0xdc>
 800227c:	2c00      	cmp	r4, #0
 800227e:	d048      	beq.n	8002312 <_malloc_r+0xe6>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	4631      	mov	r1, r6
 8002284:	4638      	mov	r0, r7
 8002286:	eb04 0903 	add.w	r9, r4, r3
 800228a:	f000 fb5d 	bl	8002948 <_sbrk_r>
 800228e:	4581      	cmp	r9, r0
 8002290:	d13f      	bne.n	8002312 <_malloc_r+0xe6>
 8002292:	6821      	ldr	r1, [r4, #0]
 8002294:	1a6d      	subs	r5, r5, r1
 8002296:	4629      	mov	r1, r5
 8002298:	4638      	mov	r0, r7
 800229a:	f7ff ffa7 	bl	80021ec <sbrk_aligned>
 800229e:	3001      	adds	r0, #1
 80022a0:	d037      	beq.n	8002312 <_malloc_r+0xe6>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	442b      	add	r3, r5
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	f8d8 3000 	ldr.w	r3, [r8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d038      	beq.n	8002322 <_malloc_r+0xf6>
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	42a2      	cmp	r2, r4
 80022b4:	d12b      	bne.n	800230e <_malloc_r+0xe2>
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e00f      	b.n	80022dc <_malloc_r+0xb0>
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	1b52      	subs	r2, r2, r5
 80022c0:	d41f      	bmi.n	8002302 <_malloc_r+0xd6>
 80022c2:	2a0b      	cmp	r2, #11
 80022c4:	d917      	bls.n	80022f6 <_malloc_r+0xca>
 80022c6:	1961      	adds	r1, r4, r5
 80022c8:	42a3      	cmp	r3, r4
 80022ca:	6025      	str	r5, [r4, #0]
 80022cc:	bf18      	it	ne
 80022ce:	6059      	strne	r1, [r3, #4]
 80022d0:	6863      	ldr	r3, [r4, #4]
 80022d2:	bf08      	it	eq
 80022d4:	f8c8 1000 	streq.w	r1, [r8]
 80022d8:	5162      	str	r2, [r4, r5]
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	4638      	mov	r0, r7
 80022de:	f104 060b 	add.w	r6, r4, #11
 80022e2:	f000 f829 	bl	8002338 <__malloc_unlock>
 80022e6:	f026 0607 	bic.w	r6, r6, #7
 80022ea:	1d23      	adds	r3, r4, #4
 80022ec:	1af2      	subs	r2, r6, r3
 80022ee:	d0ae      	beq.n	800224e <_malloc_r+0x22>
 80022f0:	1b9b      	subs	r3, r3, r6
 80022f2:	50a3      	str	r3, [r4, r2]
 80022f4:	e7ab      	b.n	800224e <_malloc_r+0x22>
 80022f6:	42a3      	cmp	r3, r4
 80022f8:	6862      	ldr	r2, [r4, #4]
 80022fa:	d1dd      	bne.n	80022b8 <_malloc_r+0x8c>
 80022fc:	f8c8 2000 	str.w	r2, [r8]
 8002300:	e7ec      	b.n	80022dc <_malloc_r+0xb0>
 8002302:	4623      	mov	r3, r4
 8002304:	6864      	ldr	r4, [r4, #4]
 8002306:	e7ac      	b.n	8002262 <_malloc_r+0x36>
 8002308:	4634      	mov	r4, r6
 800230a:	6876      	ldr	r6, [r6, #4]
 800230c:	e7b4      	b.n	8002278 <_malloc_r+0x4c>
 800230e:	4613      	mov	r3, r2
 8002310:	e7cc      	b.n	80022ac <_malloc_r+0x80>
 8002312:	230c      	movs	r3, #12
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4638      	mov	r0, r7
 8002318:	f000 f80e 	bl	8002338 <__malloc_unlock>
 800231c:	e797      	b.n	800224e <_malloc_r+0x22>
 800231e:	6025      	str	r5, [r4, #0]
 8002320:	e7dc      	b.n	80022dc <_malloc_r+0xb0>
 8002322:	605b      	str	r3, [r3, #4]
 8002324:	deff      	udf	#255	; 0xff
 8002326:	bf00      	nop
 8002328:	2000026c 	.word	0x2000026c

0800232c <__malloc_lock>:
 800232c:	4801      	ldr	r0, [pc, #4]	; (8002334 <__malloc_lock+0x8>)
 800232e:	f7ff bf0f 	b.w	8002150 <__retarget_lock_acquire_recursive>
 8002332:	bf00      	nop
 8002334:	20000268 	.word	0x20000268

08002338 <__malloc_unlock>:
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <__malloc_unlock+0x8>)
 800233a:	f7ff bf0a 	b.w	8002152 <__retarget_lock_release_recursive>
 800233e:	bf00      	nop
 8002340:	20000268 	.word	0x20000268

08002344 <__ssputs_r>:
 8002344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002348:	688e      	ldr	r6, [r1, #8]
 800234a:	461f      	mov	r7, r3
 800234c:	42be      	cmp	r6, r7
 800234e:	680b      	ldr	r3, [r1, #0]
 8002350:	4682      	mov	sl, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4690      	mov	r8, r2
 8002356:	d82c      	bhi.n	80023b2 <__ssputs_r+0x6e>
 8002358:	898a      	ldrh	r2, [r1, #12]
 800235a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800235e:	d026      	beq.n	80023ae <__ssputs_r+0x6a>
 8002360:	6965      	ldr	r5, [r4, #20]
 8002362:	6909      	ldr	r1, [r1, #16]
 8002364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002368:	eba3 0901 	sub.w	r9, r3, r1
 800236c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002370:	1c7b      	adds	r3, r7, #1
 8002372:	444b      	add	r3, r9
 8002374:	106d      	asrs	r5, r5, #1
 8002376:	429d      	cmp	r5, r3
 8002378:	bf38      	it	cc
 800237a:	461d      	movcc	r5, r3
 800237c:	0553      	lsls	r3, r2, #21
 800237e:	d527      	bpl.n	80023d0 <__ssputs_r+0x8c>
 8002380:	4629      	mov	r1, r5
 8002382:	f7ff ff53 	bl	800222c <_malloc_r>
 8002386:	4606      	mov	r6, r0
 8002388:	b360      	cbz	r0, 80023e4 <__ssputs_r+0xa0>
 800238a:	6921      	ldr	r1, [r4, #16]
 800238c:	464a      	mov	r2, r9
 800238e:	f000 faeb 	bl	8002968 <memcpy>
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	6126      	str	r6, [r4, #16]
 80023a0:	6165      	str	r5, [r4, #20]
 80023a2:	444e      	add	r6, r9
 80023a4:	eba5 0509 	sub.w	r5, r5, r9
 80023a8:	6026      	str	r6, [r4, #0]
 80023aa:	60a5      	str	r5, [r4, #8]
 80023ac:	463e      	mov	r6, r7
 80023ae:	42be      	cmp	r6, r7
 80023b0:	d900      	bls.n	80023b4 <__ssputs_r+0x70>
 80023b2:	463e      	mov	r6, r7
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	4632      	mov	r2, r6
 80023b8:	4641      	mov	r1, r8
 80023ba:	f000 faab 	bl	8002914 <memmove>
 80023be:	68a3      	ldr	r3, [r4, #8]
 80023c0:	1b9b      	subs	r3, r3, r6
 80023c2:	60a3      	str	r3, [r4, #8]
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	4433      	add	r3, r6
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	2000      	movs	r0, #0
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d0:	462a      	mov	r2, r5
 80023d2:	f000 fad7 	bl	8002984 <_realloc_r>
 80023d6:	4606      	mov	r6, r0
 80023d8:	2800      	cmp	r0, #0
 80023da:	d1e0      	bne.n	800239e <__ssputs_r+0x5a>
 80023dc:	6921      	ldr	r1, [r4, #16]
 80023de:	4650      	mov	r0, sl
 80023e0:	f7ff feb8 	bl	8002154 <_free_r>
 80023e4:	230c      	movs	r3, #12
 80023e6:	f8ca 3000 	str.w	r3, [sl]
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	e7e9      	b.n	80023cc <__ssputs_r+0x88>

080023f8 <_svfiprintf_r>:
 80023f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023fc:	4698      	mov	r8, r3
 80023fe:	898b      	ldrh	r3, [r1, #12]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	b09d      	sub	sp, #116	; 0x74
 8002404:	4607      	mov	r7, r0
 8002406:	460d      	mov	r5, r1
 8002408:	4614      	mov	r4, r2
 800240a:	d50e      	bpl.n	800242a <_svfiprintf_r+0x32>
 800240c:	690b      	ldr	r3, [r1, #16]
 800240e:	b963      	cbnz	r3, 800242a <_svfiprintf_r+0x32>
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	f7ff ff0b 	bl	800222c <_malloc_r>
 8002416:	6028      	str	r0, [r5, #0]
 8002418:	6128      	str	r0, [r5, #16]
 800241a:	b920      	cbnz	r0, 8002426 <_svfiprintf_r+0x2e>
 800241c:	230c      	movs	r3, #12
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	e0d0      	b.n	80025c8 <_svfiprintf_r+0x1d0>
 8002426:	2340      	movs	r3, #64	; 0x40
 8002428:	616b      	str	r3, [r5, #20]
 800242a:	2300      	movs	r3, #0
 800242c:	9309      	str	r3, [sp, #36]	; 0x24
 800242e:	2320      	movs	r3, #32
 8002430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002434:	f8cd 800c 	str.w	r8, [sp, #12]
 8002438:	2330      	movs	r3, #48	; 0x30
 800243a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80025e0 <_svfiprintf_r+0x1e8>
 800243e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002442:	f04f 0901 	mov.w	r9, #1
 8002446:	4623      	mov	r3, r4
 8002448:	469a      	mov	sl, r3
 800244a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800244e:	b10a      	cbz	r2, 8002454 <_svfiprintf_r+0x5c>
 8002450:	2a25      	cmp	r2, #37	; 0x25
 8002452:	d1f9      	bne.n	8002448 <_svfiprintf_r+0x50>
 8002454:	ebba 0b04 	subs.w	fp, sl, r4
 8002458:	d00b      	beq.n	8002472 <_svfiprintf_r+0x7a>
 800245a:	465b      	mov	r3, fp
 800245c:	4622      	mov	r2, r4
 800245e:	4629      	mov	r1, r5
 8002460:	4638      	mov	r0, r7
 8002462:	f7ff ff6f 	bl	8002344 <__ssputs_r>
 8002466:	3001      	adds	r0, #1
 8002468:	f000 80a9 	beq.w	80025be <_svfiprintf_r+0x1c6>
 800246c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800246e:	445a      	add	r2, fp
 8002470:	9209      	str	r2, [sp, #36]	; 0x24
 8002472:	f89a 3000 	ldrb.w	r3, [sl]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a1 	beq.w	80025be <_svfiprintf_r+0x1c6>
 800247c:	2300      	movs	r3, #0
 800247e:	f04f 32ff 	mov.w	r2, #4294967295
 8002482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002486:	f10a 0a01 	add.w	sl, sl, #1
 800248a:	9304      	str	r3, [sp, #16]
 800248c:	9307      	str	r3, [sp, #28]
 800248e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002492:	931a      	str	r3, [sp, #104]	; 0x68
 8002494:	4654      	mov	r4, sl
 8002496:	2205      	movs	r2, #5
 8002498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800249c:	4850      	ldr	r0, [pc, #320]	; (80025e0 <_svfiprintf_r+0x1e8>)
 800249e:	f7fd fe97 	bl	80001d0 <memchr>
 80024a2:	9a04      	ldr	r2, [sp, #16]
 80024a4:	b9d8      	cbnz	r0, 80024de <_svfiprintf_r+0xe6>
 80024a6:	06d0      	lsls	r0, r2, #27
 80024a8:	bf44      	itt	mi
 80024aa:	2320      	movmi	r3, #32
 80024ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024b0:	0711      	lsls	r1, r2, #28
 80024b2:	bf44      	itt	mi
 80024b4:	232b      	movmi	r3, #43	; 0x2b
 80024b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024ba:	f89a 3000 	ldrb.w	r3, [sl]
 80024be:	2b2a      	cmp	r3, #42	; 0x2a
 80024c0:	d015      	beq.n	80024ee <_svfiprintf_r+0xf6>
 80024c2:	9a07      	ldr	r2, [sp, #28]
 80024c4:	4654      	mov	r4, sl
 80024c6:	2000      	movs	r0, #0
 80024c8:	f04f 0c0a 	mov.w	ip, #10
 80024cc:	4621      	mov	r1, r4
 80024ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024d2:	3b30      	subs	r3, #48	; 0x30
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d94d      	bls.n	8002574 <_svfiprintf_r+0x17c>
 80024d8:	b1b0      	cbz	r0, 8002508 <_svfiprintf_r+0x110>
 80024da:	9207      	str	r2, [sp, #28]
 80024dc:	e014      	b.n	8002508 <_svfiprintf_r+0x110>
 80024de:	eba0 0308 	sub.w	r3, r0, r8
 80024e2:	fa09 f303 	lsl.w	r3, r9, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	9304      	str	r3, [sp, #16]
 80024ea:	46a2      	mov	sl, r4
 80024ec:	e7d2      	b.n	8002494 <_svfiprintf_r+0x9c>
 80024ee:	9b03      	ldr	r3, [sp, #12]
 80024f0:	1d19      	adds	r1, r3, #4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	9103      	str	r1, [sp, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bfbb      	ittet	lt
 80024fa:	425b      	neglt	r3, r3
 80024fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002500:	9307      	strge	r3, [sp, #28]
 8002502:	9307      	strlt	r3, [sp, #28]
 8002504:	bfb8      	it	lt
 8002506:	9204      	strlt	r2, [sp, #16]
 8002508:	7823      	ldrb	r3, [r4, #0]
 800250a:	2b2e      	cmp	r3, #46	; 0x2e
 800250c:	d10c      	bne.n	8002528 <_svfiprintf_r+0x130>
 800250e:	7863      	ldrb	r3, [r4, #1]
 8002510:	2b2a      	cmp	r3, #42	; 0x2a
 8002512:	d134      	bne.n	800257e <_svfiprintf_r+0x186>
 8002514:	9b03      	ldr	r3, [sp, #12]
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	9203      	str	r2, [sp, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	bfb8      	it	lt
 8002520:	f04f 33ff 	movlt.w	r3, #4294967295
 8002524:	3402      	adds	r4, #2
 8002526:	9305      	str	r3, [sp, #20]
 8002528:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80025f0 <_svfiprintf_r+0x1f8>
 800252c:	7821      	ldrb	r1, [r4, #0]
 800252e:	2203      	movs	r2, #3
 8002530:	4650      	mov	r0, sl
 8002532:	f7fd fe4d 	bl	80001d0 <memchr>
 8002536:	b138      	cbz	r0, 8002548 <_svfiprintf_r+0x150>
 8002538:	9b04      	ldr	r3, [sp, #16]
 800253a:	eba0 000a 	sub.w	r0, r0, sl
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	4082      	lsls	r2, r0
 8002542:	4313      	orrs	r3, r2
 8002544:	3401      	adds	r4, #1
 8002546:	9304      	str	r3, [sp, #16]
 8002548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800254c:	4825      	ldr	r0, [pc, #148]	; (80025e4 <_svfiprintf_r+0x1ec>)
 800254e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002552:	2206      	movs	r2, #6
 8002554:	f7fd fe3c 	bl	80001d0 <memchr>
 8002558:	2800      	cmp	r0, #0
 800255a:	d038      	beq.n	80025ce <_svfiprintf_r+0x1d6>
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <_svfiprintf_r+0x1f0>)
 800255e:	bb1b      	cbnz	r3, 80025a8 <_svfiprintf_r+0x1b0>
 8002560:	9b03      	ldr	r3, [sp, #12]
 8002562:	3307      	adds	r3, #7
 8002564:	f023 0307 	bic.w	r3, r3, #7
 8002568:	3308      	adds	r3, #8
 800256a:	9303      	str	r3, [sp, #12]
 800256c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800256e:	4433      	add	r3, r6
 8002570:	9309      	str	r3, [sp, #36]	; 0x24
 8002572:	e768      	b.n	8002446 <_svfiprintf_r+0x4e>
 8002574:	fb0c 3202 	mla	r2, ip, r2, r3
 8002578:	460c      	mov	r4, r1
 800257a:	2001      	movs	r0, #1
 800257c:	e7a6      	b.n	80024cc <_svfiprintf_r+0xd4>
 800257e:	2300      	movs	r3, #0
 8002580:	3401      	adds	r4, #1
 8002582:	9305      	str	r3, [sp, #20]
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0c0a 	mov.w	ip, #10
 800258a:	4620      	mov	r0, r4
 800258c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002590:	3a30      	subs	r2, #48	; 0x30
 8002592:	2a09      	cmp	r2, #9
 8002594:	d903      	bls.n	800259e <_svfiprintf_r+0x1a6>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0c6      	beq.n	8002528 <_svfiprintf_r+0x130>
 800259a:	9105      	str	r1, [sp, #20]
 800259c:	e7c4      	b.n	8002528 <_svfiprintf_r+0x130>
 800259e:	fb0c 2101 	mla	r1, ip, r1, r2
 80025a2:	4604      	mov	r4, r0
 80025a4:	2301      	movs	r3, #1
 80025a6:	e7f0      	b.n	800258a <_svfiprintf_r+0x192>
 80025a8:	ab03      	add	r3, sp, #12
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	462a      	mov	r2, r5
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <_svfiprintf_r+0x1f4>)
 80025b0:	a904      	add	r1, sp, #16
 80025b2:	4638      	mov	r0, r7
 80025b4:	f3af 8000 	nop.w
 80025b8:	1c42      	adds	r2, r0, #1
 80025ba:	4606      	mov	r6, r0
 80025bc:	d1d6      	bne.n	800256c <_svfiprintf_r+0x174>
 80025be:	89ab      	ldrh	r3, [r5, #12]
 80025c0:	065b      	lsls	r3, r3, #25
 80025c2:	f53f af2d 	bmi.w	8002420 <_svfiprintf_r+0x28>
 80025c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025c8:	b01d      	add	sp, #116	; 0x74
 80025ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ce:	ab03      	add	r3, sp, #12
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	462a      	mov	r2, r5
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <_svfiprintf_r+0x1f4>)
 80025d6:	a904      	add	r1, sp, #16
 80025d8:	4638      	mov	r0, r7
 80025da:	f000 f879 	bl	80026d0 <_printf_i>
 80025de:	e7eb      	b.n	80025b8 <_svfiprintf_r+0x1c0>
 80025e0:	08002a54 	.word	0x08002a54
 80025e4:	08002a5e 	.word	0x08002a5e
 80025e8:	00000000 	.word	0x00000000
 80025ec:	08002345 	.word	0x08002345
 80025f0:	08002a5a 	.word	0x08002a5a

080025f4 <_printf_common>:
 80025f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f8:	4616      	mov	r6, r2
 80025fa:	4699      	mov	r9, r3
 80025fc:	688a      	ldr	r2, [r1, #8]
 80025fe:	690b      	ldr	r3, [r1, #16]
 8002600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002604:	4293      	cmp	r3, r2
 8002606:	bfb8      	it	lt
 8002608:	4613      	movlt	r3, r2
 800260a:	6033      	str	r3, [r6, #0]
 800260c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002610:	4607      	mov	r7, r0
 8002612:	460c      	mov	r4, r1
 8002614:	b10a      	cbz	r2, 800261a <_printf_common+0x26>
 8002616:	3301      	adds	r3, #1
 8002618:	6033      	str	r3, [r6, #0]
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	0699      	lsls	r1, r3, #26
 800261e:	bf42      	ittt	mi
 8002620:	6833      	ldrmi	r3, [r6, #0]
 8002622:	3302      	addmi	r3, #2
 8002624:	6033      	strmi	r3, [r6, #0]
 8002626:	6825      	ldr	r5, [r4, #0]
 8002628:	f015 0506 	ands.w	r5, r5, #6
 800262c:	d106      	bne.n	800263c <_printf_common+0x48>
 800262e:	f104 0a19 	add.w	sl, r4, #25
 8002632:	68e3      	ldr	r3, [r4, #12]
 8002634:	6832      	ldr	r2, [r6, #0]
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	42ab      	cmp	r3, r5
 800263a:	dc26      	bgt.n	800268a <_printf_common+0x96>
 800263c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002640:	1e13      	subs	r3, r2, #0
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	bf18      	it	ne
 8002646:	2301      	movne	r3, #1
 8002648:	0692      	lsls	r2, r2, #26
 800264a:	d42b      	bmi.n	80026a4 <_printf_common+0xb0>
 800264c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002650:	4649      	mov	r1, r9
 8002652:	4638      	mov	r0, r7
 8002654:	47c0      	blx	r8
 8002656:	3001      	adds	r0, #1
 8002658:	d01e      	beq.n	8002698 <_printf_common+0xa4>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	6922      	ldr	r2, [r4, #16]
 800265e:	f003 0306 	and.w	r3, r3, #6
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf02      	ittt	eq
 8002666:	68e5      	ldreq	r5, [r4, #12]
 8002668:	6833      	ldreq	r3, [r6, #0]
 800266a:	1aed      	subeq	r5, r5, r3
 800266c:	68a3      	ldr	r3, [r4, #8]
 800266e:	bf0c      	ite	eq
 8002670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002674:	2500      	movne	r5, #0
 8002676:	4293      	cmp	r3, r2
 8002678:	bfc4      	itt	gt
 800267a:	1a9b      	subgt	r3, r3, r2
 800267c:	18ed      	addgt	r5, r5, r3
 800267e:	2600      	movs	r6, #0
 8002680:	341a      	adds	r4, #26
 8002682:	42b5      	cmp	r5, r6
 8002684:	d11a      	bne.n	80026bc <_printf_common+0xc8>
 8002686:	2000      	movs	r0, #0
 8002688:	e008      	b.n	800269c <_printf_common+0xa8>
 800268a:	2301      	movs	r3, #1
 800268c:	4652      	mov	r2, sl
 800268e:	4649      	mov	r1, r9
 8002690:	4638      	mov	r0, r7
 8002692:	47c0      	blx	r8
 8002694:	3001      	adds	r0, #1
 8002696:	d103      	bne.n	80026a0 <_printf_common+0xac>
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a0:	3501      	adds	r5, #1
 80026a2:	e7c6      	b.n	8002632 <_printf_common+0x3e>
 80026a4:	18e1      	adds	r1, r4, r3
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	2030      	movs	r0, #48	; 0x30
 80026aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026ae:	4422      	add	r2, r4
 80026b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026b8:	3302      	adds	r3, #2
 80026ba:	e7c7      	b.n	800264c <_printf_common+0x58>
 80026bc:	2301      	movs	r3, #1
 80026be:	4622      	mov	r2, r4
 80026c0:	4649      	mov	r1, r9
 80026c2:	4638      	mov	r0, r7
 80026c4:	47c0      	blx	r8
 80026c6:	3001      	adds	r0, #1
 80026c8:	d0e6      	beq.n	8002698 <_printf_common+0xa4>
 80026ca:	3601      	adds	r6, #1
 80026cc:	e7d9      	b.n	8002682 <_printf_common+0x8e>
	...

080026d0 <_printf_i>:
 80026d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026d4:	7e0f      	ldrb	r7, [r1, #24]
 80026d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026d8:	2f78      	cmp	r7, #120	; 0x78
 80026da:	4691      	mov	r9, r2
 80026dc:	4680      	mov	r8, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	469a      	mov	sl, r3
 80026e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026e6:	d807      	bhi.n	80026f8 <_printf_i+0x28>
 80026e8:	2f62      	cmp	r7, #98	; 0x62
 80026ea:	d80a      	bhi.n	8002702 <_printf_i+0x32>
 80026ec:	2f00      	cmp	r7, #0
 80026ee:	f000 80d4 	beq.w	800289a <_printf_i+0x1ca>
 80026f2:	2f58      	cmp	r7, #88	; 0x58
 80026f4:	f000 80c0 	beq.w	8002878 <_printf_i+0x1a8>
 80026f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002700:	e03a      	b.n	8002778 <_printf_i+0xa8>
 8002702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002706:	2b15      	cmp	r3, #21
 8002708:	d8f6      	bhi.n	80026f8 <_printf_i+0x28>
 800270a:	a101      	add	r1, pc, #4	; (adr r1, 8002710 <_printf_i+0x40>)
 800270c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002710:	08002769 	.word	0x08002769
 8002714:	0800277d 	.word	0x0800277d
 8002718:	080026f9 	.word	0x080026f9
 800271c:	080026f9 	.word	0x080026f9
 8002720:	080026f9 	.word	0x080026f9
 8002724:	080026f9 	.word	0x080026f9
 8002728:	0800277d 	.word	0x0800277d
 800272c:	080026f9 	.word	0x080026f9
 8002730:	080026f9 	.word	0x080026f9
 8002734:	080026f9 	.word	0x080026f9
 8002738:	080026f9 	.word	0x080026f9
 800273c:	08002881 	.word	0x08002881
 8002740:	080027a9 	.word	0x080027a9
 8002744:	0800283b 	.word	0x0800283b
 8002748:	080026f9 	.word	0x080026f9
 800274c:	080026f9 	.word	0x080026f9
 8002750:	080028a3 	.word	0x080028a3
 8002754:	080026f9 	.word	0x080026f9
 8002758:	080027a9 	.word	0x080027a9
 800275c:	080026f9 	.word	0x080026f9
 8002760:	080026f9 	.word	0x080026f9
 8002764:	08002843 	.word	0x08002843
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	1d1a      	adds	r2, r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	602a      	str	r2, [r5, #0]
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002778:	2301      	movs	r3, #1
 800277a:	e09f      	b.n	80028bc <_printf_i+0x1ec>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	0607      	lsls	r7, r0, #24
 8002782:	f103 0104 	add.w	r1, r3, #4
 8002786:	6029      	str	r1, [r5, #0]
 8002788:	d501      	bpl.n	800278e <_printf_i+0xbe>
 800278a:	681e      	ldr	r6, [r3, #0]
 800278c:	e003      	b.n	8002796 <_printf_i+0xc6>
 800278e:	0646      	lsls	r6, r0, #25
 8002790:	d5fb      	bpl.n	800278a <_printf_i+0xba>
 8002792:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002796:	2e00      	cmp	r6, #0
 8002798:	da03      	bge.n	80027a2 <_printf_i+0xd2>
 800279a:	232d      	movs	r3, #45	; 0x2d
 800279c:	4276      	negs	r6, r6
 800279e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027a2:	485a      	ldr	r0, [pc, #360]	; (800290c <_printf_i+0x23c>)
 80027a4:	230a      	movs	r3, #10
 80027a6:	e012      	b.n	80027ce <_printf_i+0xfe>
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	6820      	ldr	r0, [r4, #0]
 80027ac:	1d19      	adds	r1, r3, #4
 80027ae:	6029      	str	r1, [r5, #0]
 80027b0:	0605      	lsls	r5, r0, #24
 80027b2:	d501      	bpl.n	80027b8 <_printf_i+0xe8>
 80027b4:	681e      	ldr	r6, [r3, #0]
 80027b6:	e002      	b.n	80027be <_printf_i+0xee>
 80027b8:	0641      	lsls	r1, r0, #25
 80027ba:	d5fb      	bpl.n	80027b4 <_printf_i+0xe4>
 80027bc:	881e      	ldrh	r6, [r3, #0]
 80027be:	4853      	ldr	r0, [pc, #332]	; (800290c <_printf_i+0x23c>)
 80027c0:	2f6f      	cmp	r7, #111	; 0x6f
 80027c2:	bf0c      	ite	eq
 80027c4:	2308      	moveq	r3, #8
 80027c6:	230a      	movne	r3, #10
 80027c8:	2100      	movs	r1, #0
 80027ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027ce:	6865      	ldr	r5, [r4, #4]
 80027d0:	60a5      	str	r5, [r4, #8]
 80027d2:	2d00      	cmp	r5, #0
 80027d4:	bfa2      	ittt	ge
 80027d6:	6821      	ldrge	r1, [r4, #0]
 80027d8:	f021 0104 	bicge.w	r1, r1, #4
 80027dc:	6021      	strge	r1, [r4, #0]
 80027de:	b90e      	cbnz	r6, 80027e4 <_printf_i+0x114>
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d04b      	beq.n	800287c <_printf_i+0x1ac>
 80027e4:	4615      	mov	r5, r2
 80027e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80027ea:	fb03 6711 	mls	r7, r3, r1, r6
 80027ee:	5dc7      	ldrb	r7, [r0, r7]
 80027f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027f4:	4637      	mov	r7, r6
 80027f6:	42bb      	cmp	r3, r7
 80027f8:	460e      	mov	r6, r1
 80027fa:	d9f4      	bls.n	80027e6 <_printf_i+0x116>
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d10b      	bne.n	8002818 <_printf_i+0x148>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	07de      	lsls	r6, r3, #31
 8002804:	d508      	bpl.n	8002818 <_printf_i+0x148>
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	6861      	ldr	r1, [r4, #4]
 800280a:	4299      	cmp	r1, r3
 800280c:	bfde      	ittt	le
 800280e:	2330      	movle	r3, #48	; 0x30
 8002810:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002814:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002818:	1b52      	subs	r2, r2, r5
 800281a:	6122      	str	r2, [r4, #16]
 800281c:	f8cd a000 	str.w	sl, [sp]
 8002820:	464b      	mov	r3, r9
 8002822:	aa03      	add	r2, sp, #12
 8002824:	4621      	mov	r1, r4
 8002826:	4640      	mov	r0, r8
 8002828:	f7ff fee4 	bl	80025f4 <_printf_common>
 800282c:	3001      	adds	r0, #1
 800282e:	d14a      	bne.n	80028c6 <_printf_i+0x1f6>
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	b004      	add	sp, #16
 8002836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	4833      	ldr	r0, [pc, #204]	; (8002910 <_printf_i+0x240>)
 8002844:	2778      	movs	r7, #120	; 0x78
 8002846:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	6829      	ldr	r1, [r5, #0]
 800284e:	061f      	lsls	r7, r3, #24
 8002850:	f851 6b04 	ldr.w	r6, [r1], #4
 8002854:	d402      	bmi.n	800285c <_printf_i+0x18c>
 8002856:	065f      	lsls	r7, r3, #25
 8002858:	bf48      	it	mi
 800285a:	b2b6      	uxthmi	r6, r6
 800285c:	07df      	lsls	r7, r3, #31
 800285e:	bf48      	it	mi
 8002860:	f043 0320 	orrmi.w	r3, r3, #32
 8002864:	6029      	str	r1, [r5, #0]
 8002866:	bf48      	it	mi
 8002868:	6023      	strmi	r3, [r4, #0]
 800286a:	b91e      	cbnz	r6, 8002874 <_printf_i+0x1a4>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f023 0320 	bic.w	r3, r3, #32
 8002872:	6023      	str	r3, [r4, #0]
 8002874:	2310      	movs	r3, #16
 8002876:	e7a7      	b.n	80027c8 <_printf_i+0xf8>
 8002878:	4824      	ldr	r0, [pc, #144]	; (800290c <_printf_i+0x23c>)
 800287a:	e7e4      	b.n	8002846 <_printf_i+0x176>
 800287c:	4615      	mov	r5, r2
 800287e:	e7bd      	b.n	80027fc <_printf_i+0x12c>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	6826      	ldr	r6, [r4, #0]
 8002884:	6961      	ldr	r1, [r4, #20]
 8002886:	1d18      	adds	r0, r3, #4
 8002888:	6028      	str	r0, [r5, #0]
 800288a:	0635      	lsls	r5, r6, #24
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	d501      	bpl.n	8002894 <_printf_i+0x1c4>
 8002890:	6019      	str	r1, [r3, #0]
 8002892:	e002      	b.n	800289a <_printf_i+0x1ca>
 8002894:	0670      	lsls	r0, r6, #25
 8002896:	d5fb      	bpl.n	8002890 <_printf_i+0x1c0>
 8002898:	8019      	strh	r1, [r3, #0]
 800289a:	2300      	movs	r3, #0
 800289c:	6123      	str	r3, [r4, #16]
 800289e:	4615      	mov	r5, r2
 80028a0:	e7bc      	b.n	800281c <_printf_i+0x14c>
 80028a2:	682b      	ldr	r3, [r5, #0]
 80028a4:	1d1a      	adds	r2, r3, #4
 80028a6:	602a      	str	r2, [r5, #0]
 80028a8:	681d      	ldr	r5, [r3, #0]
 80028aa:	6862      	ldr	r2, [r4, #4]
 80028ac:	2100      	movs	r1, #0
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7fd fc8e 	bl	80001d0 <memchr>
 80028b4:	b108      	cbz	r0, 80028ba <_printf_i+0x1ea>
 80028b6:	1b40      	subs	r0, r0, r5
 80028b8:	6060      	str	r0, [r4, #4]
 80028ba:	6863      	ldr	r3, [r4, #4]
 80028bc:	6123      	str	r3, [r4, #16]
 80028be:	2300      	movs	r3, #0
 80028c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c4:	e7aa      	b.n	800281c <_printf_i+0x14c>
 80028c6:	6923      	ldr	r3, [r4, #16]
 80028c8:	462a      	mov	r2, r5
 80028ca:	4649      	mov	r1, r9
 80028cc:	4640      	mov	r0, r8
 80028ce:	47d0      	blx	sl
 80028d0:	3001      	adds	r0, #1
 80028d2:	d0ad      	beq.n	8002830 <_printf_i+0x160>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	079b      	lsls	r3, r3, #30
 80028d8:	d413      	bmi.n	8002902 <_printf_i+0x232>
 80028da:	68e0      	ldr	r0, [r4, #12]
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	4298      	cmp	r0, r3
 80028e0:	bfb8      	it	lt
 80028e2:	4618      	movlt	r0, r3
 80028e4:	e7a6      	b.n	8002834 <_printf_i+0x164>
 80028e6:	2301      	movs	r3, #1
 80028e8:	4632      	mov	r2, r6
 80028ea:	4649      	mov	r1, r9
 80028ec:	4640      	mov	r0, r8
 80028ee:	47d0      	blx	sl
 80028f0:	3001      	adds	r0, #1
 80028f2:	d09d      	beq.n	8002830 <_printf_i+0x160>
 80028f4:	3501      	adds	r5, #1
 80028f6:	68e3      	ldr	r3, [r4, #12]
 80028f8:	9903      	ldr	r1, [sp, #12]
 80028fa:	1a5b      	subs	r3, r3, r1
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	dcf2      	bgt.n	80028e6 <_printf_i+0x216>
 8002900:	e7eb      	b.n	80028da <_printf_i+0x20a>
 8002902:	2500      	movs	r5, #0
 8002904:	f104 0619 	add.w	r6, r4, #25
 8002908:	e7f5      	b.n	80028f6 <_printf_i+0x226>
 800290a:	bf00      	nop
 800290c:	08002a65 	.word	0x08002a65
 8002910:	08002a76 	.word	0x08002a76

08002914 <memmove>:
 8002914:	4288      	cmp	r0, r1
 8002916:	b510      	push	{r4, lr}
 8002918:	eb01 0402 	add.w	r4, r1, r2
 800291c:	d902      	bls.n	8002924 <memmove+0x10>
 800291e:	4284      	cmp	r4, r0
 8002920:	4623      	mov	r3, r4
 8002922:	d807      	bhi.n	8002934 <memmove+0x20>
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	42a1      	cmp	r1, r4
 8002928:	d008      	beq.n	800293c <memmove+0x28>
 800292a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800292e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002932:	e7f8      	b.n	8002926 <memmove+0x12>
 8002934:	4402      	add	r2, r0
 8002936:	4601      	mov	r1, r0
 8002938:	428a      	cmp	r2, r1
 800293a:	d100      	bne.n	800293e <memmove+0x2a>
 800293c:	bd10      	pop	{r4, pc}
 800293e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002946:	e7f7      	b.n	8002938 <memmove+0x24>

08002948 <_sbrk_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4d06      	ldr	r5, [pc, #24]	; (8002964 <_sbrk_r+0x1c>)
 800294c:	2300      	movs	r3, #0
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	f7fd ff4a 	bl	80007ec <_sbrk>
 8002958:	1c43      	adds	r3, r0, #1
 800295a:	d102      	bne.n	8002962 <_sbrk_r+0x1a>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	b103      	cbz	r3, 8002962 <_sbrk_r+0x1a>
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	bd38      	pop	{r3, r4, r5, pc}
 8002964:	20000264 	.word	0x20000264

08002968 <memcpy>:
 8002968:	440a      	add	r2, r1
 800296a:	4291      	cmp	r1, r2
 800296c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002970:	d100      	bne.n	8002974 <memcpy+0xc>
 8002972:	4770      	bx	lr
 8002974:	b510      	push	{r4, lr}
 8002976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800297a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800297e:	4291      	cmp	r1, r2
 8002980:	d1f9      	bne.n	8002976 <memcpy+0xe>
 8002982:	bd10      	pop	{r4, pc}

08002984 <_realloc_r>:
 8002984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002988:	4680      	mov	r8, r0
 800298a:	4614      	mov	r4, r2
 800298c:	460e      	mov	r6, r1
 800298e:	b921      	cbnz	r1, 800299a <_realloc_r+0x16>
 8002990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002994:	4611      	mov	r1, r2
 8002996:	f7ff bc49 	b.w	800222c <_malloc_r>
 800299a:	b92a      	cbnz	r2, 80029a8 <_realloc_r+0x24>
 800299c:	f7ff fbda 	bl	8002154 <_free_r>
 80029a0:	4625      	mov	r5, r4
 80029a2:	4628      	mov	r0, r5
 80029a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a8:	f000 f81b 	bl	80029e2 <_malloc_usable_size_r>
 80029ac:	4284      	cmp	r4, r0
 80029ae:	4607      	mov	r7, r0
 80029b0:	d802      	bhi.n	80029b8 <_realloc_r+0x34>
 80029b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029b6:	d812      	bhi.n	80029de <_realloc_r+0x5a>
 80029b8:	4621      	mov	r1, r4
 80029ba:	4640      	mov	r0, r8
 80029bc:	f7ff fc36 	bl	800222c <_malloc_r>
 80029c0:	4605      	mov	r5, r0
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d0ed      	beq.n	80029a2 <_realloc_r+0x1e>
 80029c6:	42bc      	cmp	r4, r7
 80029c8:	4622      	mov	r2, r4
 80029ca:	4631      	mov	r1, r6
 80029cc:	bf28      	it	cs
 80029ce:	463a      	movcs	r2, r7
 80029d0:	f7ff ffca 	bl	8002968 <memcpy>
 80029d4:	4631      	mov	r1, r6
 80029d6:	4640      	mov	r0, r8
 80029d8:	f7ff fbbc 	bl	8002154 <_free_r>
 80029dc:	e7e1      	b.n	80029a2 <_realloc_r+0x1e>
 80029de:	4635      	mov	r5, r6
 80029e0:	e7df      	b.n	80029a2 <_realloc_r+0x1e>

080029e2 <_malloc_usable_size_r>:
 80029e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e6:	1f18      	subs	r0, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfbc      	itt	lt
 80029ec:	580b      	ldrlt	r3, [r1, r0]
 80029ee:	18c0      	addlt	r0, r0, r3
 80029f0:	4770      	bx	lr
	...

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
