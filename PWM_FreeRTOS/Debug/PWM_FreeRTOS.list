
PWM_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080094e0  080094e0  0000a4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009690  08009690  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009690  08009690  0000a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009698  08009698  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080096a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b074  2**0
                  CONTENTS
 10 .bss          00004c50  20000074  20000074  0000b074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cc4  20004cc4  0000b074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019573  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003803  00000000  00000000  00024617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  00027e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111e  00000000  00000000  00029440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eae  00000000  00000000  0002a55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019853  00000000  00000000  0004e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9006  00000000  00000000  00067c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140c65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000673c  00000000  00000000  00140ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001473e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094c8 	.word	0x080094c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080094c8 	.word	0x080094c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96a 	b.w	8000e48 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	460c      	mov	r4, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14e      	bne.n	8000c36 <__udivmoddi4+0xaa>
 8000b98:	4694      	mov	ip, r2
 8000b9a:	458c      	cmp	ip, r1
 8000b9c:	4686      	mov	lr, r0
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	d962      	bls.n	8000c6a <__udivmoddi4+0xde>
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba6:	f1c2 0320 	rsb	r3, r2, #32
 8000baa:	4091      	lsls	r1, r2
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	4319      	orrs	r1, r3
 8000bb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bbe:	fa1f f68c 	uxth.w	r6, ip
 8000bc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bca:	fb07 1114 	mls	r1, r7, r4, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb04 f106 	mul.w	r1, r4, r6
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000be2:	f080 8112 	bcs.w	8000e0a <__udivmoddi4+0x27e>
 8000be6:	4299      	cmp	r1, r3
 8000be8:	f240 810f 	bls.w	8000e0a <__udivmoddi4+0x27e>
 8000bec:	3c02      	subs	r4, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c02:	fb00 f606 	mul.w	r6, r0, r6
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x94>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c12:	f080 80fc 	bcs.w	8000e0e <__udivmoddi4+0x282>
 8000c16:	429e      	cmp	r6, r3
 8000c18:	f240 80f9 	bls.w	8000e0e <__udivmoddi4+0x282>
 8000c1c:	4463      	add	r3, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	1b9b      	subs	r3, r3, r6
 8000c22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11d      	cbz	r5, 8000c32 <__udivmoddi4+0xa6>
 8000c2a:	40d3      	lsrs	r3, r2
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d905      	bls.n	8000c46 <__udivmoddi4+0xba>
 8000c3a:	b10d      	cbz	r5, 8000c40 <__udivmoddi4+0xb4>
 8000c3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	4608      	mov	r0, r1
 8000c44:	e7f5      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c46:	fab3 f183 	clz	r1, r3
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d146      	bne.n	8000cdc <__udivmoddi4+0x150>
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xcc>
 8000c52:	4290      	cmp	r0, r2
 8000c54:	f0c0 80f0 	bcc.w	8000e38 <__udivmoddi4+0x2ac>
 8000c58:	1a86      	subs	r6, r0, r2
 8000c5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	2d00      	cmp	r5, #0
 8000c62:	d0e6      	beq.n	8000c32 <__udivmoddi4+0xa6>
 8000c64:	e9c5 6300 	strd	r6, r3, [r5]
 8000c68:	e7e3      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x204>
 8000c70:	eba1 040c 	sub.w	r4, r1, ip
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	fa1f f78c 	uxth.w	r7, ip
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb08 4416 	mls	r4, r8, r6, r4
 8000c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8e:	fb07 f006 	mul.w	r0, r7, r6
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x11c>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x11a>
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	f200 80cd 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000ca6:	4626      	mov	r6, r4
 8000ca8:	1a1c      	subs	r4, r3, r0
 8000caa:	fa1f f38e 	uxth.w	r3, lr
 8000cae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb00 f707 	mul.w	r7, r0, r7
 8000cbe:	429f      	cmp	r7, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x148>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x146>
 8000ccc:	429f      	cmp	r7, r3
 8000cce:	f200 80b0 	bhi.w	8000e32 <__udivmoddi4+0x2a6>
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	1bdb      	subs	r3, r3, r7
 8000cd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0x9c>
 8000cdc:	f1c1 0620 	rsb	r6, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cec:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf0:	ea43 030c 	orr.w	r3, r3, ip
 8000cf4:	40f4      	lsrs	r4, r6
 8000cf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cfa:	0c38      	lsrs	r0, r7, #16
 8000cfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d00:	fbb4 fef0 	udiv	lr, r4, r0
 8000d04:	fa1f fc87 	uxth.w	ip, r7
 8000d08:	fb00 441e 	mls	r4, r0, lr, r4
 8000d0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d10:	fb0e f90c 	mul.w	r9, lr, ip
 8000d14:	45a1      	cmp	r9, r4
 8000d16:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1a:	d90a      	bls.n	8000d32 <__udivmoddi4+0x1a6>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d22:	f080 8084 	bcs.w	8000e2e <__udivmoddi4+0x2a2>
 8000d26:	45a1      	cmp	r9, r4
 8000d28:	f240 8081 	bls.w	8000e2e <__udivmoddi4+0x2a2>
 8000d2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d30:	443c      	add	r4, r7
 8000d32:	eba4 0409 	sub.w	r4, r4, r9
 8000d36:	fa1f f983 	uxth.w	r9, r3
 8000d3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x1d2>
 8000d4e:	193c      	adds	r4, r7, r4
 8000d50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d54:	d267      	bcs.n	8000e26 <__udivmoddi4+0x29a>
 8000d56:	45a4      	cmp	ip, r4
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0x29a>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d62:	fba0 9302 	umull	r9, r3, r0, r2
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	46ce      	mov	lr, r9
 8000d6e:	469c      	mov	ip, r3
 8000d70:	d351      	bcc.n	8000e16 <__udivmoddi4+0x28a>
 8000d72:	d04e      	beq.n	8000e12 <__udivmoddi4+0x286>
 8000d74:	b155      	cbz	r5, 8000d8c <__udivmoddi4+0x200>
 8000d76:	ebb8 030e 	subs.w	r3, r8, lr
 8000d7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d82:	40cb      	lsrs	r3, r1
 8000d84:	431e      	orrs	r6, r3
 8000d86:	40cc      	lsrs	r4, r1
 8000d88:	e9c5 6400 	strd	r6, r4, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e750      	b.n	8000c32 <__udivmoddi4+0xa6>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f103 	lsr.w	r1, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000da0:	4094      	lsls	r4, r2
 8000da2:	430c      	orrs	r4, r1
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dac:	fa1f f78c 	uxth.w	r7, ip
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3110 	mls	r1, r8, r0, r3
 8000db8:	0c23      	lsrs	r3, r4, #16
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb00 f107 	mul.w	r1, r0, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x24c>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dce:	d22c      	bcs.n	8000e2a <__udivmoddi4+0x29e>
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d92a      	bls.n	8000e2a <__udivmoddi4+0x29e>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de0:	fb08 3311 	mls	r3, r8, r1, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb01 f307 	mul.w	r3, r1, r7
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x276>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df8:	d213      	bcs.n	8000e22 <__udivmoddi4+0x296>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d911      	bls.n	8000e22 <__udivmoddi4+0x296>
 8000dfe:	3902      	subs	r1, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	1ae4      	subs	r4, r4, r3
 8000e04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e08:	e739      	b.n	8000c7e <__udivmoddi4+0xf2>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	e6f0      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e706      	b.n	8000c20 <__udivmoddi4+0x94>
 8000e12:	45c8      	cmp	r8, r9
 8000e14:	d2ae      	bcs.n	8000d74 <__udivmoddi4+0x1e8>
 8000e16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7a8      	b.n	8000d74 <__udivmoddi4+0x1e8>
 8000e22:	4631      	mov	r1, r6
 8000e24:	e7ed      	b.n	8000e02 <__udivmoddi4+0x276>
 8000e26:	4603      	mov	r3, r0
 8000e28:	e799      	b.n	8000d5e <__udivmoddi4+0x1d2>
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e7d4      	b.n	8000dd8 <__udivmoddi4+0x24c>
 8000e2e:	46d6      	mov	lr, sl
 8000e30:	e77f      	b.n	8000d32 <__udivmoddi4+0x1a6>
 8000e32:	4463      	add	r3, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	e74d      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e70f      	b.n	8000c60 <__udivmoddi4+0xd4>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	e730      	b.n	8000ca8 <__udivmoddi4+0x11c>
 8000e46:	bf00      	nop

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <HAL_TIM_PWM_PulseFinishedCallback>:

}
#endif

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) //called once pwm pulse goes low
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7f1b      	ldrb	r3, [r3, #28]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		g_ch1_state = 0; }
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7f1b      	ldrb	r3, [r3, #28]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d102      	bne.n	8000e70 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		g_ch2_state = 0; }
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	20000000 	.word	0x20000000

08000e84 <kalman_filter_init>:


#include "kalman_filter.h"


void kalman_filter_init(KalmanFilter* kf) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

    kf->q_angle = 0.001f;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <kalman_filter_init+0x48>)
 8000e90:	601a      	str	r2, [r3, #0]
    kf->r_measure = 0.03f;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <kalman_filter_init+0x4c>)
 8000e96:	605a      	str	r2, [r3, #4]
    kf->angle = 0.0f;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
    kf->p[0][0] = 0.0f;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    kf->p[0][1] = 0.0f;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
    kf->p[1][0] = 0.0f;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
    kf->p[1][1] = 0.0f;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	3a83126f 	.word	0x3a83126f
 8000ed0:	3cf5c28f 	.word	0x3cf5c28f

08000ed4 <kalman_filter_get_angle>:

float kalman_filter_get_angle(KalmanFilter* kf, float new_angle, float dt) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b08b      	sub	sp, #44	@ 0x2c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ee0:	edc7 0a01 	vstr	s1, [r7, #4]
    // Step 1: Predict
    kf->angle += 0.0f; // No gyroscope rate, angle remains the same
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eea:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001084 <kalman_filter_get_angle+0x1b0>
 8000eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	edc3 7a02 	vstr	s15, [r3, #8]

    kf->p[0][0] += dt * (dt * kf->p[1][1] - kf->p[0][1] - kf->p[1][0] + kf->q_angle);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	ed93 7a03 	vldr	s14, [r3, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	edd3 7a00 	vldr	s15, [r3]
 8000f26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= dt * kf->p[1][1];
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= dt * kf->p[1][1];
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] += 0.0f; // No process noise for bias
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f7e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001084 <kalman_filter_get_angle+0x1b0>
 8000f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update
    float s = kf->p[0][0] + kf->r_measure;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float k[2];
    k[0] = kf->p[0][0] / s;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fa6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fae:	edc7 7a04 	vstr	s15, [r7, #16]
    k[1] = kf->p[1][0] / s;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc0:	edc7 7a05 	vstr	s15, [r7, #20]

    float y = new_angle - kf->angle;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd2:	edc7 7a08 	vstr	s15, [r7, #32]
    kf->angle += k[0] * y;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fdc:	edd7 6a04 	vldr	s13, [r7, #16]
 8000fe0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edc3 7a02 	vstr	s15, [r3, #8]

    float p00_temp = kf->p[0][0];
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	61fb      	str	r3, [r7, #28]
    float p01_temp = kf->p[0][1];
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	61bb      	str	r3, [r7, #24]

    kf->p[0][0] -= k[0] * p00_temp;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	ed93 7a03 	vldr	s14, [r3, #12]
 8001004:	edd7 6a04 	vldr	s13, [r7, #16]
 8001008:	edd7 7a07 	vldr	s15, [r7, #28]
 800100c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= k[0] * p01_temp;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001020:	edd7 6a04 	vldr	s13, [r7, #16]
 8001024:	edd7 7a06 	vldr	s15, [r7, #24]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= k[1] * p00_temp;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	ed93 7a05 	vldr	s14, [r3, #20]
 800103c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001040:	edd7 7a07 	vldr	s15, [r7, #28]
 8001044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] -= k[1] * p01_temp;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	ed93 7a06 	vldr	s14, [r3, #24]
 8001058:	edd7 6a05 	vldr	s13, [r7, #20]
 800105c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	ee07 3a90 	vmov	s15, r3
}
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	372c      	adds	r7, #44	@ 0x2c
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	00000000 	.word	0x00000000

08001088 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
    // Perform  mapping
    long result = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	6a39      	ldr	r1, [r7, #32]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	1a8a      	subs	r2, r1, r2
 80010a2:	fb03 f202 	mul.w	r2, r3, r2
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1acb      	subs	r3, r1, r3
 80010ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

    // Clamp the result to the output range
    if (result > out_max) {
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd02      	ble.n	80010c4 <map+0x3c>
        result = out_max;
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e005      	b.n	80010d0 <map+0x48>
    } else if (result < out_min) {
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	da01      	bge.n	80010d0 <map+0x48>
        result = out_min;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	617b      	str	r3, [r7, #20]
    }

    return result;
 80010d0:	697b      	ldr	r3, [r7, #20]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <change_pwm_duty_cycle>:

void change_pwm_duty_cycle(uint32_t pwm_pulse, uint8_t timer_channel)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(&htim2, timer_channel, pwm_pulse);
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <change_pwm_duty_cycle+0x1c>
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <change_pwm_duty_cycle+0x50>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010fa:	e013      	b.n	8001124 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim2, timer_channel, pwm_pulse);
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d104      	bne.n	800110c <change_pwm_duty_cycle+0x2c>
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <change_pwm_duty_cycle+0x50>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800110a:	e00b      	b.n	8001124 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim2, timer_channel, pwm_pulse);
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d104      	bne.n	800111c <change_pwm_duty_cycle+0x3c>
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <change_pwm_duty_cycle+0x50>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800111a:	e003      	b.n	8001124 <change_pwm_duty_cycle+0x44>
	__HAL_TIM_SET_COMPARE(&htim2, timer_channel, pwm_pulse);
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <change_pwm_duty_cycle+0x50>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	200000e4 	.word	0x200000e4

08001134 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]

	}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001150:	f001 f840 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f872 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 f982 	bl	8001460 <MX_GPIO_Init>
  MX_I2C1_Init();
 800115c:	f000 f8ce 	bl	80012fc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001160:	f000 f8fa 	bl	8001358 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(mpu6050_init(&hi2c1, MPU6050_I2C_DEV_ADDR) != MPU6050_OK)
 8001164:	2168      	movs	r1, #104	@ 0x68
 8001166:	482a      	ldr	r0, [pc, #168]	@ (8001210 <main+0xc4>)
 8001168:	f000 fc42 	bl	80019f0 <mpu6050_init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <main+0x2a>
  {
  	  Error_Handler();
 8001172:	f000 fbc9 	bl	8001908 <Error_Handler>
  }

  mpu6050_disable_interrupt(&hi2c1, ALL_INT);  //disable all interrupts
 8001176:	21ff      	movs	r1, #255	@ 0xff
 8001178:	4825      	ldr	r0, [pc, #148]	@ (8001210 <main+0xc4>)
 800117a:	f000 fd57 	bl	8001c2c <mpu6050_disable_interrupt>
  mpu6050_interrupt_config(&hi2c1, INT_LEVEL_ACTIVE_HIGH);  //configure rising edge int triggering
 800117e:	2100      	movs	r1, #0
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <main+0xc4>)
 8001182:	f000 fce9 	bl	8001b58 <mpu6050_interrupt_config>
  mpu6050_enable_interrupt(&hi2c1, RAW_RDY_INT);  //enable int issuing when new raw data ready in regs
 8001186:	2100      	movs	r1, #0
 8001188:	4821      	ldr	r0, [pc, #132]	@ (8001210 <main+0xc4>)
 800118a:	f000 fd1f 	bl	8001bcc <mpu6050_enable_interrupt>

  if (mpu6050_configure_low_pass_filter(&hi2c1,DLPF_CFG_21HZ) != MPU6050_OK) {
 800118e:	2104      	movs	r1, #4
 8001190:	481f      	ldr	r0, [pc, #124]	@ (8001210 <main+0xc4>)
 8001192:	f000 fd81 	bl	8001c98 <mpu6050_configure_low_pass_filter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <main+0x54>
  	  Error_Handler();
 800119c:	f000 fbb4 	bl	8001908 <Error_Handler>
    }

  __HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <main+0xc8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <main+0xc8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1)!= HAL_OK)  	//PA15
 80011b0:	2100      	movs	r1, #0
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <main+0xc8>)
 80011b4:	f003 f8f4 	bl	80043a0 <HAL_TIM_PWM_Start_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <main+0x76>
  	{
  		Error_Handler();
 80011be:	f000 fba3 	bl	8001908 <Error_Handler>
  	}

  	if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2)!= HAL_OK)	//PA1
 80011c2:	2104      	movs	r1, #4
 80011c4:	4813      	ldr	r0, [pc, #76]	@ (8001214 <main+0xc8>)
 80011c6:	f003 f8eb 	bl	80043a0 <HAL_TIM_PWM_Start_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <main+0x88>
  	{
  		Error_Handler();
 80011d0:	f000 fb9a 	bl	8001908 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011d4:	f004 f882 	bl	80052dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <main+0xcc>)
 80011da:	2100      	movs	r1, #0
 80011dc:	480f      	ldr	r0, [pc, #60]	@ (800121c <main+0xd0>)
 80011de:	f004 f8dc 	bl	800539a <osThreadNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <main+0xd4>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* creation of SensorReadTask_ */
  SensorReadTask_Handle = osThreadNew(sensor_read_task, NULL, &SensorReadTask__attributes);
 80011e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001224 <main+0xd8>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	480e      	ldr	r0, [pc, #56]	@ (8001228 <main+0xdc>)
 80011ee:	f004 f8d4 	bl	800539a <osThreadNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <main+0xe0>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* creation of PWMControlTask_ */
  PWMControlTask_Handle = osThreadNew(pwm_control_task, NULL, &PWMControlTask__attributes);
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <main+0xe4>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	480d      	ldr	r0, [pc, #52]	@ (8001234 <main+0xe8>)
 80011fe:	f004 f8cc 	bl	800539a <osThreadNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a0c      	ldr	r2, [pc, #48]	@ (8001238 <main+0xec>)
 8001206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001208:	f004 f88c 	bl	8005324 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <main+0xc0>
 8001210:	20000090 	.word	0x20000090
 8001214:	200000e4 	.word	0x200000e4
 8001218:	0800955c 	.word	0x0800955c
 800121c:	0800170d 	.word	0x0800170d
 8001220:	2000012c 	.word	0x2000012c
 8001224:	08009580 	.word	0x08009580
 8001228:	0800171d 	.word	0x0800171d
 800122c:	20000130 	.word	0x20000130
 8001230:	080095a4 	.word	0x080095a4
 8001234:	080017a1 	.word	0x080017a1
 8001238:	20000134 	.word	0x20000134

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	@ 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 f853 	bl	80082f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <SystemClock_Config+0xb8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <SystemClock_Config+0xb8>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <SystemClock_Config+0xb8>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <SystemClock_Config+0xbc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <SystemClock_Config+0xbc>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <SystemClock_Config+0xbc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 faa7 	bl	8003800 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012b8:	f000 fb26 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fd08 	bl	8003cf0 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012e6:	f000 fb0f 	bl	8001908 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3750      	adds	r7, #80	@ 0x50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C1_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C1_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C1_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C1_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C1_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C1_Init+0x50>)
 800133a:	f001 fa3d 	bl	80027b8 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fae0 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000090 	.word	0x20000090
 8001350:	40005400 	.word	0x40005400
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	@ 0x38
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <MX_TIM2_Init+0x104>)
 800138a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 8001390:	4b32      	ldr	r3, [pc, #200]	@ (800145c <MX_TIM2_Init+0x104>)
 8001392:	22c7      	movs	r2, #199	@ 0xc7
 8001394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <MX_TIM2_Init+0x104>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800139c:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <MX_TIM2_Init+0x104>)
 800139e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <MX_TIM2_Init+0x104>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <MX_TIM2_Init+0x104>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b0:	482a      	ldr	r0, [pc, #168]	@ (800145c <MX_TIM2_Init+0x104>)
 80013b2:	f002 fedb 	bl	800416c <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013bc:	f000 faa4 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4823      	ldr	r0, [pc, #140]	@ (800145c <MX_TIM2_Init+0x104>)
 80013ce:	f003 faaf 	bl	8004930 <HAL_TIM_ConfigClockSource>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013d8:	f000 fa96 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013dc:	481f      	ldr	r0, [pc, #124]	@ (800145c <MX_TIM2_Init+0x104>)
 80013de:	f002 ff85 	bl	80042ec <HAL_TIM_PWM_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013e8:	f000 fa8e 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	4619      	mov	r1, r3
 80013fa:	4818      	ldr	r0, [pc, #96]	@ (800145c <MX_TIM2_Init+0x104>)
 80013fc:	f003 fe9a 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001406:	f000 fa7f 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140a:	2360      	movs	r3, #96	@ 0x60
 800140c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8000;
 800140e:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_TIM2_Init+0x104>)
 8001424:	f003 f9c2 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800142e:	f000 fa6b 	bl	8001908 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 8001432:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2204      	movs	r2, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	@ (800145c <MX_TIM2_Init+0x104>)
 8001440:	f003 f9b4 	bl	80047ac <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800144a:	f000 fa5d 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800144e:	4803      	ldr	r0, [pc, #12]	@ (800145c <MX_TIM2_Init+0x104>)
 8001450:	f000 fcf4 	bl	8001e3c <HAL_TIM_MspPostInit>

}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	@ 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000e4 	.word	0x200000e4

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	4b9e      	ldr	r3, [pc, #632]	@ (80016f4 <MX_GPIO_Init+0x294>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a9d      	ldr	r2, [pc, #628]	@ (80016f4 <MX_GPIO_Init+0x294>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b9b      	ldr	r3, [pc, #620]	@ (80016f4 <MX_GPIO_Init+0x294>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	4b97      	ldr	r3, [pc, #604]	@ (80016f4 <MX_GPIO_Init+0x294>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a96      	ldr	r2, [pc, #600]	@ (80016f4 <MX_GPIO_Init+0x294>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b94      	ldr	r3, [pc, #592]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b90      	ldr	r3, [pc, #576]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a8f      	ldr	r2, [pc, #572]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b8d      	ldr	r3, [pc, #564]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b89      	ldr	r3, [pc, #548]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a88      	ldr	r2, [pc, #544]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b86      	ldr	r3, [pc, #536]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b82      	ldr	r3, [pc, #520]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a81      	ldr	r2, [pc, #516]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b7f      	ldr	r3, [pc, #508]	@ (80016f4 <MX_GPIO_Init+0x294>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b7b      	ldr	r3, [pc, #492]	@ (80016f4 <MX_GPIO_Init+0x294>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a7a      	ldr	r2, [pc, #488]	@ (80016f4 <MX_GPIO_Init+0x294>)
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b78      	ldr	r3, [pc, #480]	@ (80016f4 <MX_GPIO_Init+0x294>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2108      	movs	r1, #8
 8001522:	4875      	ldr	r0, [pc, #468]	@ (80016f8 <MX_GPIO_Init+0x298>)
 8001524:	f001 f916 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	2101      	movs	r1, #1
 800152c:	4873      	ldr	r0, [pc, #460]	@ (80016fc <MX_GPIO_Init+0x29c>)
 800152e:	f001 f911 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001532:	2200      	movs	r2, #0
 8001534:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001538:	4871      	ldr	r0, [pc, #452]	@ (8001700 <MX_GPIO_Init+0x2a0>)
 800153a:	f001 f90b 	bl	8002754 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800153e:	2308      	movs	r3, #8
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4868      	ldr	r0, [pc, #416]	@ (80016f8 <MX_GPIO_Init+0x298>)
 8001556:	f000 ff61 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800155a:	2301      	movs	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4862      	ldr	r0, [pc, #392]	@ (80016fc <MX_GPIO_Init+0x29c>)
 8001572:	f000 ff53 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001576:	2308      	movs	r3, #8
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001586:	2305      	movs	r3, #5
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	485a      	ldr	r0, [pc, #360]	@ (80016fc <MX_GPIO_Init+0x29c>)
 8001592:	f000 ff43 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MPU6050_INT_Pin;
 8001596:	f240 1301 	movw	r3, #257	@ 0x101
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4855      	ldr	r0, [pc, #340]	@ (8001704 <MX_GPIO_Init+0x2a4>)
 80015ae:	f000 ff35 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015b2:	2310      	movs	r3, #16
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c2:	2306      	movs	r3, #6
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	484d      	ldr	r0, [pc, #308]	@ (8001704 <MX_GPIO_Init+0x2a4>)
 80015ce:	f000 ff25 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015d2:	23e0      	movs	r3, #224	@ 0xe0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e2:	2305      	movs	r3, #5
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4845      	ldr	r0, [pc, #276]	@ (8001704 <MX_GPIO_Init+0x2a4>)
 80015ee:	f000 ff15 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015f2:	2304      	movs	r3, #4
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4840      	ldr	r0, [pc, #256]	@ (8001708 <MX_GPIO_Init+0x2a8>)
 8001606:	f000 ff09 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800160a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4838      	ldr	r0, [pc, #224]	@ (8001708 <MX_GPIO_Init+0x2a8>)
 8001628:	f000 fef8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800162c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001630:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	482e      	ldr	r0, [pc, #184]	@ (8001700 <MX_GPIO_Init+0x2a0>)
 8001646:	f000 fee9 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800164a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800165c:	2306      	movs	r3, #6
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	4825      	ldr	r0, [pc, #148]	@ (80016fc <MX_GPIO_Init+0x29c>)
 8001668:	f000 fed8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800166c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4820      	ldr	r0, [pc, #128]	@ (8001704 <MX_GPIO_Init+0x2a4>)
 8001682:	f000 fecb 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001686:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001698:	230a      	movs	r3, #10
 800169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4818      	ldr	r0, [pc, #96]	@ (8001704 <MX_GPIO_Init+0x2a4>)
 80016a4:	f000 feba 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016a8:	2320      	movs	r3, #32
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4811      	ldr	r0, [pc, #68]	@ (8001700 <MX_GPIO_Init+0x2a0>)
 80016bc:	f000 feae 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016c4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <MX_GPIO_Init+0x298>)
 80016d6:	f000 fea1 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2017      	movs	r0, #23
 80016e0:	f000 fe72 	bl	80023c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016e4:	2017      	movs	r0, #23
 80016e6:	f000 fe8b 	bl	8002400 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	@ 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400

0800170c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f003 fed2 	bl	80054be <osDelay>
 800171a:	e7fb      	b.n	8001714 <StartDefaultTask+0x8>

0800171c <sensor_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_read_task */
void sensor_read_task(void *argument)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN sensor_read_task */
	mpu6050_accel_data accel_data;

	uint32_t accel_data_y_z = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */

  for(;;)
  {
	  //Sensor Read
	  if(mpu6050_read_accelerometer_data(&hi2c1, MPU6050_I2C_DEV_ADDR, &accel_data)!= MPU6050_OK)
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	461a      	mov	r2, r3
 800172e:	2168      	movs	r1, #104	@ 0x68
 8001730:	4817      	ldr	r0, [pc, #92]	@ (8001790 <sensor_read_task+0x74>)
 8001732:	f000 f9a3 	bl	8001a7c <mpu6050_read_accelerometer_data>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <sensor_read_task+0x24>
	  {
		  Error_Handler();
 800173c:	f000 f8e4 	bl	8001908 <Error_Handler>
	  }

	  accel_data =  mpu6050_accel_calib(&accel_data, &offset);
 8001740:	463b      	mov	r3, r7
 8001742:	f107 0114 	add.w	r1, r7, #20
 8001746:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <sensor_read_task+0x78>)
 8001748:	4618      	mov	r0, r3
 800174a:	f000 f9cc 	bl	8001ae6 <mpu6050_accel_calib>
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	463a      	mov	r2, r7
 8001754:	6810      	ldr	r0, [r2, #0]
 8001756:	6018      	str	r0, [r3, #0]
 8001758:	8892      	ldrh	r2, [r2, #4]
 800175a:	809a      	strh	r2, [r3, #4]

	  accel_data_y_z = accel_data.x;
 800175c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001760:	61fb      	str	r3, [r7, #28]
	  accel_data_y_z = (accel_data_y_z << 16) | accel_data.x;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	61fb      	str	r3, [r7, #28]

	  //Notify the pwm update task
	 xTaskNotify((TaskHandle_t)PWMControlTask_Handle, accel_data_y_z,eSetValueWithOverwrite);
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <sensor_read_task+0x7c>)
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	2203      	movs	r2, #3
 8001776:	69f9      	ldr	r1, [r7, #28]
 8001778:	f005 fbf6 	bl	8006f68 <xTaskGenericNotify>
	  {
		  Error_Handler();
 800177c:	f000 f8c4 	bl	8001908 <Error_Handler>
	  }

	  //Enter blocked state
	  xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	2000      	movs	r0, #0
 800178a:	f005 fb8d 	bl	8006ea8 <xTaskNotifyWait>
	  if(mpu6050_read_accelerometer_data(&hi2c1, MPU6050_I2C_DEV_ADDR, &accel_data)!= MPU6050_OK)
 800178e:	e7cb      	b.n	8001728 <sensor_read_task+0xc>
 8001790:	20000090 	.word	0x20000090
 8001794:	080095c8 	.word	0x080095c8
 8001798:	20000134 	.word	0x20000134
 800179c:	00000000 	.word	0x00000000

080017a0 <pwm_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pwm_control_task */
void pwm_control_task(void *argument)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pwm_control_task */
	 uint32_t previous_tick = osKernelGetTickCount();
 80017a8:	f003 fde2 	bl	8005370 <osKernelGetTickCount>
 80017ac:	6478      	str	r0, [r7, #68]	@ 0x44

	 float dt = 0;
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40

	 mpu6050_accel_data accel_data;
	 uint32_t accel_data_y_z_rcvd;

	 KalmanFilter kf;
	 kalman_filter_init(&kf);
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb63 	bl	8000e84 <kalman_filter_init>
  /* Infinite loop */
  for(;;)
  {

	  //Wakes up on notification
	  xTaskNotifyWait(0, ULONG_MAX, &accel_data_y_z_rcvd, portMAX_DELAY);
 80017be:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ca:	2000      	movs	r0, #0
 80017cc:	f005 fb6c 	bl	8006ea8 <xTaskNotifyWait>
	  accel_data.y = accel_data_y_z_rcvd & 0xFF;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	  accel_data.z = accel_data_y_z_rcvd &(0xFF << 16);
 80017da:	2300      	movs	r3, #0
 80017dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	  uint32_t current_tick = osKernelGetTickCount();
 80017de:	f003 fdc7 	bl	8005370 <osKernelGetTickCount>
 80017e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  dt = (current_tick - previous_tick) / 1000.0f;
 80017e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80018c0 <pwm_control_task+0x120>
 80017f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	  previous_tick = current_tick;
 80017fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44

	  roll_angle = atan2(accel_data.y, accel_data.z) * (180.0/M_PI);
 8001802:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe84 	bl	8000514 <__aeabi_i2d>
 800180c:	4604      	mov	r4, r0
 800180e:	460d      	mov	r5, r1
 8001810:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe7d 	bl	8000514 <__aeabi_i2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b11 	vmov	d1, r2, r3
 8001822:	ec45 4b10 	vmov	d0, r4, r5
 8001826:	f007 fbe3 	bl	8008ff0 <atan2>
 800182a:	ec51 0b10 	vmov	r0, r1, d0
 800182e:	a322      	add	r3, pc, #136	@ (adr r3, 80018b8 <pwm_control_task+0x118>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fed8 	bl	80005e8 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f96c 	bl	8000b1c <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	877b      	strh	r3, [r7, #58]	@ 0x3a

	  kalman_roll_angle = (int16_t) kalman_filter_get_angle(&kf, roll_angle, dt);
 8001848:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb38 	bl	8000ed4 <kalman_filter_get_angle>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186c:	ee17 3a90 	vmov	r3, s15
 8001870:	873b      	strh	r3, [r7, #56]	@ 0x38

	  uint8_t channel = (kalman_roll_angle < 0) ? TIM_CHANNEL_1 : TIM_CHANNEL_2;
 8001872:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001876:	2b00      	cmp	r3, #0
 8001878:	da01      	bge.n	800187e <pwm_control_task+0xde>
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <pwm_control_task+0xe0>
 800187e:	2304      	movs	r3, #4
 8001880:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  kalman_roll_angle = (kalman_roll_angle < 0) ? -kalman_roll_angle : kalman_roll_angle;
 8001884:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfb8      	it	lt
 800188c:	425b      	neglt	r3, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	873b      	strh	r3, [r7, #56]	@ 0x38

	  uint32_t pwm_pulse = map(kalman_roll_angle, ANGLE_POS_MIN, ANGLE_POS_MAX,PWM_PULSE_MIN, PWM_PULSE_MAX);
 8001892:	f9b7 0038 	ldrsh.w	r0, [r7, #56]	@ 0x38
 8001896:	2328      	movs	r3, #40	@ 0x28
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	225a      	movs	r2, #90	@ 0x5a
 800189e:	2100      	movs	r1, #0
 80018a0:	f7ff fbf2 	bl	8001088 <map>
 80018a4:	4603      	mov	r3, r0
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30

	  change_pwm_duty_cycle(pwm_pulse, channel);
 80018a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018ac:	4619      	mov	r1, r3
 80018ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018b0:	f7ff fc16 	bl	80010e0 <change_pwm_duty_cycle>
  {
 80018b4:	e783      	b.n	80017be <pwm_control_task+0x1e>
 80018b6:	bf00      	nop
 80018b8:	1a63c1f8 	.word	0x1a63c1f8
 80018bc:	404ca5dc 	.word	0x404ca5dc
 80018c0:	447a0000 	.word	0x447a0000

080018c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	g_counter = 0;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	g_ch1_state = 8000;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018d4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80018d8:	601a      	str	r2, [r3, #0]
	g_ch2_state = 4000;
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80018dc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80018e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d101      	bne.n	80018f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
    HAL_IncTick();
 80018ec:	f000 fc94 	bl	8002218 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000138 	.word	0x20000138
 80018fc:	20000004 	.word	0x20000004
 8001900:	20000000 	.word	0x20000000
 8001904:	40001000 	.word	0x40001000

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <mpu6050_read_byte>:
#define TIMEOUT		500

static uint8_t mpu6050_dev_addr;

mpu6050status_t mpu6050_read_byte(I2C_HandleTypeDef* hi2c1,uint16_t dev_addr,uint8_t reg_addr,uint8_t* pdata)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af04      	add	r7, sp, #16
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	4613      	mov	r3, r2
 8001924:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Mem_Read(hi2c1, mpu6050_dev_addr<<1, reg_addr, 1, pdata, 1, TIMEOUT) == HAL_OK)
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <mpu6050_read_byte+0x48>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b299      	uxth	r1, r3
 800192e:	7a7b      	ldrb	r3, [r7, #9]
 8001930:	b29a      	uxth	r2, r3
 8001932:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	2301      	movs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f001 f976 	bl	8002c34 <HAL_I2C_Mem_Read>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <mpu6050_read_byte+0x3e>
	{
		return MPU6050_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <mpu6050_read_byte+0x40>
	}
	else
		return MPU6050_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000013c 	.word	0x2000013c

08001960 <mpu6050_read>:

mpu6050status_t mpu6050_read(I2C_HandleTypeDef* hi2c1,uint16_t dev_addr,uint8_t reg_base_addr,uint8_t* buffer, uint16_t nbytes)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af04      	add	r7, sp, #16
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	817b      	strh	r3, [r7, #10]
 800196e:	4613      	mov	r3, r2
 8001970:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Mem_Read(hi2c1, mpu6050_dev_addr<<1, reg_base_addr, 1, buffer, nbytes, TIMEOUT) == HAL_OK)
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <mpu6050_read+0x48>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	b299      	uxth	r1, r3
 800197a:	7a7b      	ldrb	r3, [r7, #9]
 800197c:	b29a      	uxth	r2, r3
 800197e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	8b3b      	ldrh	r3, [r7, #24]
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f001 f950 	bl	8002c34 <HAL_I2C_Mem_Read>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <mpu6050_read+0x3e>
	{
		return MPU6050_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <mpu6050_read+0x40>
	}
	else
		return MPU6050_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000013c 	.word	0x2000013c

080019ac <mpu6050_write_byte>:

mpu6050status_t mpu6050_write_byte(I2C_HandleTypeDef* hi2c1,uint16_t dev_addr,uint8_t reg_addr,uint8_t* pdata)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	817b      	strh	r3, [r7, #10]
 80019ba:	4613      	mov	r3, r2
 80019bc:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Mem_Write(hi2c1, dev_addr, reg_addr, 1, pdata, 1, TIMEOUT) == HAL_OK)
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	8979      	ldrh	r1, [r7, #10]
 80019c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2301      	movs	r3, #1
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f001 f833 	bl	8002a40 <HAL_I2C_Mem_Write>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <mpu6050_write_byte+0x38>
	{
		return MPU6050_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <mpu6050_write_byte+0x3a>
	}
	else
		return MPU6050_ERROR;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <mpu6050_init>:

mpu6050status_t mpu6050_init(I2C_HandleTypeDef* hi2c1,uint16_t dev_addr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]


	uint8_t data = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
	mpu6050_dev_addr = dev_addr;
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <mpu6050_init+0x80>)
 8001a06:	701a      	strb	r2, [r3, #0]

	if(mpu6050_read_byte(hi2c1, dev_addr, MPU6050_REG_WHOAMI, &data) != MPU6050_OK)
 8001a08:	f107 030f 	add.w	r3, r7, #15
 8001a0c:	8879      	ldrh	r1, [r7, #2]
 8001a0e:	2275      	movs	r2, #117	@ 0x75
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff7f 	bl	8001914 <mpu6050_read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <mpu6050_init+0x30>
	{
		return MPU6050_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e023      	b.n	8001a68 <mpu6050_init+0x78>
	}

	if (data == 0x68 || data == 0x98)
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	2b68      	cmp	r3, #104	@ 0x68
 8001a24:	d002      	beq.n	8001a2c <mpu6050_init+0x3c>
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b98      	cmp	r3, #152	@ 0x98
 8001a2a:	d112      	bne.n	8001a52 <mpu6050_init+0x62>
	{
		printf("Valid mpu6050 found at %X", mpu6050_dev_addr);
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <mpu6050_init+0x80>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4810      	ldr	r0, [pc, #64]	@ (8001a74 <mpu6050_init+0x84>)
 8001a34:	f006 fc0a 	bl	800824c <iprintf>
	{
		printf("Invalid device found at %X", mpu6050_dev_addr);
		return MPU6050_ERROR;
	}

	data = 0x00;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_write_byte(hi2c1,dev_addr,MPU6050_REG_PWR_MGMT_1,&data)!= MPU6050_OK)
 8001a3c:	f107 030f 	add.w	r3, r7, #15
 8001a40:	8879      	ldrh	r1, [r7, #2]
 8001a42:	226b      	movs	r2, #107	@ 0x6b
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffb1 	bl	80019ac <mpu6050_write_byte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d108      	bne.n	8001a62 <mpu6050_init+0x72>
 8001a50:	e009      	b.n	8001a66 <mpu6050_init+0x76>
		printf("Invalid device found at %X", mpu6050_dev_addr);
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <mpu6050_init+0x80>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <mpu6050_init+0x88>)
 8001a5a:	f006 fbf7 	bl	800824c <iprintf>
		return MPU6050_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e002      	b.n	8001a68 <mpu6050_init+0x78>
	{
		return MPU6050_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <mpu6050_init+0x78>
	}

	return MPU6050_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000013c 	.word	0x2000013c
 8001a74:	0800950c 	.word	0x0800950c
 8001a78:	08009528 	.word	0x08009528

08001a7c <mpu6050_read_accelerometer_data>:



mpu6050status_t mpu6050_read_accelerometer_data(I2C_HandleTypeDef* hi2c1,uint16_t dev_addr, mpu6050_accel_data* data_buffer )
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	460b      	mov	r3, r1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	817b      	strh	r3, [r7, #10]
	uint8_t raw_buffer[6];

	if(mpu6050_read(hi2c1, dev_addr, MPU6050_REG_ACCEL_BASE, raw_buffer, sizeof(raw_buffer)) != MPU6050_OK)
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	8979      	ldrh	r1, [r7, #10]
 8001a90:	2206      	movs	r2, #6
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	223b      	movs	r2, #59	@ 0x3b
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff ff62 	bl	8001960 <mpu6050_read>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <mpu6050_read_accelerometer_data+0x2a>
		return MPU6050_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01b      	b.n	8001ade <mpu6050_read_accelerometer_data+0x62>

	else
	{
		data_buffer->x = (uint16_t)raw_buffer[0]<<8 | raw_buffer[1];
 8001aa6:	7c3b      	ldrb	r3, [r7, #16]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	7c7b      	ldrb	r3, [r7, #17]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	801a      	strh	r2, [r3, #0]
		data_buffer->y = (uint16_t)raw_buffer[2]<<8 | raw_buffer[3];
 8001ab8:	7cbb      	ldrb	r3, [r7, #18]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	805a      	strh	r2, [r3, #2]
		data_buffer->z = (uint16_t)raw_buffer[4]<<8 | raw_buffer[5];
 8001aca:	7d3b      	ldrb	r3, [r7, #20]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b21a      	sxth	r2, r3
 8001ad0:	7d7b      	ldrb	r3, [r7, #21]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	809a      	strh	r2, [r3, #4]
	}

	return MPU6050_OK;
 8001adc:	2300      	movs	r3, #0

}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <mpu6050_accel_calib>:

mpu6050_accel_data mpu6050_accel_calib(mpu6050_accel_data* raw_data, const mpu6050_accel_data* offset)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	mpu6050_accel_data calibrated_data;

	calibrated_data.x = raw_data->x - offset->x;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	823b      	strh	r3, [r7, #16]
	calibrated_data.y = raw_data->y - offset->y;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	827b      	strh	r3, [r7, #18]
	calibrated_data.z = raw_data->x - offset->z;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	82bb      	strh	r3, [r7, #20]

	return calibrated_data;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	6010      	str	r0, [r2, #0]
 8001b46:	889b      	ldrh	r3, [r3, #4]
 8001b48:	8093      	strh	r3, [r2, #4]

}
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <mpu6050_interrupt_config>:



mpu6050status_t mpu6050_interrupt_config(I2C_HandleTypeDef* hi2c1,mpu6050_interrupt_config_t value)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
	uint8_t read_value = 0x00;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_read_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_PIN_CONFIG, &read_value) != MPU6050_OK)
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <mpu6050_interrupt_config+0x70>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f107 030f 	add.w	r3, r7, #15
 8001b72:	2237      	movs	r2, #55	@ 0x37
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fecd 	bl	8001914 <mpu6050_read_byte>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <mpu6050_interrupt_config+0x2c>
	{
		return MPU6050_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e01c      	b.n	8001bbe <mpu6050_interrupt_config+0x66>
	}

	if(value == INT_LEVEL_ACTIVE_HIGH)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <mpu6050_interrupt_config+0x3e>
	{
		read_value &= ~(1 << 3);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	f023 0308 	bic.w	r3, r3, #8
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e004      	b.n	8001ba0 <mpu6050_interrupt_config+0x48>
	}

	else
	{
		read_value |= (1<<3);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	73fb      	strb	r3, [r7, #15]
	}

	if(mpu6050_write_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_PIN_CONFIG, (uint8_t*)&read_value)!= MPU6050_OK)
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <mpu6050_interrupt_config+0x70>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f107 030f 	add.w	r3, r7, #15
 8001baa:	2237      	movs	r2, #55	@ 0x37
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fefd 	bl	80019ac <mpu6050_write_byte>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <mpu6050_interrupt_config+0x64>
	{
		return MPU6050_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <mpu6050_interrupt_config+0x66>
	}

	return MPU6050_OK;
 8001bbc:	2300      	movs	r3, #0


}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000013c 	.word	0x2000013c

08001bcc <mpu6050_enable_interrupt>:

mpu6050status_t mpu6050_enable_interrupt(I2C_HandleTypeDef* hi2c1, mpu6050_interrupt interrupt)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
	uint8_t read_value = 0x00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_read_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_ENABLE, &read_value) != MPU6050_OK)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <mpu6050_enable_interrupt+0x5c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f107 030f 	add.w	r3, r7, #15
 8001be6:	2238      	movs	r2, #56	@ 0x38
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fe93 	bl	8001914 <mpu6050_read_byte>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <mpu6050_enable_interrupt+0x2c>
	{
		return MPU6050_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e013      	b.n	8001c20 <mpu6050_enable_interrupt+0x54>
	}

	read_value |= (uint8_t)interrupt;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_write_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_ENABLE, (uint8_t*)&read_value)!= MPU6050_OK)
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <mpu6050_enable_interrupt+0x5c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	f107 030f 	add.w	r3, r7, #15
 8001c0c:	2238      	movs	r2, #56	@ 0x38
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fecc 	bl	80019ac <mpu6050_write_byte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <mpu6050_enable_interrupt+0x52>
	{
		return MPU6050_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <mpu6050_enable_interrupt+0x54>
	}

	return MPU6050_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000013c 	.word	0x2000013c

08001c2c <mpu6050_disable_interrupt>:

mpu6050status_t mpu6050_disable_interrupt(I2C_HandleTypeDef* hi2c1, mpu6050_interrupt interrupt)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
	uint8_t read_value = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_read_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_ENABLE, &read_value) != MPU6050_OK)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <mpu6050_disable_interrupt+0x68>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f107 030f 	add.w	r3, r7, #15
 8001c46:	2238      	movs	r2, #56	@ 0x38
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fe63 	bl	8001914 <mpu6050_read_byte>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <mpu6050_disable_interrupt+0x2c>
	{
		return MPU6050_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e018      	b.n	8001c8a <mpu6050_disable_interrupt+0x5e>
	}

	read_value &= ~(interrupt);
 8001c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	b25a      	sxtb	r2, r3
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73fb      	strb	r3, [r7, #15]

	if(mpu6050_write_byte(hi2c1, mpu6050_dev_addr, MPU6050_REG_INT_ENABLE, (uint8_t*)&read_value)!= MPU6050_OK)
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <mpu6050_disable_interrupt+0x68>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f107 030f 	add.w	r3, r7, #15
 8001c76:	2238      	movs	r2, #56	@ 0x38
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fe97 	bl	80019ac <mpu6050_write_byte>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <mpu6050_disable_interrupt+0x5c>
	{
		return MPU6050_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <mpu6050_disable_interrupt+0x5e>
	}

	return MPU6050_OK;
 8001c88:	2300      	movs	r3, #0

}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000013c 	.word	0x2000013c

08001c98 <mpu6050_configure_low_pass_filter>:
mpu6050status_t mpu6050_configure_low_pass_filter(I2C_HandleTypeDef *hi2c1, mpu6050_dlpf_config_t dlpf)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]

	uint8_t value = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

	if (mpu6050_read_byte(hi2c1,mpu6050_dev_addr<<1, MPU6050_REG_CONFIG, &value) != MPU6050_OK)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <mpu6050_configure_low_pass_filter+0x6c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	f107 030f 	add.w	r3, r7, #15
 8001cb4:	221a      	movs	r2, #26
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe2c 	bl	8001914 <mpu6050_read_byte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <mpu6050_configure_low_pass_filter+0x2e>
	{
		return MPU6050_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e019      	b.n	8001cfa <mpu6050_configure_low_pass_filter+0x62>
	}

	value &= ~(0x7);
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	f023 0307 	bic.w	r3, r3, #7
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	73fb      	strb	r3, [r7, #15]
	value |= (uint8_t)dlpf;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	73fb      	strb	r3, [r7, #15]
	if (mpu6050_write_byte(hi2c1,mpu6050_dev_addr<<1, MPU6050_REG_CONFIG, &value) != MPU6050_OK)
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <mpu6050_configure_low_pass_filter+0x6c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	221a      	movs	r2, #26
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe5f 	bl	80019ac <mpu6050_write_byte>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <mpu6050_configure_low_pass_filter+0x60>
	{
		return MPU6050_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <mpu6050_configure_low_pass_filter+0x62>
	}

	return MPU6050_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000013c 	.word	0x2000013c

08001d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f000 fb3b 	bl	80023c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_I2C_MspInit+0x84>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12c      	bne.n	8001ddc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d9e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480c      	ldr	r0, [pc, #48]	@ (8001dec <HAL_I2C_MspInit+0x8c>)
 8001dbc:	f000 fb2e 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40005400 	.word	0x40005400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e00:	d115      	bne.n	8001e2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_TIM_Base_MspInit+0x48>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e38 <HAL_TIM_Base_MspInit+0x48>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_TIM_Base_MspInit+0x48>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	201c      	movs	r0, #28
 8001e24:	f000 fad0 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f000 fae9 	bl	8002400 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5c:	d11e      	bne.n	8001e9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_TIM_MspPostInit+0x68>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_TIM_MspPostInit+0x68>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_TIM_MspPostInit+0x68>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001e7a:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <HAL_TIM_MspPostInit+0x6c>)
 8001e98:	f000 fac0 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	@ 0x38
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <HAL_InitTick+0xe4>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	4a32      	ldr	r2, [pc, #200]	@ (8001f90 <HAL_InitTick+0xe4>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_InitTick+0xe4>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed8:	f107 0210 	add.w	r2, r7, #16
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 f910 	bl	8004108 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ef2:	f002 f8f5 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8001ef6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ef8:	e004      	b.n	8001f04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001efa:	f002 f8f1 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8001efe:	4603      	mov	r3, r0
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f06:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <HAL_InitTick+0xe8>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_InitTick+0xf0>)
 8001f16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f20:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f38:	4817      	ldr	r0, [pc, #92]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f3a:	f002 f917 	bl	800416c <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11b      	bne.n	8001f84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f4c:	4812      	ldr	r0, [pc, #72]	@ (8001f98 <HAL_InitTick+0xec>)
 8001f4e:	f002 f95d 	bl	800420c <HAL_TIM_Base_Start_IT>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d111      	bne.n	8001f84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f60:	2036      	movs	r0, #54	@ 0x36
 8001f62:	f000 fa4d 	bl	8002400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d808      	bhi.n	8001f7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	2036      	movs	r0, #54	@ 0x36
 8001f72:	f000 fa29 	bl	80023c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_InitTick+0xf4>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e002      	b.n	8001f84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3738      	adds	r7, #56	@ 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	20000140 	.word	0x20000140
 8001f9c:	40001000 	.word	0x40001000
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 8001fde:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fe2:	f000 fbd1 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <TIM2_IRQHandler+0x10>)
 8001ff2:	f002 faeb 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200000e4 	.word	0x200000e4

08002000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM6_DAC_IRQHandler+0x10>)
 8002006:	f002 fae1 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000140 	.word	0x20000140

08002014 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e00a      	b.n	800203c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002026:	f3af 8000 	nop.w
 800202a:	4601      	mov	r1, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf0      	blt.n	8002026 <_read+0x12>
  }

  return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e009      	b.n	8002074 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbf1      	blt.n	8002060 <_write+0x12>
  }
  return len;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_close>:

int _close(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ae:	605a      	str	r2, [r3, #4]
  return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_isatty>:

int _isatty(int file)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f006 f98e 	bl	8008440 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20020000 	.word	0x20020000
 8002150:	00000400 	.word	0x00000400
 8002154:	20000188 	.word	0x20000188
 8002158:	20004cc8 	.word	0x20004cc8

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	@ (80021cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f006 f94d 	bl	800844c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7fe ffcb 	bl	800114c <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021c4:	080096a0 	.word	0x080096a0
  ldr r2, =_sbss
 80021c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021cc:	20004cc4 	.word	0x20004cc4

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	@ (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f8d8 	bl	80023b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	200f      	movs	r0, #15
 8002204:	f7ff fe52 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fd7e 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000010 	.word	0x20000010
 800223c:	2000018c 	.word	0x2000018c

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000018c 	.word	0x2000018c

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	@ (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4c 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023da:	f7ff ff61 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f7ff ffb1 	bl	800234c <NVIC_EncodePriority>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff80 	bl	80022f8 <__NVIC_SetPriority>
}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff54 	bl	80022bc <__NVIC_EnableIRQ>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e16b      	b.n	8002710 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 815a 	bne.w	800270a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80b4 	beq.w	800270a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a5b      	ldr	r2, [pc, #364]	@ (800272c <HAL_GPIO_Init+0x310>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_GPIO_Init+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	@ (8002734 <HAL_GPIO_Init+0x318>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	@ (8002738 <HAL_GPIO_Init+0x31c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	@ (800273c <HAL_GPIO_Init+0x320>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x21a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4e      	ldr	r2, [pc, #312]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x216>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4d      	ldr	r2, [pc, #308]	@ (8002744 <HAL_GPIO_Init+0x328>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x212>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4c      	ldr	r2, [pc, #304]	@ (8002748 <HAL_GPIO_Init+0x32c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4b      	ldr	r2, [pc, #300]	@ (800274c <HAL_GPIO_Init+0x330>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x20a>
 8002622:	2307      	movs	r3, #7
 8002624:	e00e      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002626:	2308      	movs	r3, #8
 8002628:	e00c      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800262a:	2306      	movs	r3, #6
 800262c:	e00a      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800262e:	2305      	movs	r3, #5
 8002630:	e008      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002632:	2304      	movs	r3, #4
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002642:	2300      	movs	r3, #0
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002654:	4935      	ldr	r1, [pc, #212]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a32      	ldr	r2, [pc, #200]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b30      	ldr	r3, [pc, #192]	@ (8002750 <HAL_GPIO_Init+0x334>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a27      	ldr	r2, [pc, #156]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026da:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f67f ae90 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40021400 	.word	0x40021400
 8002748:	40021800 	.word	0x40021800
 800274c:	40021c00 	.word	0x40021c00
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fcc4 	bl	8001134 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e12b      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fabe 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	@ 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f001 fc60 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a81      	ldr	r2, [pc, #516]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a80      	ldr	r2, [pc, #512]	@ (8002a30 <HAL_I2C_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a34 <HAL_I2C_Init+0x27c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0e7      	b.n	8002a22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <HAL_I2C_Init+0x280>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a6a      	ldr	r2, [pc, #424]	@ (8002a2c <HAL_I2C_Init+0x274>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a69      	ldr	r2, [pc, #420]	@ (8002a3c <HAL_I2C_Init+0x284>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	495c      	ldr	r1, [pc, #368]	@ (8002a2c <HAL_I2C_Init+0x274>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d819      	bhi.n	80028f4 <HAL_I2C_Init+0x13c>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_I2C_Init+0x138>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e59      	subs	r1, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	e051      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e04f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <HAL_I2C_Init+0x168>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_I2C_Init+0x18e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Init+0x196>
 800294a:	2301      	movs	r3, #1
 800294c:	e022      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10e      	bne.n	8002974 <HAL_I2C_Init+0x1bc>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e58      	subs	r0, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	fbb0 f3f3 	udiv	r3, r0, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Init+0x1dc>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6911      	ldr	r1, [r2, #16]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	000186a0 	.word	0x000186a0
 8002a30:	001e847f 	.word	0x001e847f
 8002a34:	003d08ff 	.word	0x003d08ff
 8002a38:	431bde83 	.word	0x431bde83
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a5a:	f7ff fbf1 	bl	8002240 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 80d9 	bne.w	8002c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	496d      	ldr	r1, [pc, #436]	@ (8002c2c <HAL_I2C_Mem_Write+0x1ec>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fc8b 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0cc      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Mem_Write+0x56>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0c5      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d007      	beq.n	8002abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2221      	movs	r2, #33	@ 0x21
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	@ 0x40
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a4d      	ldr	r2, [pc, #308]	@ (8002c30 <HAL_I2C_Mem_Write+0x1f0>)
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002afe:	88f8      	ldrh	r0, [r7, #6]
 8002b00:	893a      	ldrh	r2, [r7, #8]
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fac2 	bl	8003098 <I2C_RequestMemoryWrite>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d052      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e081      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fd50 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06b      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1aa      	bne.n	8002b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fd43 	bl	8003658 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e016      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	00100002 	.word	0x00100002
 8002c30:	ffff0000 	.word	0xffff0000

08002c34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	@ 0x30
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	f7ff faf7 	bl	8002240 <HAL_GetTick>
 8002c52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	f040 8214 	bne.w	800308a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2319      	movs	r3, #25
 8002c68:	2201      	movs	r2, #1
 8002c6a:	497b      	ldr	r1, [pc, #492]	@ (8002e58 <HAL_I2C_Mem_Read+0x224>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb91 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e207      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x56>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e200      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d007      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2222      	movs	r2, #34	@ 0x22
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2240      	movs	r2, #64	@ 0x40
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a5b      	ldr	r2, [pc, #364]	@ (8002e5c <HAL_I2C_Mem_Read+0x228>)
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf2:	88f8      	ldrh	r0, [r7, #6]
 8002cf4:	893a      	ldrh	r2, [r7, #8]
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4603      	mov	r3, r0
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa5e 	bl	80031c4 <I2C_RequestMemoryRead>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1bc      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d113      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e190      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d11b      	bne.n	8002d82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e170      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d11b      	bne.n	8002dc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	e150      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dd8:	e144      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	f200 80f1 	bhi.w	8002fc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d123      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fc79 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e145      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e32:	e117      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d14e      	bne.n	8002eda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	2200      	movs	r2, #0
 8002e44:	4906      	ldr	r1, [pc, #24]	@ (8002e60 <HAL_I2C_Mem_Read+0x22c>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 faa4 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e11a      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
 8002e56:	bf00      	nop
 8002e58:	00100002 	.word	0x00100002
 8002e5c:	ffff0000 	.word	0xffff0000
 8002e60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ed8:	e0c4      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	496c      	ldr	r1, [pc, #432]	@ (8003094 <HAL_I2C_Mem_Read+0x460>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fa55 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cb      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4955      	ldr	r1, [pc, #340]	@ (8003094 <HAL_I2C_Mem_Read+0x460>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa27 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e09d      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc4:	e04e      	b.n	8003064 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fb8c 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e058      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d124      	bne.n	8003064 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b03      	cmp	r3, #3
 8003020:	d107      	bne.n	8003032 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003030:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	f47f aeb6 	bne.w	8002dda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3728      	adds	r7, #40	@ 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	00010004 	.word	0x00010004

08003098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	817b      	strh	r3, [r7, #10]
 80030aa:	460b      	mov	r3, r1
 80030ac:	813b      	strh	r3, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f960 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e8:	d103      	bne.n	80030f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e05f      	b.n	80031b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	492d      	ldr	r1, [pc, #180]	@ (80031c0 <I2C_RequestMemoryWrite+0x128>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f9bb 	bl	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e04c      	b.n	80031b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	6a39      	ldr	r1, [r7, #32]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa46 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	2b04      	cmp	r3, #4
 8003148:	d107      	bne.n	800315a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02b      	b.n	80031b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003164:	893b      	ldrh	r3, [r7, #8]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	e021      	b.n	80031b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	b29b      	uxth	r3, r3
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa20 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e005      	b.n	80031b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031aa:	893b      	ldrh	r3, [r7, #8]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	00010002 	.word	0x00010002

080031c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2200      	movs	r2, #0
 8003206:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8c2 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003224:	d103      	bne.n	800322e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0aa      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	4952      	ldr	r1, [pc, #328]	@ (8003390 <I2C_RequestMemoryRead+0x1cc>)
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f91d 	bl	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e097      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f9a8 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e076      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]
 80032aa:	e021      	b.n	80032f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	6a39      	ldr	r1, [r7, #32]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f982 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d107      	bne.n	80032e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e050      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e6:	893b      	ldrh	r3, [r7, #8]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f2:	6a39      	ldr	r1, [r7, #32]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f967 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	2b04      	cmp	r3, #4
 8003306:	d107      	bne.n	8003318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e035      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800332a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2200      	movs	r2, #0
 8003334:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f82b 	bl	8003394 <I2C_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003352:	d103      	bne.n	800335c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e013      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003360:	897b      	ldrh	r3, [r7, #10]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	4906      	ldr	r1, [pc, #24]	@ (8003390 <I2C_RequestMemoryRead+0x1cc>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f886 	bl	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	00010002 	.word	0x00010002

08003394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a4:	e048      	b.n	8003438 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d044      	beq.n	8003438 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe ff47 	bl	8002240 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d139      	bne.n	8003438 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10d      	bne.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	e00c      	b.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	429a      	cmp	r2, r3
 8003408:	d116      	bne.n	8003438 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e023      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d10d      	bne.n	800345e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	43da      	mvns	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	e00c      	b.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	43da      	mvns	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	429a      	cmp	r2, r3
 800347c:	d093      	beq.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003496:	e071      	b.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a6:	d123      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	f043 0204 	orr.w	r2, r3, #4
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e067      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d041      	beq.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fea2 	bl	8002240 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d136      	bne.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10c      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e00b      	b.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d016      	beq.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e021      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10c      	bne.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	43da      	mvns	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e00b      	b.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f af6d 	bne.w	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d4:	e034      	b.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8e3 	bl	80037a2 <I2C_IsAcknowledgeFailed>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d028      	beq.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fe fe27 	bl	8002240 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11d      	bne.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d016      	beq.n	8003640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e007      	b.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364a:	2b80      	cmp	r3, #128	@ 0x80
 800364c:	d1c3      	bne.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f89b 	bl	80037a2 <I2C_IsAcknowledgeFailed>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d028      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe fddf 	bl	8002240 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11d      	bne.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d016      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e007      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d1c3      	bne.n	8003666 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f4:	e049      	b.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d119      	bne.n	8003738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e030      	b.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fe fd82 	bl	8002240 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11d      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d016      	beq.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e007      	b.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d1ae      	bne.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b8:	d11b      	bne.n	80037f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e267      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800381e:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00c      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003832:	2b08      	cmp	r3, #8
 8003834:	d112      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b82      	ldr	r3, [pc, #520]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b7e      	ldr	r3, [pc, #504]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e242      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b76      	ldr	r3, [pc, #472]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a75      	ldr	r2, [pc, #468]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b70      	ldr	r3, [pc, #448]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6f      	ldr	r2, [pc, #444]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b69      	ldr	r3, [pc, #420]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a68      	ldr	r2, [pc, #416]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b66      	ldr	r3, [pc, #408]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fcc2 	bl	8002240 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fcbe 	bl	8002240 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	@ 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e207      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fcae 	bl	8002240 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fe fcaa 	bl	8002240 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e1f3      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	4b51      	ldr	r3, [pc, #324]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003916:	4b4a      	ldr	r3, [pc, #296]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b44      	ldr	r3, [pc, #272]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d116      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e1c7      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4937      	ldr	r1, [pc, #220]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	e03a      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_OscConfig+0x244>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe fc63 	bl	8002240 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe fc5f 	bl	8002240 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1a8      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4925      	ldr	r1, [pc, #148]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCC_OscConfig+0x244>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fc42 	bl	8002240 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fe fc3e 	bl	8002240 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e187      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d036      	beq.n	8003a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_RCC_OscConfig+0x248>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fc22 	bl	8002240 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fc1e 	bl	8002240 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e167      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_OscConfig+0x240>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
 8003a1e:	e01b      	b.n	8003a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x248>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fc0b 	bl	8002240 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	e00e      	b.n	8003a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fc07 	bl	8002240 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d907      	bls.n	8003a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e150      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	42470000 	.word	0x42470000
 8003a48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	4b88      	ldr	r3, [pc, #544]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ea      	bne.n	8003a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8097 	beq.w	8003b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b81      	ldr	r3, [pc, #516]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a86:	4b7a      	ldr	r3, [pc, #488]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4b77      	ldr	r3, [pc, #476]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d118      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa2:	4b74      	ldr	r3, [pc, #464]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a73      	ldr	r2, [pc, #460]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fe fbc7 	bl	8002240 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fe fbc3 	bl	8002240 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e10c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c74 <HAL_RCC_OscConfig+0x474>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x2ea>
 8003adc:	4b64      	ldr	r3, [pc, #400]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	4a63      	ldr	r2, [pc, #396]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCC_OscConfig+0x324>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x30c>
 8003af2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afe:	4b5c      	ldr	r3, [pc, #368]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a5b      	ldr	r2, [pc, #364]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0x324>
 8003b0c:	4b58      	ldr	r3, [pc, #352]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a57      	ldr	r2, [pc, #348]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a54      	ldr	r2, [pc, #336]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0304 	bic.w	r3, r3, #4
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fb88 	bl	8002240 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe fb84 	bl	8002240 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0cb      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	4b49      	ldr	r3, [pc, #292]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0ee      	beq.n	8003b34 <HAL_RCC_OscConfig+0x334>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fb72 	bl	8002240 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b60:	f7fe fb6e 	bl	8002240 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0b5      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b76:	4b3e      	ldr	r3, [pc, #248]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ee      	bne.n	8003b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b88:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	4a38      	ldr	r2, [pc, #224]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a1 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d05c      	beq.n	8003c64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d141      	bne.n	8003c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fb42 	bl	8002240 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fe fb3e 	bl	8002240 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e087      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	019b      	lsls	r3, r3, #6
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	491b      	ldr	r1, [pc, #108]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c08:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fb17 	bl	8002240 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fe fb13 	bl	8002240 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e05c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x416>
 8003c34:	e054      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <HAL_RCC_OscConfig+0x478>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fb00 	bl	8002240 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fe fafc 	bl	8002240 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e045      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_RCC_OscConfig+0x470>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x444>
 8003c62:	e03d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e038      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x4ec>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d028      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d121      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d11a      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d111      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fe fa2e 	bl	8002240 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fe fa2a 	bl	8002240 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe f808 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	080095d0 	.word	0x080095d0
 8003eb4:	20000008 	.word	0x20000008
 8003eb8:	2000000c 	.word	0x2000000c

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec0:	b094      	sub	sp, #80	@ 0x50
 8003ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed4:	4b79      	ldr	r3, [pc, #484]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d00d      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x40>
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	f200 80e1 	bhi.w	80040a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eee:	e0db      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b73      	ldr	r3, [pc, #460]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef4:	e0db      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef6:	4b73      	ldr	r3, [pc, #460]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efa:	e0d8      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efc:	4b6f      	ldr	r3, [pc, #444]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f06:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d063      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f26:	2300      	movs	r3, #0
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f04f 0000 	mov.w	r0, #0
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	0159      	lsls	r1, r3, #5
 8003f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f40:	0150      	lsls	r0, r2, #5
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4621      	mov	r1, r4
 8003f48:	1a51      	subs	r1, r2, r1
 8003f4a:	6139      	str	r1, [r7, #16]
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f60:	4659      	mov	r1, fp
 8003f62:	018b      	lsls	r3, r1, #6
 8003f64:	4651      	mov	r1, sl
 8003f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	018a      	lsls	r2, r1, #6
 8003f6e:	4651      	mov	r1, sl
 8003f70:	ebb2 0801 	subs.w	r8, r2, r1
 8003f74:	4659      	mov	r1, fp
 8003f76:	eb63 0901 	sbc.w	r9, r3, r1
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8e:	4690      	mov	r8, r2
 8003f90:	4699      	mov	r9, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	eb18 0303 	adds.w	r3, r8, r3
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	eb49 0303 	adc.w	r3, r9, r3
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	024b      	lsls	r3, r1, #9
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb8:	4621      	mov	r1, r4
 8003fba:	024a      	lsls	r2, r1, #9
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fcc:	f7fc fdc6 	bl	8000b5c <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd8:	e058      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fea:	623b      	str	r3, [r7, #32]
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	0159      	lsls	r1, r3, #5
 8004002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004006:	0150      	lsls	r0, r2, #5
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4641      	mov	r1, r8
 800400e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004012:	4649      	mov	r1, r9
 8004014:	eb63 0b01 	sbc.w	fp, r3, r1
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800402c:	ebb2 040a 	subs.w	r4, r2, sl
 8004030:	eb63 050b 	sbc.w	r5, r3, fp
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	00eb      	lsls	r3, r5, #3
 800403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004042:	00e2      	lsls	r2, r4, #3
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4643      	mov	r3, r8
 800404a:	18e3      	adds	r3, r4, r3
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	464b      	mov	r3, r9
 8004050:	eb45 0303 	adc.w	r3, r5, r3
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004062:	4629      	mov	r1, r5
 8004064:	028b      	lsls	r3, r1, #10
 8004066:	4621      	mov	r1, r4
 8004068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800406c:	4621      	mov	r1, r4
 800406e:	028a      	lsls	r2, r1, #10
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	61fa      	str	r2, [r7, #28]
 800407c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004080:	f7fc fd6c 	bl	8000b5c <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800409c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800409e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3750      	adds	r7, #80	@ 0x50
 80040b4:	46bd      	mov	sp, r7
 80040b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200

080040c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	@ (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000008 	.word	0x20000008

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a9b      	lsrs	r3, r3, #10
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	@ (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	080095e0 	.word	0x080095e0

08004108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	220f      	movs	r2, #15
 8004116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004118:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004124:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	08db      	lsrs	r3, r3, #3
 8004142:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <HAL_RCC_GetClockConfig+0x60>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0207 	and.w	r2, r3, #7
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40023c00 	.word	0x40023c00

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fe2c 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fca6 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e04e      	b.n	80042c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	@ (80042d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424e:	d01d      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	@ (80042d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	@ (80042d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <HAL_TIM_Base_Start_IT+0xd0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a18      	ldr	r2, [pc, #96]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d111      	bne.n	80042b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b06      	cmp	r3, #6
 800429c:	d010      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	e007      	b.n	80042c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40010400 	.word	0x40010400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40001800 	.word	0x40001800

080042ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f839 	bl	800438a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fbe6 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start_IT+0x28>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start_IT+0x6e>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start_IT+0x42>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start_IT+0x6e>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start_IT+0x5c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start_IT+0x6e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0c7      	b.n	80045a6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start_IT+0x86>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004424:	e013      	b.n	800444e <HAL_TIM_PWM_Start_IT+0xae>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start_IT+0x96>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Start_IT+0xae>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start_IT+0xa6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004444:	e003      	b.n	800444e <HAL_TIM_PWM_Start_IT+0xae>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d841      	bhi.n	80044d8 <HAL_TIM_PWM_Start_IT+0x138>
 8004454:	a201      	add	r2, pc, #4	@ (adr r2, 800445c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004491 	.word	0x08004491
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044d9 	.word	0x080044d9
 8004468:	080044d9 	.word	0x080044d9
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044d9 	.word	0x080044d9
 8004474:	080044d9 	.word	0x080044d9
 8004478:	080044d9 	.word	0x080044d9
 800447c:	080044b5 	.word	0x080044b5
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044d9 	.word	0x080044d9
 8004488:	080044d9 	.word	0x080044d9
 800448c:	080044c7 	.word	0x080044c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0202 	orr.w	r2, r2, #2
 800449e:	60da      	str	r2, [r3, #12]
      break;
 80044a0:	e01d      	b.n	80044de <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0204 	orr.w	r2, r2, #4
 80044b0:	60da      	str	r2, [r3, #12]
      break;
 80044b2:	e014      	b.n	80044de <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0208 	orr.w	r2, r2, #8
 80044c2:	60da      	str	r2, [r3, #12]
      break;
 80044c4:	e00b      	b.n	80044de <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0210 	orr.w	r2, r2, #16
 80044d4:	60da      	str	r2, [r3, #12]
      break;
 80044d6:	e002      	b.n	80044de <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d15f      	bne.n	80045a4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fdfb 	bl	80050e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2e      	ldr	r2, [pc, #184]	@ (80045b0 <HAL_TIM_PWM_Start_IT+0x210>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Start_IT+0x166>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <HAL_TIM_PWM_Start_IT+0x214>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_TIM_PWM_Start_IT+0x16a>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_TIM_PWM_Start_IT+0x16c>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800451e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <HAL_TIM_PWM_Start_IT+0x210>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d022      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004532:	d01d      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1f      	ldr	r2, [pc, #124]	@ (80045b8 <HAL_TIM_PWM_Start_IT+0x218>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1e      	ldr	r2, [pc, #120]	@ (80045bc <HAL_TIM_PWM_Start_IT+0x21c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1c      	ldr	r2, [pc, #112]	@ (80045c0 <HAL_TIM_PWM_Start_IT+0x220>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <HAL_TIM_PWM_Start_IT+0x214>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_TIM_PWM_Start_IT+0x224>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <HAL_TIM_PWM_Start_IT+0x228>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b06      	cmp	r3, #6
 8004580:	d010      	beq.n	80045a4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	e007      	b.n	80045a4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40001800 	.word	0x40001800

080045cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d020      	beq.n	8004630 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01b      	beq.n	8004630 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa5b 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa4d 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fc fc11 	bl	8000e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d020      	beq.n	800467c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0204 	mvn.w	r2, #4
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa35 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa27 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fc fbeb 	bl	8000e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d020      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01b      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0208 	mvn.w	r2, #8
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa0f 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa01 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc fbc5 	bl	8000e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d020      	beq.n	8004714 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01b      	beq.n	8004714 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0210 	mvn.w	r2, #16
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2208      	movs	r2, #8
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9e9 	bl	8004ad2 <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9db 	bl	8004abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fc fb9f 	bl	8000e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0201 	mvn.w	r2, #1
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd f8c6 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fd72 	bl	8005240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9b3 	bl	8004ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0220 	mvn.w	r2, #32
 800479c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fd44 	bl	800522c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0ae      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	f200 809f 	bhi.w	8004918 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004919 	.word	0x08004919
 80047e8:	08004919 	.word	0x08004919
 80047ec:	08004919 	.word	0x08004919
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004919 	.word	0x08004919
 80047f8:	08004919 	.word	0x08004919
 80047fc:	08004919 	.word	0x08004919
 8004800:	08004897 	.word	0x08004897
 8004804:	08004919 	.word	0x08004919
 8004808:	08004919 	.word	0x08004919
 800480c:	08004919 	.word	0x08004919
 8004810:	080048d7 	.word	0x080048d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa1a 	bl	8004c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
      break;
 8004852:	e064      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fa6a 	bl	8004d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	619a      	str	r2, [r3, #24]
      break;
 8004894:	e043      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fabf 	bl	8004e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0208 	orr.w	r2, r2, #8
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0204 	bic.w	r2, r2, #4
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	61da      	str	r2, [r3, #28]
      break;
 80048d4:	e023      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb13 	bl	8004f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	61da      	str	r2, [r3, #28]
      break;
 8004916:	e002      	b.n	800491e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
      break;
 800491c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x1c>
 8004948:	2302      	movs	r3, #2
 800494a:	e0b4      	b.n	8004ab6 <HAL_TIM_ConfigClockSource+0x186>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004984:	d03e      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0xd4>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	f200 8087 	bhi.w	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004992:	f000 8086 	beq.w	8004aa2 <HAL_TIM_ConfigClockSource+0x172>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d87f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b70      	cmp	r3, #112	@ 0x70
 800499e:	d01a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xa6>
 80049a0:	2b70      	cmp	r3, #112	@ 0x70
 80049a2:	d87b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b60      	cmp	r3, #96	@ 0x60
 80049a6:	d050      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x11a>
 80049a8:	2b60      	cmp	r3, #96	@ 0x60
 80049aa:	d877      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b50      	cmp	r3, #80	@ 0x50
 80049ae:	d03c      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0xfa>
 80049b0:	2b50      	cmp	r3, #80	@ 0x50
 80049b2:	d873      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d058      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x13a>
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d86f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b30      	cmp	r3, #48	@ 0x30
 80049be:	d064      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d86b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d060      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d867      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d05c      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d05a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x15a>
 80049d4:	e062      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e6:	f000 fb5f 	bl	80050a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
      break;
 8004a02:	e04f      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a14:	f000 fb48 	bl	80050a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a26:	609a      	str	r2, [r3, #8]
      break;
 8004a28:	e03c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fabc 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2150      	movs	r1, #80	@ 0x50
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb15 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a48:	e02c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 fadb 	bl	8005012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2160      	movs	r1, #96	@ 0x60
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb05 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a68:	e01c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fa9c 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2140      	movs	r1, #64	@ 0x40
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 faf5 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a88:	e00c      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 faec 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a9a:	e003      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e000      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a46      	ldr	r2, [pc, #280]	@ (8004c28 <TIM_Base_SetConfig+0x12c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d00f      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a43      	ldr	r2, [pc, #268]	@ (8004c2c <TIM_Base_SetConfig+0x130>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a42      	ldr	r2, [pc, #264]	@ (8004c30 <TIM_Base_SetConfig+0x134>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a41      	ldr	r2, [pc, #260]	@ (8004c34 <TIM_Base_SetConfig+0x138>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a40      	ldr	r2, [pc, #256]	@ (8004c38 <TIM_Base_SetConfig+0x13c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <TIM_Base_SetConfig+0x12c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5c:	d027      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a32      	ldr	r2, [pc, #200]	@ (8004c2c <TIM_Base_SetConfig+0x130>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d023      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a31      	ldr	r2, [pc, #196]	@ (8004c30 <TIM_Base_SetConfig+0x134>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <TIM_Base_SetConfig+0x138>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2f      	ldr	r2, [pc, #188]	@ (8004c38 <TIM_Base_SetConfig+0x13c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d017      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2e      	ldr	r2, [pc, #184]	@ (8004c3c <TIM_Base_SetConfig+0x140>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <TIM_Base_SetConfig+0x144>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2c      	ldr	r2, [pc, #176]	@ (8004c44 <TIM_Base_SetConfig+0x148>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <TIM_Base_SetConfig+0x14c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c4c <TIM_Base_SetConfig+0x150>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	@ (8004c50 <TIM_Base_SetConfig+0x154>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <TIM_Base_SetConfig+0x12c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0xf8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <TIM_Base_SetConfig+0x13c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d103      	bne.n	8004bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d105      	bne.n	8004c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f023 0201 	bic.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800
 8004c48:	40001800 	.word	0x40001800
 8004c4c:	40001c00 	.word	0x40001c00
 8004c50:	40002000 	.word	0x40002000

08004c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f023 0201 	bic.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 0302 	bic.w	r3, r3, #2
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a20      	ldr	r2, [pc, #128]	@ (8004d2c <TIM_OC1_SetConfig+0xd8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC1_SetConfig+0x64>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <TIM_OC1_SetConfig+0xdc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10c      	bne.n	8004cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0308 	bic.w	r3, r3, #8
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <TIM_OC1_SetConfig+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC1_SetConfig+0x8e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	@ (8004d30 <TIM_OC1_SetConfig+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0210 	bic.w	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0320 	bic.w	r3, r3, #32
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a22      	ldr	r2, [pc, #136]	@ (8004e18 <TIM_OC2_SetConfig+0xe4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC2_SetConfig+0x68>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a21      	ldr	r2, [pc, #132]	@ (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <TIM_OC2_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x94>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d113      	bne.n	8004df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <TIM_OC3_SetConfig+0xe0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_OC3_SetConfig+0x66>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a20      	ldr	r2, [pc, #128]	@ (8004f04 <TIM_OC3_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10d      	bne.n	8004ea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <TIM_OC3_SetConfig+0xe0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC3_SetConfig+0x92>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a15      	ldr	r2, [pc, #84]	@ (8004f04 <TIM_OC3_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d113      	bne.n	8004eda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <TIM_OC4_SetConfig+0xa4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC4_SetConfig+0x68>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a11      	ldr	r2, [pc, #68]	@ (8004fb0 <TIM_OC4_SetConfig+0xa8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 030a 	bic.w	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f023 0210 	bic.w	r2, r3, #16
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800503c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	f043 0307 	orr.w	r3, r3, #7
 8005094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2201      	movs	r2, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1a      	ldr	r2, [r3, #32]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	43db      	mvns	r3, r3
 800510a:	401a      	ands	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e05a      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005198:	d01d      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1d      	ldr	r2, [pc, #116]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40010400 	.word	0x40010400
 8005224:	40014000 	.word	0x40014000
 8005228:	40001800 	.word	0x40001800

0800522c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <__NVIC_SetPriority>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005264:	2b00      	cmp	r3, #0
 8005266:	db0a      	blt.n	800527e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	490c      	ldr	r1, [pc, #48]	@ (80052a0 <__NVIC_SetPriority+0x4c>)
 800526e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005272:	0112      	lsls	r2, r2, #4
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	440b      	add	r3, r1
 8005278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800527c:	e00a      	b.n	8005294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4908      	ldr	r1, [pc, #32]	@ (80052a4 <__NVIC_SetPriority+0x50>)
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	3b04      	subs	r3, #4
 800528c:	0112      	lsls	r2, r2, #4
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	440b      	add	r3, r1
 8005292:	761a      	strb	r2, [r3, #24]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	e000e100 	.word	0xe000e100
 80052a4:	e000ed00 	.word	0xe000ed00

080052a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <SysTick_Handler+0x1c>)
 80052ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052b0:	f001 fd6c 	bl	8006d8c <xTaskGetSchedulerState>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d001      	beq.n	80052be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052ba:	f002 fc85 	bl	8007bc8 <xPortSysTickHandler>
  }
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	e000e010 	.word	0xe000e010

080052c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052cc:	2100      	movs	r1, #0
 80052ce:	f06f 0004 	mvn.w	r0, #4
 80052d2:	f7ff ffbf 	bl	8005254 <__NVIC_SetPriority>
#endif
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e2:	f3ef 8305 	mrs	r3, IPSR
 80052e6:	603b      	str	r3, [r7, #0]
  return(result);
 80052e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052ee:	f06f 0305 	mvn.w	r3, #5
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e00c      	b.n	8005310 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <osKernelInitialize+0x44>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d105      	bne.n	800530a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052fe:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <osKernelInitialize+0x44>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005304:	2300      	movs	r3, #0
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	e002      	b.n	8005310 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800530a:	f04f 33ff 	mov.w	r3, #4294967295
 800530e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005310:	687b      	ldr	r3, [r7, #4]
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000190 	.word	0x20000190

08005324 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532a:	f3ef 8305 	mrs	r3, IPSR
 800532e:	603b      	str	r3, [r7, #0]
  return(result);
 8005330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005336:	f06f 0305 	mvn.w	r3, #5
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e010      	b.n	8005360 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <osKernelStart+0x48>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d109      	bne.n	800535a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005346:	f7ff ffbf 	bl	80052c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <osKernelStart+0x48>)
 800534c:	2202      	movs	r2, #2
 800534e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005350:	f001 f8a6 	bl	80064a0 <vTaskStartScheduler>
      stat = osOK;
 8005354:	2300      	movs	r3, #0
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e002      	b.n	8005360 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005360:	687b      	ldr	r3, [r7, #4]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000190 	.word	0x20000190

08005370 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005376:	f3ef 8305 	mrs	r3, IPSR
 800537a:	603b      	str	r3, [r7, #0]
  return(result);
 800537c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005382:	f001 f9b9 	bl	80066f8 <xTaskGetTickCountFromISR>
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	e002      	b.n	8005390 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800538a:	f001 f9a5 	bl	80066d8 <xTaskGetTickCount>
 800538e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005390:	687b      	ldr	r3, [r7, #4]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800539a:	b580      	push	{r7, lr}
 800539c:	b08e      	sub	sp, #56	@ 0x38
 800539e:	af04      	add	r7, sp, #16
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053aa:	f3ef 8305 	mrs	r3, IPSR
 80053ae:	617b      	str	r3, [r7, #20]
  return(result);
 80053b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d17e      	bne.n	80054b4 <osThreadNew+0x11a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d07b      	beq.n	80054b4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053c0:	2318      	movs	r3, #24
 80053c2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d045      	beq.n	8005460 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <osThreadNew+0x48>
        name = attr->name;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <osThreadNew+0x6e>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b38      	cmp	r3, #56	@ 0x38
 80053fa:	d805      	bhi.n	8005408 <osThreadNew+0x6e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <osThreadNew+0x72>
        return (NULL);
 8005408:	2300      	movs	r3, #0
 800540a:	e054      	b.n	80054b6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <osThreadNew+0xa8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2ba7      	cmp	r3, #167	@ 0xa7
 800542a:	d90a      	bls.n	8005442 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <osThreadNew+0xa8>
        mem = 1;
 800543c:	2301      	movs	r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e010      	b.n	8005464 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <osThreadNew+0xca>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d108      	bne.n	8005464 <osThreadNew+0xca>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <osThreadNew+0xca>
          mem = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e001      	b.n	8005464 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d110      	bne.n	800548c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005472:	9202      	str	r2, [sp, #8]
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fe19 	bl	80060b8 <xTaskCreateStatic>
 8005486:	4603      	mov	r3, r0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e013      	b.n	80054b4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d110      	bne.n	80054b4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	b29a      	uxth	r2, r3
 8005496:	f107 0310 	add.w	r3, r7, #16
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fe67 	bl	8006178 <xTaskCreate>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d001      	beq.n	80054b4 <osThreadNew+0x11a>
            hTask = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054b4:	693b      	ldr	r3, [r7, #16]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3728      	adds	r7, #40	@ 0x28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c6:	f3ef 8305 	mrs	r3, IPSR
 80054ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80054cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <osDelay+0x1c>
    stat = osErrorISR;
 80054d2:	f06f 0305 	mvn.w	r3, #5
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e007      	b.n	80054ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 ffa5 	bl	8006434 <vTaskDelay>
    }
  }

  return (stat);
 80054ea:	68fb      	ldr	r3, [r7, #12]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a07      	ldr	r2, [pc, #28]	@ (8005520 <vApplicationGetIdleTaskMemory+0x2c>)
 8005504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a06      	ldr	r2, [pc, #24]	@ (8005524 <vApplicationGetIdleTaskMemory+0x30>)
 800550a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2280      	movs	r2, #128	@ 0x80
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000194 	.word	0x20000194
 8005524:	2000023c 	.word	0x2000023c

08005528 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a07      	ldr	r2, [pc, #28]	@ (8005554 <vApplicationGetTimerTaskMemory+0x2c>)
 8005538:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a06      	ldr	r2, [pc, #24]	@ (8005558 <vApplicationGetTimerTaskMemory+0x30>)
 800553e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005546:	601a      	str	r2, [r3, #0]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	2000043c 	.word	0x2000043c
 8005558:	200004e4 	.word	0x200004e4

0800555c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 0208 	add.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f04f 32ff 	mov.w	r2, #4294967295
 8005574:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f103 0208 	add.w	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f103 0208 	add.w	r2, r3, #8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d103      	bne.n	800561e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e00c      	b.n	8005638 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3308      	adds	r3, #8
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e002      	b.n	800562c <vListInsert+0x2e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d2f6      	bcs.n	8005626 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6852      	ldr	r2, [r2, #4]
 8005690:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d103      	bne.n	80056a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056f0:	f002 f9da 	bl	8007aa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	3b01      	subs	r3, #1
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	22ff      	movs	r2, #255	@ 0xff
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	22ff      	movs	r2, #255	@ 0xff
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d114      	bne.n	8005770 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3310      	adds	r3, #16
 8005752:	4618      	mov	r0, r3
 8005754:	f001 f954 	bl	8006a00 <xTaskRemoveFromEventList>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d012      	beq.n	8005784 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <xQueueGenericReset+0xd0>)
 8005760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	e009      	b.n	8005784 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3310      	adds	r3, #16
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fef1 	bl	800555c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3324      	adds	r3, #36	@ 0x24
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff feec 	bl	800555c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005784:	f002 f9c2 	bl	8007b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005788:	2301      	movs	r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	@ 0x38
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <xQueueGenericCreateStatic+0x56>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xQueueGenericCreateStatic+0x5a>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericCreateStatic+0x5c>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d102      	bne.n	800581c <xQueueGenericCreateStatic+0x84>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <xQueueGenericCreateStatic+0x88>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <xQueueGenericCreateStatic+0x8a>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61fb      	str	r3, [r7, #28]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800583e:	2350      	movs	r3, #80	@ 0x50
 8005840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d00b      	beq.n	8005860 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	61bb      	str	r3, [r7, #24]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005860:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005874:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f805 	bl	8005892 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3730      	adds	r7, #48	@ 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e002      	b.n	80058b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058c0:	2101      	movs	r1, #1
 80058c2:	69b8      	ldr	r0, [r7, #24]
 80058c4:	f7ff fefe 	bl	80056c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08e      	sub	sp, #56	@ 0x38
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058e6:	2300      	movs	r3, #0
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGenericSend+0x34>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueGenericSend+0x42>
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericSend+0x46>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericSend+0x48>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xQueueGenericSend+0x64>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d103      	bne.n	800594a <xQueueGenericSend+0x72>
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <xQueueGenericSend+0x76>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericSend+0x78>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <xQueueGenericSend+0x94>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	623b      	str	r3, [r7, #32]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596c:	f001 fa0e 	bl	8006d8c <xTaskGetSchedulerState>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <xQueueGenericSend+0xa4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueGenericSend+0xa8>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueGenericSend+0xaa>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xQueueGenericSend+0xc6>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f002 f883 	bl	8007aa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSend+0xdc>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d129      	bne.n	8005a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ba:	f000 fa0f 	bl	8005ddc <prvCopyDataToQueue>
 80059be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	3324      	adds	r3, #36	@ 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f817 	bl	8006a00 <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad8 <xQueueGenericSend+0x200>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e00a      	b.n	8005a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b39      	ldr	r3, [pc, #228]	@ (8005ad8 <xQueueGenericSend+0x200>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a00:	f002 f884 	bl	8007b0c <vPortExitCritical>
				return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e063      	b.n	8005ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0e:	f002 f87d 	bl	8007b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e05c      	b.n	8005ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f851 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a2a:	f002 f86f 	bl	8007b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2e:	f000 fda7 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a32:	f002 f839 	bl	8007aa8 <vPortEnterCritical>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x174>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x18a>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a62:	f002 f853 	bl	8007b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f840 	bl	8006af4 <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d124      	bne.n	8005ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a7c:	f000 faa6 	bl	8005fcc <prvIsQueueFull>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 ff64 	bl	800695c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a96:	f000 fa31 	bl	8005efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 fd7f 	bl	800659c <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af7c 	bne.w	800599e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <xQueueGenericSend+0x200>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e772      	b.n	800599e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aba:	f000 fa1f 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005abe:	f000 fd6d 	bl	800659c <xTaskResumeAll>
 8005ac2:	e76c      	b.n	800599e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac6:	f000 fa19 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aca:	f000 fd67 	bl	800659c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	@ 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	@ 0x40
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <xQueueGenericSendFromISR+0x3e>
 8005b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericSendFromISR+0x42>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericSendFromISR+0x44>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d103      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6e>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <xQueueGenericSendFromISR+0x72>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueGenericSendFromISR+0x74>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	623b      	str	r3, [r7, #32]
}
 8005b66:	bf00      	nop
 8005b68:	bf00      	nop
 8005b6a:	e7fd      	b.n	8005b68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6c:	f002 f87c 	bl	8007c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b70:	f3ef 8211 	mrs	r2, BASEPRI
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61fa      	str	r2, [r7, #28]
 8005b86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <xQueueGenericSendFromISR+0xc2>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d12f      	bne.n	8005bfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bb4:	f000 f912 	bl	8005ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d112      	bne.n	8005be8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	3324      	adds	r3, #36	@ 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff16 	bl	8006a00 <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e007      	b.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b25a      	sxtb	r2, r3
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bfc:	e001      	b.n	8005c02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3740      	adds	r7, #64	@ 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	@ 0x30
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <xQueueReceive+0x32>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	623b      	str	r3, [r7, #32]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <xQueueReceive+0x40>
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <xQueueReceive+0x44>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <xQueueReceive+0x46>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <xQueueReceive+0x62>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	61fb      	str	r3, [r7, #28]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c7a:	f001 f887 	bl	8006d8c <xTaskGetSchedulerState>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <xQueueReceive+0x72>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <xQueueReceive+0x76>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueReceive+0x78>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <xQueueReceive+0x94>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	61bb      	str	r3, [r7, #24]
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	e7fd      	b.n	8005ca8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cac:	f001 fefc 	bl	8007aa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01f      	beq.n	8005cfc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc0:	f000 f8f6 	bl	8005eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	1e5a      	subs	r2, r3, #1
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00f      	beq.n	8005cf4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	3310      	adds	r3, #16
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fe91 	bl	8006a00 <xTaskRemoveFromEventList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd8 <xQueueReceive+0x1c0>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cf4:	f001 ff0a 	bl	8007b0c <vPortExitCritical>
				return pdPASS;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e069      	b.n	8005dd0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d02:	f001 ff03 	bl	8007b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e062      	b.n	8005dd0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d10:	f107 0310 	add.w	r3, r7, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fed7 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1e:	f001 fef5 	bl	8007b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d22:	f000 fc2d 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d26:	f001 febf 	bl	8007aa8 <vPortEnterCritical>
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d30:	b25b      	sxtb	r3, r3
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d103      	bne.n	8005d40 <xQueueReceive+0x128>
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d103      	bne.n	8005d56 <xQueueReceive+0x13e>
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d56:	f001 fed9 	bl	8007b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d5a:	1d3a      	adds	r2, r7, #4
 8005d5c:	f107 0310 	add.w	r3, r7, #16
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fec6 	bl	8006af4 <xTaskCheckForTimeOut>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d123      	bne.n	8005db6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d70:	f000 f916 	bl	8005fa0 <prvIsQueueEmpty>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d017      	beq.n	8005daa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	3324      	adds	r3, #36	@ 0x24
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fdea 	bl	800695c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d8a:	f000 f8b7 	bl	8005efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d8e:	f000 fc05 	bl	800659c <xTaskResumeAll>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d189      	bne.n	8005cac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d98:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <xQueueReceive+0x1c0>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	e780      	b.n	8005cac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dac:	f000 f8a6 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005db0:	f000 fbf4 	bl	800659c <xTaskResumeAll>
 8005db4:	e77a      	b.n	8005cac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db8:	f000 f8a0 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dbc:	f000 fbee 	bl	800659c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc2:	f000 f8ed 	bl	8005fa0 <prvIsQueueEmpty>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f43f af6f 	beq.w	8005cac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	@ 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d14d      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 ffde 	bl	8006dc8 <xTaskPriorityDisinherit>
 8005e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	e043      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d119      	bne.n	8005e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6858      	ldr	r0, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	461a      	mov	r2, r3
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	f002 fb37 	bl	800849a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d32b      	bcc.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	e026      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68d8      	ldr	r0, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	f002 fb1d 	bl	800849a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e68:	425b      	negs	r3, r3
 8005e6a:	441a      	add	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d207      	bcs.n	8005e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	425b      	negs	r3, r3
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d105      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	441a      	add	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d303      	bcc.n	8005ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	6838      	ldr	r0, [r7, #0]
 8005ef0:	f002 fad3 	bl	800849a <memcpy>
	}
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f04:	f001 fdd0 	bl	8007aa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f10:	e011      	b.n	8005f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d012      	beq.n	8005f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3324      	adds	r3, #36	@ 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fd6e 	bl	8006a00 <xTaskRemoveFromEventList>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f2a:	f000 fe47 	bl	8006bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dce9      	bgt.n	8005f12 <prvUnlockQueue+0x16>
 8005f3e:	e000      	b.n	8005f42 <prvUnlockQueue+0x46>
					break;
 8005f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	22ff      	movs	r2, #255	@ 0xff
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f4a:	f001 fddf 	bl	8007b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f4e:	f001 fdab 	bl	8007aa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f5a:	e011      	b.n	8005f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fd49 	bl	8006a00 <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f74:	f000 fe22 	bl	8006bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dce9      	bgt.n	8005f5c <prvUnlockQueue+0x60>
 8005f88:	e000      	b.n	8005f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	22ff      	movs	r2, #255	@ 0xff
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f94:	f001 fdba 	bl	8007b0c <vPortExitCritical>
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa8:	f001 fd7e 	bl	8007aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e001      	b.n	8005fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f001 fda5 	bl	8007b0c <vPortExitCritical>

	return xReturn;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd4:	f001 fd68 	bl	8007aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e001      	b.n	8005fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fee:	f001 fd8d 	bl	8007b0c <vPortExitCritical>

	return xReturn;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e014      	b.n	8006036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800600c:	4a0f      	ldr	r2, [pc, #60]	@ (800604c <vQueueAddToRegistry+0x50>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006018:	490c      	ldr	r1, [pc, #48]	@ (800604c <vQueueAddToRegistry+0x50>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006022:	4a0a      	ldr	r2, [pc, #40]	@ (800604c <vQueueAddToRegistry+0x50>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800602e:	e006      	b.n	800603e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b07      	cmp	r3, #7
 800603a:	d9e7      	bls.n	800600c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200008e4 	.word	0x200008e4

08006050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006060:	f001 fd22 	bl	8007aa8 <vPortEnterCritical>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800606a:	b25b      	sxtb	r3, r3
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d103      	bne.n	800607a <vQueueWaitForMessageRestricted+0x2a>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006080:	b25b      	sxtb	r3, r3
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d103      	bne.n	8006090 <vQueueWaitForMessageRestricted+0x40>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006090:	f001 fd3c 	bl	8007b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3324      	adds	r3, #36	@ 0x24
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fc7f 	bl	80069a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f7ff ff26 	bl	8005efc <prvUnlockQueue>
	}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	@ 0x38
 80060bc:	af04      	add	r7, sp, #16
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	623b      	str	r3, [r7, #32]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <xTaskCreateStatic+0x4a>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	61fb      	str	r3, [r7, #28]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006102:	23a8      	movs	r3, #168	@ 0xa8
 8006104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2ba8      	cmp	r3, #168	@ 0xa8
 800610a:	d00b      	beq.n	8006124 <xTaskCreateStatic+0x6c>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61bb      	str	r3, [r7, #24]
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01e      	beq.n	800616a <xTaskCreateStatic+0xb2>
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01b      	beq.n	800616a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	2202      	movs	r2, #2
 8006140:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006144:	2300      	movs	r3, #0
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	9302      	str	r3, [sp, #8]
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f851 	bl	8006204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006164:	f000 f8f6 	bl	8006354 <prvAddNewTaskToReadyList>
 8006168:	e001      	b.n	800616e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800616e:	697b      	ldr	r3, [r7, #20]
	}
 8006170:	4618      	mov	r0, r3
 8006172:	3728      	adds	r7, #40	@ 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	@ 0x30
 800617c:	af04      	add	r7, sp, #16
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fdad 	bl	8007cec <pvPortMalloc>
 8006192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00e      	beq.n	80061b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800619a:	20a8      	movs	r0, #168	@ 0xa8
 800619c:	f001 fda6 	bl	8007cec <pvPortMalloc>
 80061a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ae:	e005      	b.n	80061bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f001 fe69 	bl	8007e88 <vPortFree>
 80061b6:	e001      	b.n	80061bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f80f 	bl	8006204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e6:	69f8      	ldr	r0, [r7, #28]
 80061e8:	f000 f8b4 	bl	8006354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e002      	b.n	80061f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f8:	69bb      	ldr	r3, [r7, #24]
	}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	461a      	mov	r2, r3
 800621c:	21a5      	movs	r1, #165	@ 0xa5
 800621e:	f002 f86a 	bl	80082f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800622c:	3b01      	subs	r3, #1
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	617b      	str	r3, [r7, #20]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01f      	beq.n	80062a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	e012      	b.n	8006290 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	7819      	ldrb	r1, [r3, #0]
 8006272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	3334      	adds	r3, #52	@ 0x34
 800627a:	460a      	mov	r2, r1
 800627c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d006      	beq.n	8006298 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b0f      	cmp	r3, #15
 8006294:	d9e9      	bls.n	800626a <prvInitialiseNewTask+0x66>
 8006296:	e000      	b.n	800629a <prvInitialiseNewTask+0x96>
			{
				break;
 8006298:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062a2:	e003      	b.n	80062ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	2b37      	cmp	r3, #55	@ 0x37
 80062b0:	d901      	bls.n	80062b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062b2:	2337      	movs	r3, #55	@ 0x37
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	2200      	movs	r2, #0
 80062c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f965 	bl	800559c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	3318      	adds	r3, #24
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff f960 	bl	800559c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	3354      	adds	r3, #84	@ 0x54
 8006306:	224c      	movs	r2, #76	@ 0x4c
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fff3 	bl	80082f6 <memset>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	4a0d      	ldr	r2, [pc, #52]	@ (8006348 <prvInitialiseNewTask+0x144>)
 8006314:	659a      	str	r2, [r3, #88]	@ 0x58
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	4a0c      	ldr	r2, [pc, #48]	@ (800634c <prvInitialiseNewTask+0x148>)
 800631a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800631c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631e:	4a0c      	ldr	r2, [pc, #48]	@ (8006350 <prvInitialiseNewTask+0x14c>)
 8006320:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	68f9      	ldr	r1, [r7, #12]
 8006326:	69b8      	ldr	r0, [r7, #24]
 8006328:	f001 fa8e 	bl	8007848 <pxPortInitialiseStack>
 800632c:	4602      	mov	r2, r0
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800633e:	bf00      	nop
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20004b78 	.word	0x20004b78
 800634c:	20004be0 	.word	0x20004be0
 8006350:	20004c48 	.word	0x20004c48

08006354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800635c:	f001 fba4 	bl	8007aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006360:	4b2d      	ldr	r3, [pc, #180]	@ (8006418 <prvAddNewTaskToReadyList+0xc4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a2c      	ldr	r2, [pc, #176]	@ (8006418 <prvAddNewTaskToReadyList+0xc4>)
 8006368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800636a:	4b2c      	ldr	r3, [pc, #176]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006372:	4a2a      	ldr	r2, [pc, #168]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <prvAddNewTaskToReadyList+0xc4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d110      	bne.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006380:	f000 fc40 	bl	8006c04 <prvInitialiseTaskLists>
 8006384:	e00d      	b.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006386:	4b26      	ldr	r3, [pc, #152]	@ (8006420 <prvAddNewTaskToReadyList+0xcc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800638e:	4b23      	ldr	r3, [pc, #140]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d802      	bhi.n	80063a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800639c:	4a1f      	ldr	r2, [pc, #124]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063a2:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <prvAddNewTaskToReadyList+0xd0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006424 <prvAddNewTaskToReadyList+0xd0>)
 80063aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006424 <prvAddNewTaskToReadyList+0xd0>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006428 <prvAddNewTaskToReadyList+0xd4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d903      	bls.n	80063c8 <prvAddNewTaskToReadyList+0x74>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <prvAddNewTaskToReadyList+0xd4>)
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4a15      	ldr	r2, [pc, #84]	@ (800642c <prvAddNewTaskToReadyList+0xd8>)
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f7ff f8e9 	bl	80055b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063e4:	f001 fb92 	bl	8007b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <prvAddNewTaskToReadyList+0xcc>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <prvAddNewTaskToReadyList+0xc8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d207      	bcs.n	800640e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <prvAddNewTaskToReadyList+0xdc>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000df8 	.word	0x20000df8
 800641c:	20000924 	.word	0x20000924
 8006420:	20000e04 	.word	0x20000e04
 8006424:	20000e14 	.word	0x20000e14
 8006428:	20000e00 	.word	0x20000e00
 800642c:	20000928 	.word	0x20000928
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006446:	4b14      	ldr	r3, [pc, #80]	@ (8006498 <vTaskDelay+0x64>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <vTaskDelay+0x32>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60bb      	str	r3, [r7, #8]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006466:	f000 f88b 	bl	8006580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800646a:	2100      	movs	r1, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fe3d 	bl	80070ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006472:	f000 f893 	bl	800659c <xTaskResumeAll>
 8006476:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800647e:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vTaskDelay+0x68>)
 8006480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000e20 	.word	0x20000e20
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ae:	463a      	mov	r2, r7
 80064b0:	1d39      	adds	r1, r7, #4
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff f81c 	bl	80054f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	9202      	str	r2, [sp, #8]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	460a      	mov	r2, r1
 80064ce:	4924      	ldr	r1, [pc, #144]	@ (8006560 <vTaskStartScheduler+0xc0>)
 80064d0:	4824      	ldr	r0, [pc, #144]	@ (8006564 <vTaskStartScheduler+0xc4>)
 80064d2:	f7ff fdf1 	bl	80060b8 <xTaskCreateStatic>
 80064d6:	4603      	mov	r3, r0
 80064d8:	4a23      	ldr	r2, [pc, #140]	@ (8006568 <vTaskStartScheduler+0xc8>)
 80064da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064dc:	4b22      	ldr	r3, [pc, #136]	@ (8006568 <vTaskStartScheduler+0xc8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064e4:	2301      	movs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e001      	b.n	80064ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d102      	bne.n	80064fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064f4:	f000 fe4e 	bl	8007194 <xTimerCreateTimerTask>
 80064f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d11b      	bne.n	8006538 <vTaskStartScheduler+0x98>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	613b      	str	r3, [r7, #16]
}
 8006512:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006514:	4b15      	ldr	r3, [pc, #84]	@ (800656c <vTaskStartScheduler+0xcc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3354      	adds	r3, #84	@ 0x54
 800651a:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <vTaskStartScheduler+0xd0>)
 800651c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800651e:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <vTaskStartScheduler+0xd4>)
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006526:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <vTaskStartScheduler+0xd8>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800652c:	4b13      	ldr	r3, [pc, #76]	@ (800657c <vTaskStartScheduler+0xdc>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006532:	f001 fa15 	bl	8007960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006536:	e00f      	b.n	8006558 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d10b      	bne.n	8006558 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <vTaskStartScheduler+0xb4>
}
 8006558:	bf00      	nop
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	08009544 	.word	0x08009544
 8006564:	08006bd5 	.word	0x08006bd5
 8006568:	20000e1c 	.word	0x20000e1c
 800656c:	20000924 	.word	0x20000924
 8006570:	20000024 	.word	0x20000024
 8006574:	20000e18 	.word	0x20000e18
 8006578:	20000e04 	.word	0x20000e04
 800657c:	20000dfc 	.word	0x20000dfc

08006580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006584:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <vTaskSuspendAll+0x18>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a03      	ldr	r2, [pc, #12]	@ (8006598 <vTaskSuspendAll+0x18>)
 800658c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800658e:	bf00      	nop
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000e20 	.word	0x20000e20

0800659c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065aa:	4b42      	ldr	r3, [pc, #264]	@ (80066b4 <xTaskResumeAll+0x118>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <xTaskResumeAll+0x2e>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	603b      	str	r3, [r7, #0]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065ca:	f001 fa6d 	bl	8007aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ce:	4b39      	ldr	r3, [pc, #228]	@ (80066b4 <xTaskResumeAll+0x118>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	4a37      	ldr	r2, [pc, #220]	@ (80066b4 <xTaskResumeAll+0x118>)
 80065d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d8:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <xTaskResumeAll+0x118>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d162      	bne.n	80066a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e0:	4b35      	ldr	r3, [pc, #212]	@ (80066b8 <xTaskResumeAll+0x11c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d05e      	beq.n	80066a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e8:	e02f      	b.n	800664a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ea:	4b34      	ldr	r3, [pc, #208]	@ (80066bc <xTaskResumeAll+0x120>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff f83a 	bl	8005670 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff f835 	bl	8005670 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660a:	4b2d      	ldr	r3, [pc, #180]	@ (80066c0 <xTaskResumeAll+0x124>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d903      	bls.n	800661a <xTaskResumeAll+0x7e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	4a2a      	ldr	r2, [pc, #168]	@ (80066c0 <xTaskResumeAll+0x124>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4a27      	ldr	r2, [pc, #156]	@ (80066c4 <xTaskResumeAll+0x128>)
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fe ffc0 	bl	80055b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800663a:	4b23      	ldr	r3, [pc, #140]	@ (80066c8 <xTaskResumeAll+0x12c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006644:	4b21      	ldr	r3, [pc, #132]	@ (80066cc <xTaskResumeAll+0x130>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664a:	4b1c      	ldr	r3, [pc, #112]	@ (80066bc <xTaskResumeAll+0x120>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1cb      	bne.n	80065ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006658:	f000 fb78 	bl	8006d4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800665c:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <xTaskResumeAll+0x134>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006668:	f000 f858 	bl	800671c <xTaskIncrementTick>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006672:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <xTaskResumeAll+0x130>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3b01      	subs	r3, #1
 800667c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f1      	bne.n	8006668 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <xTaskResumeAll+0x134>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800668a:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <xTaskResumeAll+0x130>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006696:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <xTaskResumeAll+0x138>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f001 fa31 	bl	8007b0c <vPortExitCritical>

	return xAlreadyYielded;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000e20 	.word	0x20000e20
 80066b8:	20000df8 	.word	0x20000df8
 80066bc:	20000db8 	.word	0x20000db8
 80066c0:	20000e00 	.word	0x20000e00
 80066c4:	20000928 	.word	0x20000928
 80066c8:	20000924 	.word	0x20000924
 80066cc:	20000e0c 	.word	0x20000e0c
 80066d0:	20000e08 	.word	0x20000e08
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <xTaskGetTickCount+0x1c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066e4:	687b      	ldr	r3, [r7, #4]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000dfc 	.word	0x20000dfc

080066f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066fe:	f001 fab3 	bl	8007c68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006706:	4b04      	ldr	r3, [pc, #16]	@ (8006718 <xTaskGetTickCountFromISR+0x20>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800670c:	683b      	ldr	r3, [r7, #0]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000dfc 	.word	0x20000dfc

0800671c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006726:	4b4f      	ldr	r3, [pc, #316]	@ (8006864 <xTaskIncrementTick+0x148>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 8090 	bne.w	8006850 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006730:	4b4d      	ldr	r3, [pc, #308]	@ (8006868 <xTaskIncrementTick+0x14c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006738:	4a4b      	ldr	r2, [pc, #300]	@ (8006868 <xTaskIncrementTick+0x14c>)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d121      	bne.n	8006788 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006744:	4b49      	ldr	r3, [pc, #292]	@ (800686c <xTaskIncrementTick+0x150>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <xTaskIncrementTick+0x4a>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	603b      	str	r3, [r7, #0]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <xTaskIncrementTick+0x46>
 8006766:	4b41      	ldr	r3, [pc, #260]	@ (800686c <xTaskIncrementTick+0x150>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	4b40      	ldr	r3, [pc, #256]	@ (8006870 <xTaskIncrementTick+0x154>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a3e      	ldr	r2, [pc, #248]	@ (800686c <xTaskIncrementTick+0x150>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	4a3e      	ldr	r2, [pc, #248]	@ (8006870 <xTaskIncrementTick+0x154>)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b3e      	ldr	r3, [pc, #248]	@ (8006874 <xTaskIncrementTick+0x158>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	4a3c      	ldr	r2, [pc, #240]	@ (8006874 <xTaskIncrementTick+0x158>)
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	f000 fae2 	bl	8006d4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006788:	4b3b      	ldr	r3, [pc, #236]	@ (8006878 <xTaskIncrementTick+0x15c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d349      	bcc.n	8006826 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006792:	4b36      	ldr	r3, [pc, #216]	@ (800686c <xTaskIncrementTick+0x150>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679c:	4b36      	ldr	r3, [pc, #216]	@ (8006878 <xTaskIncrementTick+0x15c>)
 800679e:	f04f 32ff 	mov.w	r2, #4294967295
 80067a2:	601a      	str	r2, [r3, #0]
					break;
 80067a4:	e03f      	b.n	8006826 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a6:	4b31      	ldr	r3, [pc, #196]	@ (800686c <xTaskIncrementTick+0x150>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d203      	bcs.n	80067c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067be:	4a2e      	ldr	r2, [pc, #184]	@ (8006878 <xTaskIncrementTick+0x15c>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067c4:	e02f      	b.n	8006826 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe ff50 	bl	8005670 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	3318      	adds	r3, #24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe ff47 	bl	8005670 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	4b25      	ldr	r3, [pc, #148]	@ (800687c <xTaskIncrementTick+0x160>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d903      	bls.n	80067f6 <xTaskIncrementTick+0xda>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	4a22      	ldr	r2, [pc, #136]	@ (800687c <xTaskIncrementTick+0x160>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a1f      	ldr	r2, [pc, #124]	@ (8006880 <xTaskIncrementTick+0x164>)
 8006804:	441a      	add	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7fe fed2 	bl	80055b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4b1b      	ldr	r3, [pc, #108]	@ (8006884 <xTaskIncrementTick+0x168>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	429a      	cmp	r2, r3
 800681e:	d3b8      	bcc.n	8006792 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006824:	e7b5      	b.n	8006792 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006826:	4b17      	ldr	r3, [pc, #92]	@ (8006884 <xTaskIncrementTick+0x168>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	4914      	ldr	r1, [pc, #80]	@ (8006880 <xTaskIncrementTick+0x164>)
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d901      	bls.n	8006842 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006842:	4b11      	ldr	r3, [pc, #68]	@ (8006888 <xTaskIncrementTick+0x16c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e004      	b.n	800685a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006850:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <xTaskIncrementTick+0x170>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a0d      	ldr	r2, [pc, #52]	@ (800688c <xTaskIncrementTick+0x170>)
 8006858:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800685a:	697b      	ldr	r3, [r7, #20]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000e20 	.word	0x20000e20
 8006868:	20000dfc 	.word	0x20000dfc
 800686c:	20000db0 	.word	0x20000db0
 8006870:	20000db4 	.word	0x20000db4
 8006874:	20000e10 	.word	0x20000e10
 8006878:	20000e18 	.word	0x20000e18
 800687c:	20000e00 	.word	0x20000e00
 8006880:	20000928 	.word	0x20000928
 8006884:	20000924 	.word	0x20000924
 8006888:	20000e0c 	.word	0x20000e0c
 800688c:	20000e08 	.word	0x20000e08

08006890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006896:	4b2b      	ldr	r3, [pc, #172]	@ (8006944 <vTaskSwitchContext+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800689e:	4b2a      	ldr	r3, [pc, #168]	@ (8006948 <vTaskSwitchContext+0xb8>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068a4:	e047      	b.n	8006936 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80068a6:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <vTaskSwitchContext+0xb8>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ac:	4b27      	ldr	r3, [pc, #156]	@ (800694c <vTaskSwitchContext+0xbc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e011      	b.n	80068d8 <vTaskSwitchContext+0x48>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	e7fd      	b.n	80068ce <vTaskSwitchContext+0x3e>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	491d      	ldr	r1, [pc, #116]	@ (8006950 <vTaskSwitchContext+0xc0>)
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0e3      	beq.n	80068b4 <vTaskSwitchContext+0x24>
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <vTaskSwitchContext+0xc0>)
 80068f8:	4413      	add	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	605a      	str	r2, [r3, #4]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	3308      	adds	r3, #8
 800690e:	429a      	cmp	r2, r3
 8006910:	d104      	bne.n	800691c <vTaskSwitchContext+0x8c>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	605a      	str	r2, [r3, #4]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <vTaskSwitchContext+0xc4>)
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	4a09      	ldr	r2, [pc, #36]	@ (800694c <vTaskSwitchContext+0xbc>)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800692c:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <vTaskSwitchContext+0xc4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3354      	adds	r3, #84	@ 0x54
 8006932:	4a09      	ldr	r2, [pc, #36]	@ (8006958 <vTaskSwitchContext+0xc8>)
 8006934:	6013      	str	r3, [r2, #0]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000e20 	.word	0x20000e20
 8006948:	20000e0c 	.word	0x20000e0c
 800694c:	20000e00 	.word	0x20000e00
 8006950:	20000928 	.word	0x20000928
 8006954:	20000924 	.word	0x20000924
 8006958:	20000024 	.word	0x20000024

0800695c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006984:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <vTaskPlaceOnEventList+0x48>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3318      	adds	r3, #24
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fe fe36 	bl	80055fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006992:	2101      	movs	r1, #1
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f000 fba9 	bl	80070ec <prvAddCurrentTaskToDelayedList>
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000924 	.word	0x20000924

080069a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	617b      	str	r3, [r7, #20]
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d2:	4b0a      	ldr	r3, [pc, #40]	@ (80069fc <vTaskPlaceOnEventListRestricted+0x54>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7fe fdeb 	bl	80055b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f000 fb7c 	bl	80070ec <prvAddCurrentTaskToDelayedList>
	}
 80069f4:	bf00      	nop
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000924 	.word	0x20000924

08006a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fe1c 	bl	8005670 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <xTaskRemoveFromEventList+0xb0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11d      	bne.n	8006a7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fe13 	bl	8005670 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4e:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d903      	bls.n	8006a5e <xTaskRemoveFromEventList+0x5e>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4a13      	ldr	r2, [pc, #76]	@ (8006ab8 <xTaskRemoveFromEventList+0xb8>)
 8006a6c:	441a      	add	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fe fd9e 	bl	80055b6 <vListInsertEnd>
 8006a7a:	e005      	b.n	8006a88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3318      	adds	r3, #24
 8006a80:	4619      	mov	r1, r3
 8006a82:	480e      	ldr	r0, [pc, #56]	@ (8006abc <xTaskRemoveFromEventList+0xbc>)
 8006a84:	f7fe fd97 	bl	80055b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <xTaskRemoveFromEventList+0xc0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d905      	bls.n	8006aa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <xTaskRemoveFromEventList+0xc4>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e001      	b.n	8006aa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aa6:	697b      	ldr	r3, [r7, #20]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000e20 	.word	0x20000e20
 8006ab4:	20000e00 	.word	0x20000e00
 8006ab8:	20000928 	.word	0x20000928
 8006abc:	20000db8 	.word	0x20000db8
 8006ac0:	20000924 	.word	0x20000924
 8006ac4:	20000e0c 	.word	0x20000e0c

08006ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <vTaskInternalSetTimeOutState+0x24>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <vTaskInternalSetTimeOutState+0x28>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000e10 	.word	0x20000e10
 8006af0:	20000dfc 	.word	0x20000dfc

08006af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60fb      	str	r3, [r7, #12]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b3a:	f000 ffb5 	bl	8007aa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <xTaskCheckForTimeOut+0xc0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d102      	bne.n	8006b5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e023      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <xTaskCheckForTimeOut+0xc4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d007      	beq.n	8006b7a <xTaskCheckForTimeOut+0x86>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e015      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d20b      	bcs.n	8006b9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff99 	bl	8006ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	e004      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ba6:	f000 ffb1 	bl	8007b0c <vPortExitCritical>

	return xReturn;
 8006baa:	69fb      	ldr	r3, [r7, #28]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000dfc 	.word	0x20000dfc
 8006bb8:	20000e10 	.word	0x20000e10

08006bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <vTaskMissedYield+0x14>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	20000e0c 	.word	0x20000e0c

08006bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bdc:	f000 f852 	bl	8006c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006be0:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <prvIdleTask+0x28>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d9f9      	bls.n	8006bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <prvIdleTask+0x2c>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bf8:	e7f0      	b.n	8006bdc <prvIdleTask+0x8>
 8006bfa:	bf00      	nop
 8006bfc:	20000928 	.word	0x20000928
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	e00c      	b.n	8006c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a12      	ldr	r2, [pc, #72]	@ (8006c64 <prvInitialiseTaskLists+0x60>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fc9c 	bl	800555c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3301      	adds	r3, #1
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b37      	cmp	r3, #55	@ 0x37
 8006c2e:	d9ef      	bls.n	8006c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c30:	480d      	ldr	r0, [pc, #52]	@ (8006c68 <prvInitialiseTaskLists+0x64>)
 8006c32:	f7fe fc93 	bl	800555c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c36:	480d      	ldr	r0, [pc, #52]	@ (8006c6c <prvInitialiseTaskLists+0x68>)
 8006c38:	f7fe fc90 	bl	800555c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c3c:	480c      	ldr	r0, [pc, #48]	@ (8006c70 <prvInitialiseTaskLists+0x6c>)
 8006c3e:	f7fe fc8d 	bl	800555c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c42:	480c      	ldr	r0, [pc, #48]	@ (8006c74 <prvInitialiseTaskLists+0x70>)
 8006c44:	f7fe fc8a 	bl	800555c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c48:	480b      	ldr	r0, [pc, #44]	@ (8006c78 <prvInitialiseTaskLists+0x74>)
 8006c4a:	f7fe fc87 	bl	800555c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <prvInitialiseTaskLists+0x78>)
 8006c50:	4a05      	ldr	r2, [pc, #20]	@ (8006c68 <prvInitialiseTaskLists+0x64>)
 8006c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c54:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <prvInitialiseTaskLists+0x7c>)
 8006c56:	4a05      	ldr	r2, [pc, #20]	@ (8006c6c <prvInitialiseTaskLists+0x68>)
 8006c58:	601a      	str	r2, [r3, #0]
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000928 	.word	0x20000928
 8006c68:	20000d88 	.word	0x20000d88
 8006c6c:	20000d9c 	.word	0x20000d9c
 8006c70:	20000db8 	.word	0x20000db8
 8006c74:	20000dcc 	.word	0x20000dcc
 8006c78:	20000de4 	.word	0x20000de4
 8006c7c:	20000db0 	.word	0x20000db0
 8006c80:	20000db4 	.word	0x20000db4

08006c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c8a:	e019      	b.n	8006cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c8c:	f000 ff0c 	bl	8007aa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c90:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <prvCheckTasksWaitingTermination+0x50>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fce7 	bl	8005670 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <prvCheckTasksWaitingTermination+0x54>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd8 <prvCheckTasksWaitingTermination+0x54>)
 8006caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cb6:	f000 ff29 	bl	8007b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f810 	bl	8006ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e1      	bne.n	8006c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000dcc 	.word	0x20000dcc
 8006cd8:	20000df8 	.word	0x20000df8
 8006cdc:	20000de0 	.word	0x20000de0

08006ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3354      	adds	r3, #84	@ 0x54
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fb1b 	bl	8008328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 f8c1 	bl	8007e88 <vPortFree>
				vPortFree( pxTCB );
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f8be 	bl	8007e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d0c:	e019      	b.n	8006d42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d103      	bne.n	8006d20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f8b5 	bl	8007e88 <vPortFree>
	}
 8006d1e:	e010      	b.n	8006d42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d00b      	beq.n	8006d42 <prvDeleteTCB+0x62>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60fb      	str	r3, [r7, #12]
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <prvDeleteTCB+0x5e>
	}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d52:	4b0c      	ldr	r3, [pc, #48]	@ (8006d84 <prvResetNextTaskUnblockTime+0x38>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <prvResetNextTaskUnblockTime+0x3c>)
 8006d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d64:	e008      	b.n	8006d78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d66:	4b07      	ldr	r3, [pc, #28]	@ (8006d84 <prvResetNextTaskUnblockTime+0x38>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a04      	ldr	r2, [pc, #16]	@ (8006d88 <prvResetNextTaskUnblockTime+0x3c>)
 8006d76:	6013      	str	r3, [r2, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	20000db0 	.word	0x20000db0
 8006d88:	20000e18 	.word	0x20000e18

08006d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d92:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc0 <xTaskGetSchedulerState+0x34>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d102      	bne.n	8006da0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	e008      	b.n	8006db2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da0:	4b08      	ldr	r3, [pc, #32]	@ (8006dc4 <xTaskGetSchedulerState+0x38>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006da8:	2302      	movs	r3, #2
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	e001      	b.n	8006db2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dae:	2300      	movs	r3, #0
 8006db0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006db2:	687b      	ldr	r3, [r7, #4]
	}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20000e04 	.word	0x20000e04
 8006dc4:	20000e20 	.word	0x20000e20

08006dc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d058      	beq.n	8006e90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dde:	4b2f      	ldr	r3, [pc, #188]	@ (8006e9c <xTaskPriorityDisinherit+0xd4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d00b      	beq.n	8006e00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60bb      	str	r3, [r7, #8]
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e24:	1e5a      	subs	r2, r3, #1
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d02c      	beq.n	8006e90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d128      	bne.n	8006e90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fc14 	bl	8005670 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <xTaskPriorityDisinherit+0xd8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d903      	bls.n	8006e70 <xTaskPriorityDisinherit+0xa8>
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea0 <xTaskPriorityDisinherit+0xd8>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <xTaskPriorityDisinherit+0xdc>)
 8006e7e:	441a      	add	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f7fe fb95 	bl	80055b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e90:	697b      	ldr	r3, [r7, #20]
	}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000924 	.word	0x20000924
 8006ea0:	20000e00 	.word	0x20000e00
 8006ea4:	20000928 	.word	0x20000928

08006ea8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006eb6:	f000 fdf7 	bl	8007aa8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006eba:	4b29      	ldr	r3, [pc, #164]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d01c      	beq.n	8006f02 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006ec8:	4b25      	ldr	r3, [pc, #148]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	43d2      	mvns	r2, r2
 8006ed4:	400a      	ands	r2, r1
 8006ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006eda:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eea:	2101      	movs	r1, #1
 8006eec:	6838      	ldr	r0, [r7, #0]
 8006eee:	f000 f8fd 	bl	80070ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <xTaskNotifyWait+0xbc>)
 8006ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006f02:	f000 fe03 	bl	8007b0c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006f06:	f000 fdcf 	bl	8007aa8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006f10:	4b13      	ldr	r3, [pc, #76]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f1c:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d002      	beq.n	8006f30 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e00a      	b.n	8006f46 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006f30:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	43d2      	mvns	r2, r2
 8006f3c:	400a      	ands	r2, r1
 8006f3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <xTaskNotifyWait+0xb8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006f50:	f000 fddc 	bl	8007b0c <vPortExitCritical>

		return xReturn;
 8006f54:	697b      	ldr	r3, [r7, #20]
	}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000924 	.word	0x20000924
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	@ 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <xTaskGenericNotify+0x32>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	61bb      	str	r3, [r7, #24]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006f9e:	f000 fd83 	bl	8007aa8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006fb8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d82e      	bhi.n	8007026 <xTaskGenericNotify+0xbe>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <xTaskGenericNotify+0x68>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	0800704b 	.word	0x0800704b
 8006fd4:	08006fe5 	.word	0x08006fe5
 8006fd8:	08006ff7 	.word	0x08006ff7
 8006fdc:	08007007 	.word	0x08007007
 8006fe0:	08007011 	.word	0x08007011
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8006ff4:	e02c      	b.n	8007050 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007004:	e024      	b.n	8007050 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800700e:	e01f      	b.n	8007050 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007010:	7ffb      	ldrb	r3, [r7, #31]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d004      	beq.n	8007020 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800701e:	e017      	b.n	8007050 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007020:	2300      	movs	r3, #0
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007024:	e014      	b.n	8007050 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007030:	d00d      	beq.n	800704e <xTaskGenericNotify+0xe6>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	617b      	str	r3, [r7, #20]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskGenericNotify+0xde>
					break;
 800704a:	bf00      	nop
 800704c:	e000      	b.n	8007050 <xTaskGenericNotify+0xe8>

					break;
 800704e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d13b      	bne.n	80070ce <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	3304      	adds	r3, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fb08 	bl	8005670 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007064:	4b1d      	ldr	r3, [pc, #116]	@ (80070dc <xTaskGenericNotify+0x174>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d903      	bls.n	8007074 <xTaskGenericNotify+0x10c>
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <xTaskGenericNotify+0x174>)
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a17      	ldr	r2, [pc, #92]	@ (80070e0 <xTaskGenericNotify+0x178>)
 8007082:	441a      	add	r2, r3
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe fa93 	bl	80055b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <xTaskGenericNotify+0x148>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	613b      	str	r3, [r7, #16]
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b4:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <xTaskGenericNotify+0x17c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d907      	bls.n	80070ce <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80070be:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <xTaskGenericNotify+0x180>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80070ce:	f000 fd1d 	bl	8007b0c <vPortExitCritical>

		return xReturn;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3728      	adds	r7, #40	@ 0x28
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000e00 	.word	0x20000e00
 80070e0:	20000928 	.word	0x20000928
 80070e4:	20000924 	.word	0x20000924
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b21      	ldr	r3, [pc, #132]	@ (800717c <prvAddCurrentTaskToDelayedList+0x90>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fc:	4b20      	ldr	r3, [pc, #128]	@ (8007180 <prvAddCurrentTaskToDelayedList+0x94>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fab4 	bl	8005670 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d10a      	bne.n	8007126 <prvAddCurrentTaskToDelayedList+0x3a>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007116:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <prvAddCurrentTaskToDelayedList+0x94>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4819      	ldr	r0, [pc, #100]	@ (8007184 <prvAddCurrentTaskToDelayedList+0x98>)
 8007120:	f7fe fa49 	bl	80055b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007124:	e026      	b.n	8007174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4413      	add	r3, r2
 800712c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800712e:	4b14      	ldr	r3, [pc, #80]	@ (8007180 <prvAddCurrentTaskToDelayedList+0x94>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d209      	bcs.n	8007152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800713e:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b0f      	ldr	r3, [pc, #60]	@ (8007180 <prvAddCurrentTaskToDelayedList+0x94>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe fa57 	bl	80055fe <vListInsert>
}
 8007150:	e010      	b.n	8007174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007152:	4b0e      	ldr	r3, [pc, #56]	@ (800718c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <prvAddCurrentTaskToDelayedList+0x94>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7fe fa4d 	bl	80055fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007164:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d202      	bcs.n	8007174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800716e:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6013      	str	r3, [r2, #0]
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000dfc 	.word	0x20000dfc
 8007180:	20000924 	.word	0x20000924
 8007184:	20000de4 	.word	0x20000de4
 8007188:	20000db4 	.word	0x20000db4
 800718c:	20000db0 	.word	0x20000db0
 8007190:	20000e18 	.word	0x20000e18

08007194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	@ 0x28
 8007198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800719e:	f000 fb13 	bl	80077c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <xTimerCreateTimerTask+0x84>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d021      	beq.n	80071ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071b2:	1d3a      	adds	r2, r7, #4
 80071b4:	f107 0108 	add.w	r1, r7, #8
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe f9b3 	bl	8005528 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	9202      	str	r2, [sp, #8]
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	2302      	movs	r3, #2
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	460a      	mov	r2, r1
 80071d4:	4911      	ldr	r1, [pc, #68]	@ (800721c <xTimerCreateTimerTask+0x88>)
 80071d6:	4812      	ldr	r0, [pc, #72]	@ (8007220 <xTimerCreateTimerTask+0x8c>)
 80071d8:	f7fe ff6e 	bl	80060b8 <xTaskCreateStatic>
 80071dc:	4603      	mov	r3, r0
 80071de:	4a11      	ldr	r2, [pc, #68]	@ (8007224 <xTimerCreateTimerTask+0x90>)
 80071e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071e2:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <xTimerCreateTimerTask+0x90>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071ea:	2301      	movs	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	613b      	str	r3, [r7, #16]
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800720c:	697b      	ldr	r3, [r7, #20]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000e54 	.word	0x20000e54
 800721c:	0800954c 	.word	0x0800954c
 8007220:	08007361 	.word	0x08007361
 8007224:	20000e58 	.word	0x20000e58

08007228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	@ 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <xTimerGenericCommand+0x30>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	623b      	str	r3, [r7, #32]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007258:	4b19      	ldr	r3, [pc, #100]	@ (80072c0 <xTimerGenericCommand+0x98>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02a      	beq.n	80072b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b05      	cmp	r3, #5
 8007270:	dc18      	bgt.n	80072a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007272:	f7ff fd8b 	bl	8006d8c <xTaskGetSchedulerState>
 8007276:	4603      	mov	r3, r0
 8007278:	2b02      	cmp	r3, #2
 800727a:	d109      	bne.n	8007290 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800727c:	4b10      	ldr	r3, [pc, #64]	@ (80072c0 <xTimerGenericCommand+0x98>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	f107 0110 	add.w	r1, r7, #16
 8007284:	2300      	movs	r3, #0
 8007286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007288:	f7fe fb26 	bl	80058d8 <xQueueGenericSend>
 800728c:	6278      	str	r0, [r7, #36]	@ 0x24
 800728e:	e012      	b.n	80072b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007290:	4b0b      	ldr	r3, [pc, #44]	@ (80072c0 <xTimerGenericCommand+0x98>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	f107 0110 	add.w	r1, r7, #16
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	f7fe fb1c 	bl	80058d8 <xQueueGenericSend>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80072a2:	e008      	b.n	80072b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <xTimerGenericCommand+0x98>)
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	f107 0110 	add.w	r1, r7, #16
 80072ac:	2300      	movs	r3, #0
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	f7fe fc14 	bl	8005adc <xQueueGenericSendFromISR>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3728      	adds	r7, #40	@ 0x28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000e54 	.word	0x20000e54

080072c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ce:	4b23      	ldr	r3, [pc, #140]	@ (800735c <prvProcessExpiredTimer+0x98>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3304      	adds	r3, #4
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe f9c7 	bl	8005670 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d023      	beq.n	8007338 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	18d1      	adds	r1, r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	6978      	ldr	r0, [r7, #20]
 80072fe:	f000 f8d5 	bl	80074ac <prvInsertTimerInActiveList>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d020      	beq.n	800734a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007308:	2300      	movs	r3, #0
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	2100      	movs	r1, #0
 8007312:	6978      	ldr	r0, [r7, #20]
 8007314:	f7ff ff88 	bl	8007228 <xTimerGenericCommand>
 8007318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d114      	bne.n	800734a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	6978      	ldr	r0, [r7, #20]
 8007350:	4798      	blx	r3
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000e4c 	.word	0x20000e4c

08007360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007368:	f107 0308 	add.w	r3, r7, #8
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f859 	bl	8007424 <prvGetNextExpireTime>
 8007372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4619      	mov	r1, r3
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f805 	bl	8007388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800737e:	f000 f8d7 	bl	8007530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007382:	bf00      	nop
 8007384:	e7f0      	b.n	8007368 <prvTimerTask+0x8>
	...

08007388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007392:	f7ff f8f5 	bl	8006580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007396:	f107 0308 	add.w	r3, r7, #8
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f866 	bl	800746c <prvSampleTimeNow>
 80073a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d130      	bne.n	800740a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <prvProcessTimerOrBlockTask+0x3c>
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d806      	bhi.n	80073c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073b6:	f7ff f8f1 	bl	800659c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff81 	bl	80072c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073c2:	e024      	b.n	800740e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073ca:	4b13      	ldr	r3, [pc, #76]	@ (8007418 <prvProcessTimerOrBlockTask+0x90>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <prvProcessTimerOrBlockTask+0x50>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e000      	b.n	80073da <prvProcessTimerOrBlockTask+0x52>
 80073d8:	2300      	movs	r3, #0
 80073da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073dc:	4b0f      	ldr	r3, [pc, #60]	@ (800741c <prvProcessTimerOrBlockTask+0x94>)
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	f7fe fe31 	bl	8006050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073ee:	f7ff f8d5 	bl	800659c <xTaskResumeAll>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073f8:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <prvProcessTimerOrBlockTask+0x98>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
}
 8007408:	e001      	b.n	800740e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800740a:	f7ff f8c7 	bl	800659c <xTaskResumeAll>
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000e50 	.word	0x20000e50
 800741c:	20000e54 	.word	0x20000e54
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800742c:	4b0e      	ldr	r3, [pc, #56]	@ (8007468 <prvGetNextExpireTime+0x44>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <prvGetNextExpireTime+0x16>
 8007436:	2201      	movs	r2, #1
 8007438:	e000      	b.n	800743c <prvGetNextExpireTime+0x18>
 800743a:	2200      	movs	r2, #0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007448:	4b07      	ldr	r3, [pc, #28]	@ (8007468 <prvGetNextExpireTime+0x44>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e001      	b.n	8007458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007458:	68fb      	ldr	r3, [r7, #12]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20000e4c 	.word	0x20000e4c

0800746c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007474:	f7ff f930 	bl	80066d8 <xTaskGetTickCount>
 8007478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <prvSampleTimeNow+0x3c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	429a      	cmp	r2, r3
 8007482:	d205      	bcs.n	8007490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007484:	f000 f93a 	bl	80076fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e002      	b.n	8007496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007496:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <prvSampleTimeNow+0x3c>)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800749c:	68fb      	ldr	r3, [r7, #12]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000e5c 	.word	0x20000e5c

080074ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d812      	bhi.n	80074f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d302      	bcc.n	80074e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	e01b      	b.n	800751e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074e6:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <prvInsertTimerInActiveList+0x7c>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3304      	adds	r3, #4
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f7fe f884 	bl	80055fe <vListInsert>
 80074f6:	e012      	b.n	800751e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d206      	bcs.n	800750e <prvInsertTimerInActiveList+0x62>
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e007      	b.n	800751e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800750e:	4b07      	ldr	r3, [pc, #28]	@ (800752c <prvInsertTimerInActiveList+0x80>)
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7fe f870 	bl	80055fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800751e:	697b      	ldr	r3, [r7, #20]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000e50 	.word	0x20000e50
 800752c:	20000e4c 	.word	0x20000e4c

08007530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	@ 0x38
 8007534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007536:	e0ce      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da19      	bge.n	8007572 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800753e:	1d3b      	adds	r3, r7, #4
 8007540:	3304      	adds	r3, #4
 8007542:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	61fb      	str	r3, [r7, #28]
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	e7fd      	b.n	800755e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007568:	6850      	ldr	r0, [r2, #4]
 800756a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800756c:	6892      	ldr	r2, [r2, #8]
 800756e:	4611      	mov	r1, r2
 8007570:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f2c0 80ae 	blt.w	80076d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe f870 	bl	8005670 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007590:	463b      	mov	r3, r7
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff ff6a 	bl	800746c <prvSampleTimeNow>
 8007598:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b09      	cmp	r3, #9
 800759e:	f200 8097 	bhi.w	80076d0 <prvProcessReceivedCommands+0x1a0>
 80075a2:	a201      	add	r2, pc, #4	@ (adr r2, 80075a8 <prvProcessReceivedCommands+0x78>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d1 	.word	0x080075d1
 80075b4:	08007647 	.word	0x08007647
 80075b8:	0800765b 	.word	0x0800765b
 80075bc:	080076a7 	.word	0x080076a7
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075d1 	.word	0x080075d1
 80075c8:	08007647 	.word	0x08007647
 80075cc:	0800765b 	.word	0x0800765b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	18d1      	adds	r1, r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075f0:	f7ff ff5c 	bl	80074ac <prvInsertTimerInActiveList>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06c      	beq.n	80076d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d061      	beq.n	80076d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	441a      	add	r2, r3
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2300      	movs	r3, #0
 800761e:	2100      	movs	r1, #0
 8007620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007622:	f7ff fe01 	bl	8007228 <xTimerGenericCommand>
 8007626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d152      	bne.n	80076d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	61bb      	str	r3, [r7, #24]
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	e7fd      	b.n	8007642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007658:	e03d      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800765a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	617b      	str	r3, [r7, #20]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	18d1      	adds	r1, r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076a0:	f7ff ff04 	bl	80074ac <prvInsertTimerInActiveList>
					break;
 80076a4:	e017      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80076b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b6:	f000 fbe7 	bl	8007e88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076ba:	e00c      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076ce:	e002      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80076d0:	bf00      	nop
 80076d2:	e000      	b.n	80076d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80076d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076d6:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <prvProcessReceivedCommands+0x1c8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	1d39      	adds	r1, r7, #4
 80076dc:	2200      	movs	r2, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fa9a 	bl	8005c18 <xQueueReceive>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f47f af26 	bne.w	8007538 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	3730      	adds	r7, #48	@ 0x30
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000e54 	.word	0x20000e54

080076fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007702:	e049      	b.n	8007798 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007704:	4b2e      	ldr	r3, [pc, #184]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b2c      	ldr	r3, [pc, #176]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3304      	adds	r3, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f7fd ffa7 	bl	8005670 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02f      	beq.n	8007798 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4413      	add	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	429a      	cmp	r2, r3
 8007748:	d90e      	bls.n	8007768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007756:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f7fd ff4c 	bl	80055fe <vListInsert>
 8007766:	e017      	b.n	8007798 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f7ff fd58 	bl	8007228 <xTimerGenericCommand>
 8007778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10b      	bne.n	8007798 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	603b      	str	r3, [r7, #0]
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007798:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1b0      	bne.n	8007704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077a2:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <prvSwitchTimerLists+0xc8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a04      	ldr	r2, [pc, #16]	@ (80077c0 <prvSwitchTimerLists+0xc4>)
 80077ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077b0:	4a04      	ldr	r2, [pc, #16]	@ (80077c4 <prvSwitchTimerLists+0xc8>)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6013      	str	r3, [r2, #0]
}
 80077b6:	bf00      	nop
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000e4c 	.word	0x20000e4c
 80077c4:	20000e50 	.word	0x20000e50

080077c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077ce:	f000 f96b 	bl	8007aa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077d2:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <prvCheckForValidListAndQueue+0x60>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d120      	bne.n	800781c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077da:	4814      	ldr	r0, [pc, #80]	@ (800782c <prvCheckForValidListAndQueue+0x64>)
 80077dc:	f7fd febe 	bl	800555c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077e0:	4813      	ldr	r0, [pc, #76]	@ (8007830 <prvCheckForValidListAndQueue+0x68>)
 80077e2:	f7fd febb 	bl	800555c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077e6:	4b13      	ldr	r3, [pc, #76]	@ (8007834 <prvCheckForValidListAndQueue+0x6c>)
 80077e8:	4a10      	ldr	r2, [pc, #64]	@ (800782c <prvCheckForValidListAndQueue+0x64>)
 80077ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077ec:	4b12      	ldr	r3, [pc, #72]	@ (8007838 <prvCheckForValidListAndQueue+0x70>)
 80077ee:	4a10      	ldr	r2, [pc, #64]	@ (8007830 <prvCheckForValidListAndQueue+0x68>)
 80077f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077f2:	2300      	movs	r3, #0
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4b11      	ldr	r3, [pc, #68]	@ (800783c <prvCheckForValidListAndQueue+0x74>)
 80077f8:	4a11      	ldr	r2, [pc, #68]	@ (8007840 <prvCheckForValidListAndQueue+0x78>)
 80077fa:	2110      	movs	r1, #16
 80077fc:	200a      	movs	r0, #10
 80077fe:	f7fd ffcb 	bl	8005798 <xQueueGenericCreateStatic>
 8007802:	4603      	mov	r3, r0
 8007804:	4a08      	ldr	r2, [pc, #32]	@ (8007828 <prvCheckForValidListAndQueue+0x60>)
 8007806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007808:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <prvCheckForValidListAndQueue+0x60>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <prvCheckForValidListAndQueue+0x60>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	490b      	ldr	r1, [pc, #44]	@ (8007844 <prvCheckForValidListAndQueue+0x7c>)
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fbf0 	bl	8005ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800781c:	f000 f976 	bl	8007b0c <vPortExitCritical>
}
 8007820:	bf00      	nop
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000e54 	.word	0x20000e54
 800782c:	20000e24 	.word	0x20000e24
 8007830:	20000e38 	.word	0x20000e38
 8007834:	20000e4c 	.word	0x20000e4c
 8007838:	20000e50 	.word	0x20000e50
 800783c:	20000f00 	.word	0x20000f00
 8007840:	20000e60 	.word	0x20000e60
 8007844:	08009554 	.word	0x08009554

08007848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3b04      	subs	r3, #4
 8007858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b04      	subs	r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f023 0201 	bic.w	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b04      	subs	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007878:	4a0c      	ldr	r2, [pc, #48]	@ (80078ac <pxPortInitialiseStack+0x64>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3b14      	subs	r3, #20
 8007882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b04      	subs	r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f06f 0202 	mvn.w	r2, #2
 8007896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3b20      	subs	r3, #32
 800789c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	080078b1 	.word	0x080078b1

080078b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078ba:	4b13      	ldr	r3, [pc, #76]	@ (8007908 <prvTaskExitError+0x58>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d00b      	beq.n	80078dc <prvTaskExitError+0x2c>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	e7fd      	b.n	80078d8 <prvTaskExitError+0x28>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60bb      	str	r3, [r7, #8]
}
 80078ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078f0:	bf00      	nop
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0fc      	beq.n	80078f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20000014 	.word	0x20000014
 800790c:	00000000 	.word	0x00000000

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007938:	4808      	ldr	r0, [pc, #32]	@ (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800795a:	bf00      	nop
 800795c:	e000ed08 	.word	0xe000ed08

08007960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007966:	4b47      	ldr	r3, [pc, #284]	@ (8007a84 <xPortStartScheduler+0x124>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a47      	ldr	r2, [pc, #284]	@ (8007a88 <xPortStartScheduler+0x128>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10b      	bne.n	8007988 <xPortStartScheduler+0x28>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007988:	4b3e      	ldr	r3, [pc, #248]	@ (8007a84 <xPortStartScheduler+0x124>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a8c <xPortStartScheduler+0x12c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d10b      	bne.n	80079aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60fb      	str	r3, [r7, #12]
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
 80079a8:	e7fd      	b.n	80079a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079aa:	4b39      	ldr	r3, [pc, #228]	@ (8007a90 <xPortStartScheduler+0x130>)
 80079ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	22ff      	movs	r2, #255	@ 0xff
 80079ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	4b31      	ldr	r3, [pc, #196]	@ (8007a94 <xPortStartScheduler+0x134>)
 80079d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079d2:	4b31      	ldr	r3, [pc, #196]	@ (8007a98 <xPortStartScheduler+0x138>)
 80079d4:	2207      	movs	r2, #7
 80079d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d8:	e009      	b.n	80079ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079da:	4b2f      	ldr	r3, [pc, #188]	@ (8007a98 <xPortStartScheduler+0x138>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3b01      	subs	r3, #1
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <xPortStartScheduler+0x138>)
 80079e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f6:	2b80      	cmp	r3, #128	@ 0x80
 80079f8:	d0ef      	beq.n	80079da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079fa:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <xPortStartScheduler+0x138>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f1c3 0307 	rsb	r3, r3, #7
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d00b      	beq.n	8007a1e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60bb      	str	r3, [r7, #8]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a98 <xPortStartScheduler+0x138>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	4a1c      	ldr	r2, [pc, #112]	@ (8007a98 <xPortStartScheduler+0x138>)
 8007a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a28:	4b1b      	ldr	r3, [pc, #108]	@ (8007a98 <xPortStartScheduler+0x138>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a30:	4a19      	ldr	r2, [pc, #100]	@ (8007a98 <xPortStartScheduler+0x138>)
 8007a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a3c:	4b17      	ldr	r3, [pc, #92]	@ (8007a9c <xPortStartScheduler+0x13c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a16      	ldr	r2, [pc, #88]	@ (8007a9c <xPortStartScheduler+0x13c>)
 8007a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a48:	4b14      	ldr	r3, [pc, #80]	@ (8007a9c <xPortStartScheduler+0x13c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a13      	ldr	r2, [pc, #76]	@ (8007a9c <xPortStartScheduler+0x13c>)
 8007a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a54:	f000 f8da 	bl	8007c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a58:	4b11      	ldr	r3, [pc, #68]	@ (8007aa0 <xPortStartScheduler+0x140>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a5e:	f000 f8f9 	bl	8007c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a62:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <xPortStartScheduler+0x144>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa4 <xPortStartScheduler+0x144>)
 8007a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a6e:	f7ff ff63 	bl	8007938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a72:	f7fe ff0d 	bl	8006890 <vTaskSwitchContext>
	prvTaskExitError();
 8007a76:	f7ff ff1b 	bl	80078b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	e000ed00 	.word	0xe000ed00
 8007a88:	410fc271 	.word	0x410fc271
 8007a8c:	410fc270 	.word	0x410fc270
 8007a90:	e000e400 	.word	0xe000e400
 8007a94:	20000f50 	.word	0x20000f50
 8007a98:	20000f54 	.word	0x20000f54
 8007a9c:	e000ed20 	.word	0xe000ed20
 8007aa0:	20000014 	.word	0x20000014
 8007aa4:	e000ef34 	.word	0xe000ef34

08007aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	607b      	str	r3, [r7, #4]
}
 8007ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ac2:	4b10      	ldr	r3, [pc, #64]	@ (8007b04 <vPortEnterCritical+0x5c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8007b04 <vPortEnterCritical+0x5c>)
 8007aca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007acc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <vPortEnterCritical+0x5c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d110      	bne.n	8007af6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <vPortEnterCritical+0x60>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	603b      	str	r3, [r7, #0]
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	e7fd      	b.n	8007af2 <vPortEnterCritical+0x4a>
	}
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000014 	.word	0x20000014
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b12:	4b12      	ldr	r3, [pc, #72]	@ (8007b5c <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <vPortExitCritical+0x26>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	607b      	str	r3, [r7, #4]
}
 8007b2c:	bf00      	nop
 8007b2e:	bf00      	nop
 8007b30:	e7fd      	b.n	8007b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b32:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <vPortExitCritical+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	4a08      	ldr	r2, [pc, #32]	@ (8007b5c <vPortExitCritical+0x50>)
 8007b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b3c:	4b07      	ldr	r3, [pc, #28]	@ (8007b5c <vPortExitCritical+0x50>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <vPortExitCritical+0x44>
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000014 	.word	0x20000014

08007b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b60:	f3ef 8009 	mrs	r0, PSP
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4b15      	ldr	r3, [pc, #84]	@ (8007bc0 <pxCurrentTCBConst>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f01e 0f10 	tst.w	lr, #16
 8007b70:	bf08      	it	eq
 8007b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b84:	f380 8811 	msr	BASEPRI, r0
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f7fe fe7e 	bl	8006890 <vTaskSwitchContext>
 8007b94:	f04f 0000 	mov.w	r0, #0
 8007b98:	f380 8811 	msr	BASEPRI, r0
 8007b9c:	bc09      	pop	{r0, r3}
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	f01e 0f10 	tst.w	lr, #16
 8007baa:	bf08      	it	eq
 8007bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bb0:	f380 8809 	msr	PSP, r0
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst>:
 8007bc0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007be2:	f7fe fd9b 	bl	800671c <xTaskIncrementTick>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bec:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <xPortSysTickHandler+0x40>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <vPortSetupTimerInterrupt+0x38>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <vPortSetupTimerInterrupt+0x3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	@ (8007c4c <vPortSetupTimerInterrupt+0x40>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	099b      	lsrs	r3, r3, #6
 8007c28:	4a09      	ldr	r2, [pc, #36]	@ (8007c50 <vPortSetupTimerInterrupt+0x44>)
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c2e:	4b04      	ldr	r3, [pc, #16]	@ (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	e000e010 	.word	0xe000e010
 8007c44:	e000e018 	.word	0xe000e018
 8007c48:	20000008 	.word	0x20000008
 8007c4c:	10624dd3 	.word	0x10624dd3
 8007c50:	e000e014 	.word	0xe000e014

08007c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c64 <vPortEnableVFP+0x10>
 8007c58:	6801      	ldr	r1, [r0, #0]
 8007c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c5e:	6001      	str	r1, [r0, #0]
 8007c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c62:	bf00      	nop
 8007c64:	e000ed88 	.word	0xe000ed88

08007c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c6e:	f3ef 8305 	mrs	r3, IPSR
 8007c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d915      	bls.n	8007ca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c7a:	4a18      	ldr	r2, [pc, #96]	@ (8007cdc <vPortValidateInterruptPriority+0x74>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c84:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <vPortValidateInterruptPriority+0x78>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	7afa      	ldrb	r2, [r7, #11]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d20b      	bcs.n	8007ca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	e7fd      	b.n	8007ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce4 <vPortValidateInterruptPriority+0x7c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007cae:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce8 <vPortValidateInterruptPriority+0x80>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d90b      	bls.n	8007cce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	603b      	str	r3, [r7, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vPortValidateInterruptPriority+0x62>
	}
 8007cce:	bf00      	nop
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	e000e3f0 	.word	0xe000e3f0
 8007ce0:	20000f50 	.word	0x20000f50
 8007ce4:	e000ed0c 	.word	0xe000ed0c
 8007ce8:	20000f54 	.word	0x20000f54

08007cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08a      	sub	sp, #40	@ 0x28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cf8:	f7fe fc42 	bl	8006580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8007e70 <pvPortMalloc+0x184>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d04:	f000 f924 	bl	8007f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d08:	4b5a      	ldr	r3, [pc, #360]	@ (8007e74 <pvPortMalloc+0x188>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 8095 	bne.w	8007e40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01e      	beq.n	8007d5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d015      	beq.n	8007d5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f023 0307 	bic.w	r3, r3, #7
 8007d34:	3308      	adds	r3, #8
 8007d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <pvPortMalloc+0x6e>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	617b      	str	r3, [r7, #20]
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	e7fd      	b.n	8007d56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d06f      	beq.n	8007e40 <pvPortMalloc+0x154>
 8007d60:	4b45      	ldr	r3, [pc, #276]	@ (8007e78 <pvPortMalloc+0x18c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d86a      	bhi.n	8007e40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d6a:	4b44      	ldr	r3, [pc, #272]	@ (8007e7c <pvPortMalloc+0x190>)
 8007d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d6e:	4b43      	ldr	r3, [pc, #268]	@ (8007e7c <pvPortMalloc+0x190>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d74:	e004      	b.n	8007d80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d903      	bls.n	8007d92 <pvPortMalloc+0xa6>
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f1      	bne.n	8007d76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d92:	4b37      	ldr	r3, [pc, #220]	@ (8007e70 <pvPortMalloc+0x184>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d051      	beq.n	8007e40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4413      	add	r3, r2
 8007da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	2308      	movs	r3, #8
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d920      	bls.n	8007e00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <pvPortMalloc+0xfc>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	e7fd      	b.n	8007de4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dfa:	69b8      	ldr	r0, [r7, #24]
 8007dfc:	f000 f90a 	bl	8008014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e00:	4b1d      	ldr	r3, [pc, #116]	@ (8007e78 <pvPortMalloc+0x18c>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <pvPortMalloc+0x18c>)
 8007e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e78 <pvPortMalloc+0x18c>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4b1b      	ldr	r3, [pc, #108]	@ (8007e80 <pvPortMalloc+0x194>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d203      	bcs.n	8007e22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e1a:	4b17      	ldr	r3, [pc, #92]	@ (8007e78 <pvPortMalloc+0x18c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <pvPortMalloc+0x194>)
 8007e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4b13      	ldr	r3, [pc, #76]	@ (8007e74 <pvPortMalloc+0x188>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e36:	4b13      	ldr	r3, [pc, #76]	@ (8007e84 <pvPortMalloc+0x198>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	4a11      	ldr	r2, [pc, #68]	@ (8007e84 <pvPortMalloc+0x198>)
 8007e3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e40:	f7fe fbac 	bl	800659c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00b      	beq.n	8007e66 <pvPortMalloc+0x17a>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	60fb      	str	r3, [r7, #12]
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <pvPortMalloc+0x176>
	return pvReturn;
 8007e66:	69fb      	ldr	r3, [r7, #28]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3728      	adds	r7, #40	@ 0x28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20004b60 	.word	0x20004b60
 8007e74:	20004b74 	.word	0x20004b74
 8007e78:	20004b64 	.word	0x20004b64
 8007e7c:	20004b58 	.word	0x20004b58
 8007e80:	20004b68 	.word	0x20004b68
 8007e84:	20004b6c 	.word	0x20004b6c

08007e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d04f      	beq.n	8007f3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	425b      	negs	r3, r3
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	4b25      	ldr	r3, [pc, #148]	@ (8007f44 <vPortFree+0xbc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <vPortFree+0x46>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <vPortFree+0x66>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60bb      	str	r3, [r7, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	4b14      	ldr	r3, [pc, #80]	@ (8007f44 <vPortFree+0xbc>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01e      	beq.n	8007f3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11a      	bne.n	8007f3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	4b0e      	ldr	r3, [pc, #56]	@ (8007f44 <vPortFree+0xbc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	401a      	ands	r2, r3
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f14:	f7fe fb34 	bl	8006580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <vPortFree+0xc0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4413      	add	r3, r2
 8007f22:	4a09      	ldr	r2, [pc, #36]	@ (8007f48 <vPortFree+0xc0>)
 8007f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f26:	6938      	ldr	r0, [r7, #16]
 8007f28:	f000 f874 	bl	8008014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f2c:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <vPortFree+0xc4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a06      	ldr	r2, [pc, #24]	@ (8007f4c <vPortFree+0xc4>)
 8007f34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f36:	f7fe fb31 	bl	800659c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f3a:	bf00      	nop
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20004b74 	.word	0x20004b74
 8007f48:	20004b64 	.word	0x20004b64
 8007f4c:	20004b70 	.word	0x20004b70

08007f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f5c:	4b27      	ldr	r3, [pc, #156]	@ (8007ffc <prvHeapInit+0xac>)
 8007f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00c      	beq.n	8007f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3307      	adds	r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0307 	bic.w	r3, r3, #7
 8007f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ffc <prvHeapInit+0xac>)
 8007f80:	4413      	add	r3, r2
 8007f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f88:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <prvHeapInit+0xb0>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008000 <prvHeapInit+0xb0>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0307 	bic.w	r3, r3, #7
 8007faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <prvHeapInit+0xb4>)
 8007fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fb2:	4b14      	ldr	r3, [pc, #80]	@ (8008004 <prvHeapInit+0xb4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fba:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <prvHeapInit+0xb4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <prvHeapInit+0xb4>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8008008 <prvHeapInit+0xb8>)
 8007fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a09      	ldr	r2, [pc, #36]	@ (800800c <prvHeapInit+0xbc>)
 8007fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fe8:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <prvHeapInit+0xc0>)
 8007fea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fee:	601a      	str	r2, [r3, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	20000f58 	.word	0x20000f58
 8008000:	20004b58 	.word	0x20004b58
 8008004:	20004b60 	.word	0x20004b60
 8008008:	20004b68 	.word	0x20004b68
 800800c:	20004b64 	.word	0x20004b64
 8008010:	20004b74 	.word	0x20004b74

08008014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800801c:	4b28      	ldr	r3, [pc, #160]	@ (80080c0 <prvInsertBlockIntoFreeList+0xac>)
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e002      	b.n	8008028 <prvInsertBlockIntoFreeList+0x14>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d8f7      	bhi.n	8008022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d108      	bne.n	8008056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	441a      	add	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	441a      	add	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d118      	bne.n	800809c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d00d      	beq.n	8008092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e008      	b.n	80080a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e003      	b.n	80080a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d002      	beq.n	80080b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20004b58 	.word	0x20004b58
 80080c4:	20004b60 	.word	0x20004b60

080080c8 <std>:
 80080c8:	2300      	movs	r3, #0
 80080ca:	b510      	push	{r4, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	e9c0 3300 	strd	r3, r3, [r0]
 80080d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080d6:	6083      	str	r3, [r0, #8]
 80080d8:	8181      	strh	r1, [r0, #12]
 80080da:	6643      	str	r3, [r0, #100]	@ 0x64
 80080dc:	81c2      	strh	r2, [r0, #14]
 80080de:	6183      	str	r3, [r0, #24]
 80080e0:	4619      	mov	r1, r3
 80080e2:	2208      	movs	r2, #8
 80080e4:	305c      	adds	r0, #92	@ 0x5c
 80080e6:	f000 f906 	bl	80082f6 <memset>
 80080ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <std+0x58>)
 80080ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <std+0x5c>)
 80080f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <std+0x60>)
 80080f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <std+0x64>)
 80080f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <std+0x68>)
 80080fc:	6224      	str	r4, [r4, #32]
 80080fe:	429c      	cmp	r4, r3
 8008100:	d006      	beq.n	8008110 <std+0x48>
 8008102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008106:	4294      	cmp	r4, r2
 8008108:	d002      	beq.n	8008110 <std+0x48>
 800810a:	33d0      	adds	r3, #208	@ 0xd0
 800810c:	429c      	cmp	r4, r3
 800810e:	d105      	bne.n	800811c <std+0x54>
 8008110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008118:	f000 b9bc 	b.w	8008494 <__retarget_lock_init_recursive>
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	08008271 	.word	0x08008271
 8008124:	08008293 	.word	0x08008293
 8008128:	080082cb 	.word	0x080082cb
 800812c:	080082ef 	.word	0x080082ef
 8008130:	20004b78 	.word	0x20004b78

08008134 <stdio_exit_handler>:
 8008134:	4a02      	ldr	r2, [pc, #8]	@ (8008140 <stdio_exit_handler+0xc>)
 8008136:	4903      	ldr	r1, [pc, #12]	@ (8008144 <stdio_exit_handler+0x10>)
 8008138:	4803      	ldr	r0, [pc, #12]	@ (8008148 <stdio_exit_handler+0x14>)
 800813a:	f000 b869 	b.w	8008210 <_fwalk_sglue>
 800813e:	bf00      	nop
 8008140:	20000018 	.word	0x20000018
 8008144:	08008d51 	.word	0x08008d51
 8008148:	20000028 	.word	0x20000028

0800814c <cleanup_stdio>:
 800814c:	6841      	ldr	r1, [r0, #4]
 800814e:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <cleanup_stdio+0x34>)
 8008150:	4299      	cmp	r1, r3
 8008152:	b510      	push	{r4, lr}
 8008154:	4604      	mov	r4, r0
 8008156:	d001      	beq.n	800815c <cleanup_stdio+0x10>
 8008158:	f000 fdfa 	bl	8008d50 <_fflush_r>
 800815c:	68a1      	ldr	r1, [r4, #8]
 800815e:	4b09      	ldr	r3, [pc, #36]	@ (8008184 <cleanup_stdio+0x38>)
 8008160:	4299      	cmp	r1, r3
 8008162:	d002      	beq.n	800816a <cleanup_stdio+0x1e>
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fdf3 	bl	8008d50 <_fflush_r>
 800816a:	68e1      	ldr	r1, [r4, #12]
 800816c:	4b06      	ldr	r3, [pc, #24]	@ (8008188 <cleanup_stdio+0x3c>)
 800816e:	4299      	cmp	r1, r3
 8008170:	d004      	beq.n	800817c <cleanup_stdio+0x30>
 8008172:	4620      	mov	r0, r4
 8008174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008178:	f000 bdea 	b.w	8008d50 <_fflush_r>
 800817c:	bd10      	pop	{r4, pc}
 800817e:	bf00      	nop
 8008180:	20004b78 	.word	0x20004b78
 8008184:	20004be0 	.word	0x20004be0
 8008188:	20004c48 	.word	0x20004c48

0800818c <global_stdio_init.part.0>:
 800818c:	b510      	push	{r4, lr}
 800818e:	4b0b      	ldr	r3, [pc, #44]	@ (80081bc <global_stdio_init.part.0+0x30>)
 8008190:	4c0b      	ldr	r4, [pc, #44]	@ (80081c0 <global_stdio_init.part.0+0x34>)
 8008192:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <global_stdio_init.part.0+0x38>)
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	4620      	mov	r0, r4
 8008198:	2200      	movs	r2, #0
 800819a:	2104      	movs	r1, #4
 800819c:	f7ff ff94 	bl	80080c8 <std>
 80081a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081a4:	2201      	movs	r2, #1
 80081a6:	2109      	movs	r1, #9
 80081a8:	f7ff ff8e 	bl	80080c8 <std>
 80081ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081b0:	2202      	movs	r2, #2
 80081b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b6:	2112      	movs	r1, #18
 80081b8:	f7ff bf86 	b.w	80080c8 <std>
 80081bc:	20004cb0 	.word	0x20004cb0
 80081c0:	20004b78 	.word	0x20004b78
 80081c4:	08008135 	.word	0x08008135

080081c8 <__sfp_lock_acquire>:
 80081c8:	4801      	ldr	r0, [pc, #4]	@ (80081d0 <__sfp_lock_acquire+0x8>)
 80081ca:	f000 b964 	b.w	8008496 <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20004cb9 	.word	0x20004cb9

080081d4 <__sfp_lock_release>:
 80081d4:	4801      	ldr	r0, [pc, #4]	@ (80081dc <__sfp_lock_release+0x8>)
 80081d6:	f000 b95f 	b.w	8008498 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20004cb9 	.word	0x20004cb9

080081e0 <__sinit>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	f7ff fff0 	bl	80081c8 <__sfp_lock_acquire>
 80081e8:	6a23      	ldr	r3, [r4, #32]
 80081ea:	b11b      	cbz	r3, 80081f4 <__sinit+0x14>
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f7ff bff0 	b.w	80081d4 <__sfp_lock_release>
 80081f4:	4b04      	ldr	r3, [pc, #16]	@ (8008208 <__sinit+0x28>)
 80081f6:	6223      	str	r3, [r4, #32]
 80081f8:	4b04      	ldr	r3, [pc, #16]	@ (800820c <__sinit+0x2c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1f5      	bne.n	80081ec <__sinit+0xc>
 8008200:	f7ff ffc4 	bl	800818c <global_stdio_init.part.0>
 8008204:	e7f2      	b.n	80081ec <__sinit+0xc>
 8008206:	bf00      	nop
 8008208:	0800814d 	.word	0x0800814d
 800820c:	20004cb0 	.word	0x20004cb0

08008210 <_fwalk_sglue>:
 8008210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008214:	4607      	mov	r7, r0
 8008216:	4688      	mov	r8, r1
 8008218:	4614      	mov	r4, r2
 800821a:	2600      	movs	r6, #0
 800821c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008220:	f1b9 0901 	subs.w	r9, r9, #1
 8008224:	d505      	bpl.n	8008232 <_fwalk_sglue+0x22>
 8008226:	6824      	ldr	r4, [r4, #0]
 8008228:	2c00      	cmp	r4, #0
 800822a:	d1f7      	bne.n	800821c <_fwalk_sglue+0xc>
 800822c:	4630      	mov	r0, r6
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d907      	bls.n	8008248 <_fwalk_sglue+0x38>
 8008238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800823c:	3301      	adds	r3, #1
 800823e:	d003      	beq.n	8008248 <_fwalk_sglue+0x38>
 8008240:	4629      	mov	r1, r5
 8008242:	4638      	mov	r0, r7
 8008244:	47c0      	blx	r8
 8008246:	4306      	orrs	r6, r0
 8008248:	3568      	adds	r5, #104	@ 0x68
 800824a:	e7e9      	b.n	8008220 <_fwalk_sglue+0x10>

0800824c <iprintf>:
 800824c:	b40f      	push	{r0, r1, r2, r3}
 800824e:	b507      	push	{r0, r1, r2, lr}
 8008250:	4906      	ldr	r1, [pc, #24]	@ (800826c <iprintf+0x20>)
 8008252:	ab04      	add	r3, sp, #16
 8008254:	6808      	ldr	r0, [r1, #0]
 8008256:	f853 2b04 	ldr.w	r2, [r3], #4
 800825a:	6881      	ldr	r1, [r0, #8]
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	f000 fa4d 	bl	80086fc <_vfiprintf_r>
 8008262:	b003      	add	sp, #12
 8008264:	f85d eb04 	ldr.w	lr, [sp], #4
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr
 800826c:	20000024 	.word	0x20000024

08008270 <__sread>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	f000 f8be 	bl	80083f8 <_read_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	bfab      	itete	ge
 8008280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008282:	89a3      	ldrhlt	r3, [r4, #12]
 8008284:	181b      	addge	r3, r3, r0
 8008286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800828a:	bfac      	ite	ge
 800828c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800828e:	81a3      	strhlt	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__swrite>:
 8008292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	461f      	mov	r7, r3
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	05db      	lsls	r3, r3, #23
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4616      	mov	r6, r2
 80082a2:	d505      	bpl.n	80082b0 <__swrite+0x1e>
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	2302      	movs	r3, #2
 80082aa:	2200      	movs	r2, #0
 80082ac:	f000 f892 	bl	80083d4 <_lseek_r>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	f000 b8a9 	b.w	800841c <_write_r>

080082ca <__sseek>:
 80082ca:	b510      	push	{r4, lr}
 80082cc:	460c      	mov	r4, r1
 80082ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d2:	f000 f87f 	bl	80083d4 <_lseek_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	bf15      	itete	ne
 80082dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082e6:	81a3      	strheq	r3, [r4, #12]
 80082e8:	bf18      	it	ne
 80082ea:	81a3      	strhne	r3, [r4, #12]
 80082ec:	bd10      	pop	{r4, pc}

080082ee <__sclose>:
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 b809 	b.w	8008308 <_close_r>

080082f6 <memset>:
 80082f6:	4402      	add	r2, r0
 80082f8:	4603      	mov	r3, r0
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d100      	bne.n	8008300 <memset+0xa>
 80082fe:	4770      	bx	lr
 8008300:	f803 1b01 	strb.w	r1, [r3], #1
 8008304:	e7f9      	b.n	80082fa <memset+0x4>
	...

08008308 <_close_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	@ (8008324 <_close_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f9 feb7 	bl	8002086 <_close>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_close_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_close_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	20004cb4 	.word	0x20004cb4

08008328 <_reclaim_reent>:
 8008328:	4b29      	ldr	r3, [pc, #164]	@ (80083d0 <_reclaim_reent+0xa8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4283      	cmp	r3, r0
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	4604      	mov	r4, r0
 8008332:	d04b      	beq.n	80083cc <_reclaim_reent+0xa4>
 8008334:	69c3      	ldr	r3, [r0, #28]
 8008336:	b1ab      	cbz	r3, 8008364 <_reclaim_reent+0x3c>
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	b16b      	cbz	r3, 8008358 <_reclaim_reent+0x30>
 800833c:	2500      	movs	r5, #0
 800833e:	69e3      	ldr	r3, [r4, #28]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	5959      	ldr	r1, [r3, r5]
 8008344:	2900      	cmp	r1, #0
 8008346:	d13b      	bne.n	80083c0 <_reclaim_reent+0x98>
 8008348:	3504      	adds	r5, #4
 800834a:	2d80      	cmp	r5, #128	@ 0x80
 800834c:	d1f7      	bne.n	800833e <_reclaim_reent+0x16>
 800834e:	69e3      	ldr	r3, [r4, #28]
 8008350:	4620      	mov	r0, r4
 8008352:	68d9      	ldr	r1, [r3, #12]
 8008354:	f000 f8b0 	bl	80084b8 <_free_r>
 8008358:	69e3      	ldr	r3, [r4, #28]
 800835a:	6819      	ldr	r1, [r3, #0]
 800835c:	b111      	cbz	r1, 8008364 <_reclaim_reent+0x3c>
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f8aa 	bl	80084b8 <_free_r>
 8008364:	6961      	ldr	r1, [r4, #20]
 8008366:	b111      	cbz	r1, 800836e <_reclaim_reent+0x46>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 f8a5 	bl	80084b8 <_free_r>
 800836e:	69e1      	ldr	r1, [r4, #28]
 8008370:	b111      	cbz	r1, 8008378 <_reclaim_reent+0x50>
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f8a0 	bl	80084b8 <_free_r>
 8008378:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800837a:	b111      	cbz	r1, 8008382 <_reclaim_reent+0x5a>
 800837c:	4620      	mov	r0, r4
 800837e:	f000 f89b 	bl	80084b8 <_free_r>
 8008382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008384:	b111      	cbz	r1, 800838c <_reclaim_reent+0x64>
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f896 	bl	80084b8 <_free_r>
 800838c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800838e:	b111      	cbz	r1, 8008396 <_reclaim_reent+0x6e>
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f891 	bl	80084b8 <_free_r>
 8008396:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008398:	b111      	cbz	r1, 80083a0 <_reclaim_reent+0x78>
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f88c 	bl	80084b8 <_free_r>
 80083a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083a2:	b111      	cbz	r1, 80083aa <_reclaim_reent+0x82>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f887 	bl	80084b8 <_free_r>
 80083aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083ac:	b111      	cbz	r1, 80083b4 <_reclaim_reent+0x8c>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f882 	bl	80084b8 <_free_r>
 80083b4:	6a23      	ldr	r3, [r4, #32]
 80083b6:	b14b      	cbz	r3, 80083cc <_reclaim_reent+0xa4>
 80083b8:	4620      	mov	r0, r4
 80083ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083be:	4718      	bx	r3
 80083c0:	680e      	ldr	r6, [r1, #0]
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f878 	bl	80084b8 <_free_r>
 80083c8:	4631      	mov	r1, r6
 80083ca:	e7bb      	b.n	8008344 <_reclaim_reent+0x1c>
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	bf00      	nop
 80083d0:	20000024 	.word	0x20000024

080083d4 <_lseek_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	@ (80083f4 <_lseek_r+0x20>)
 80083d8:	4604      	mov	r4, r0
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	602a      	str	r2, [r5, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7f9 fe76 	bl	80020d4 <_lseek>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_lseek_r+0x1e>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_lseek_r+0x1e>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20004cb4 	.word	0x20004cb4

080083f8 <_read_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	@ (8008418 <_read_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7f9 fe04 	bl	8002014 <_read>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_read_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_read_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	20004cb4 	.word	0x20004cb4

0800841c <_write_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_write_r+0x20>)
 8008420:	4604      	mov	r4, r0
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	2200      	movs	r2, #0
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f7f9 fe0f 	bl	800204e <_write>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_write_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_write_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20004cb4 	.word	0x20004cb4

08008440 <__errno>:
 8008440:	4b01      	ldr	r3, [pc, #4]	@ (8008448 <__errno+0x8>)
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000024 	.word	0x20000024

0800844c <__libc_init_array>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4d0d      	ldr	r5, [pc, #52]	@ (8008484 <__libc_init_array+0x38>)
 8008450:	4c0d      	ldr	r4, [pc, #52]	@ (8008488 <__libc_init_array+0x3c>)
 8008452:	1b64      	subs	r4, r4, r5
 8008454:	10a4      	asrs	r4, r4, #2
 8008456:	2600      	movs	r6, #0
 8008458:	42a6      	cmp	r6, r4
 800845a:	d109      	bne.n	8008470 <__libc_init_array+0x24>
 800845c:	4d0b      	ldr	r5, [pc, #44]	@ (800848c <__libc_init_array+0x40>)
 800845e:	4c0c      	ldr	r4, [pc, #48]	@ (8008490 <__libc_init_array+0x44>)
 8008460:	f001 f832 	bl	80094c8 <_init>
 8008464:	1b64      	subs	r4, r4, r5
 8008466:	10a4      	asrs	r4, r4, #2
 8008468:	2600      	movs	r6, #0
 800846a:	42a6      	cmp	r6, r4
 800846c:	d105      	bne.n	800847a <__libc_init_array+0x2e>
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f855 3b04 	ldr.w	r3, [r5], #4
 8008474:	4798      	blx	r3
 8008476:	3601      	adds	r6, #1
 8008478:	e7ee      	b.n	8008458 <__libc_init_array+0xc>
 800847a:	f855 3b04 	ldr.w	r3, [r5], #4
 800847e:	4798      	blx	r3
 8008480:	3601      	adds	r6, #1
 8008482:	e7f2      	b.n	800846a <__libc_init_array+0x1e>
 8008484:	08009698 	.word	0x08009698
 8008488:	08009698 	.word	0x08009698
 800848c:	08009698 	.word	0x08009698
 8008490:	0800969c 	.word	0x0800969c

08008494 <__retarget_lock_init_recursive>:
 8008494:	4770      	bx	lr

08008496 <__retarget_lock_acquire_recursive>:
 8008496:	4770      	bx	lr

08008498 <__retarget_lock_release_recursive>:
 8008498:	4770      	bx	lr

0800849a <memcpy>:
 800849a:	440a      	add	r2, r1
 800849c:	4291      	cmp	r1, r2
 800849e:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a2:	d100      	bne.n	80084a6 <memcpy+0xc>
 80084a4:	4770      	bx	lr
 80084a6:	b510      	push	{r4, lr}
 80084a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b0:	4291      	cmp	r1, r2
 80084b2:	d1f9      	bne.n	80084a8 <memcpy+0xe>
 80084b4:	bd10      	pop	{r4, pc}
	...

080084b8 <_free_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4605      	mov	r5, r0
 80084bc:	2900      	cmp	r1, #0
 80084be:	d041      	beq.n	8008544 <_free_r+0x8c>
 80084c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c4:	1f0c      	subs	r4, r1, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfb8      	it	lt
 80084ca:	18e4      	addlt	r4, r4, r3
 80084cc:	f000 f8e0 	bl	8008690 <__malloc_lock>
 80084d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <_free_r+0x90>)
 80084d2:	6813      	ldr	r3, [r2, #0]
 80084d4:	b933      	cbnz	r3, 80084e4 <_free_r+0x2c>
 80084d6:	6063      	str	r3, [r4, #4]
 80084d8:	6014      	str	r4, [r2, #0]
 80084da:	4628      	mov	r0, r5
 80084dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e0:	f000 b8dc 	b.w	800869c <__malloc_unlock>
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d908      	bls.n	80084fa <_free_r+0x42>
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	1821      	adds	r1, r4, r0
 80084ec:	428b      	cmp	r3, r1
 80084ee:	bf01      	itttt	eq
 80084f0:	6819      	ldreq	r1, [r3, #0]
 80084f2:	685b      	ldreq	r3, [r3, #4]
 80084f4:	1809      	addeq	r1, r1, r0
 80084f6:	6021      	streq	r1, [r4, #0]
 80084f8:	e7ed      	b.n	80084d6 <_free_r+0x1e>
 80084fa:	461a      	mov	r2, r3
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b10b      	cbz	r3, 8008504 <_free_r+0x4c>
 8008500:	42a3      	cmp	r3, r4
 8008502:	d9fa      	bls.n	80084fa <_free_r+0x42>
 8008504:	6811      	ldr	r1, [r2, #0]
 8008506:	1850      	adds	r0, r2, r1
 8008508:	42a0      	cmp	r0, r4
 800850a:	d10b      	bne.n	8008524 <_free_r+0x6c>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	4401      	add	r1, r0
 8008510:	1850      	adds	r0, r2, r1
 8008512:	4283      	cmp	r3, r0
 8008514:	6011      	str	r1, [r2, #0]
 8008516:	d1e0      	bne.n	80084da <_free_r+0x22>
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	6053      	str	r3, [r2, #4]
 800851e:	4408      	add	r0, r1
 8008520:	6010      	str	r0, [r2, #0]
 8008522:	e7da      	b.n	80084da <_free_r+0x22>
 8008524:	d902      	bls.n	800852c <_free_r+0x74>
 8008526:	230c      	movs	r3, #12
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	e7d6      	b.n	80084da <_free_r+0x22>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	1821      	adds	r1, r4, r0
 8008530:	428b      	cmp	r3, r1
 8008532:	bf04      	itt	eq
 8008534:	6819      	ldreq	r1, [r3, #0]
 8008536:	685b      	ldreq	r3, [r3, #4]
 8008538:	6063      	str	r3, [r4, #4]
 800853a:	bf04      	itt	eq
 800853c:	1809      	addeq	r1, r1, r0
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	6054      	str	r4, [r2, #4]
 8008542:	e7ca      	b.n	80084da <_free_r+0x22>
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	20004cc0 	.word	0x20004cc0

0800854c <sbrk_aligned>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	4e0f      	ldr	r6, [pc, #60]	@ (800858c <sbrk_aligned+0x40>)
 8008550:	460c      	mov	r4, r1
 8008552:	6831      	ldr	r1, [r6, #0]
 8008554:	4605      	mov	r5, r0
 8008556:	b911      	cbnz	r1, 800855e <sbrk_aligned+0x12>
 8008558:	f000 fcb6 	bl	8008ec8 <_sbrk_r>
 800855c:	6030      	str	r0, [r6, #0]
 800855e:	4621      	mov	r1, r4
 8008560:	4628      	mov	r0, r5
 8008562:	f000 fcb1 	bl	8008ec8 <_sbrk_r>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d103      	bne.n	8008572 <sbrk_aligned+0x26>
 800856a:	f04f 34ff 	mov.w	r4, #4294967295
 800856e:	4620      	mov	r0, r4
 8008570:	bd70      	pop	{r4, r5, r6, pc}
 8008572:	1cc4      	adds	r4, r0, #3
 8008574:	f024 0403 	bic.w	r4, r4, #3
 8008578:	42a0      	cmp	r0, r4
 800857a:	d0f8      	beq.n	800856e <sbrk_aligned+0x22>
 800857c:	1a21      	subs	r1, r4, r0
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fca2 	bl	8008ec8 <_sbrk_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d1f2      	bne.n	800856e <sbrk_aligned+0x22>
 8008588:	e7ef      	b.n	800856a <sbrk_aligned+0x1e>
 800858a:	bf00      	nop
 800858c:	20004cbc 	.word	0x20004cbc

08008590 <_malloc_r>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	1ccd      	adds	r5, r1, #3
 8008596:	f025 0503 	bic.w	r5, r5, #3
 800859a:	3508      	adds	r5, #8
 800859c:	2d0c      	cmp	r5, #12
 800859e:	bf38      	it	cc
 80085a0:	250c      	movcc	r5, #12
 80085a2:	2d00      	cmp	r5, #0
 80085a4:	4606      	mov	r6, r0
 80085a6:	db01      	blt.n	80085ac <_malloc_r+0x1c>
 80085a8:	42a9      	cmp	r1, r5
 80085aa:	d904      	bls.n	80085b6 <_malloc_r+0x26>
 80085ac:	230c      	movs	r3, #12
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	2000      	movs	r0, #0
 80085b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800868c <_malloc_r+0xfc>
 80085ba:	f000 f869 	bl	8008690 <__malloc_lock>
 80085be:	f8d8 3000 	ldr.w	r3, [r8]
 80085c2:	461c      	mov	r4, r3
 80085c4:	bb44      	cbnz	r4, 8008618 <_malloc_r+0x88>
 80085c6:	4629      	mov	r1, r5
 80085c8:	4630      	mov	r0, r6
 80085ca:	f7ff ffbf 	bl	800854c <sbrk_aligned>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	4604      	mov	r4, r0
 80085d2:	d158      	bne.n	8008686 <_malloc_r+0xf6>
 80085d4:	f8d8 4000 	ldr.w	r4, [r8]
 80085d8:	4627      	mov	r7, r4
 80085da:	2f00      	cmp	r7, #0
 80085dc:	d143      	bne.n	8008666 <_malloc_r+0xd6>
 80085de:	2c00      	cmp	r4, #0
 80085e0:	d04b      	beq.n	800867a <_malloc_r+0xea>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	4639      	mov	r1, r7
 80085e6:	4630      	mov	r0, r6
 80085e8:	eb04 0903 	add.w	r9, r4, r3
 80085ec:	f000 fc6c 	bl	8008ec8 <_sbrk_r>
 80085f0:	4581      	cmp	r9, r0
 80085f2:	d142      	bne.n	800867a <_malloc_r+0xea>
 80085f4:	6821      	ldr	r1, [r4, #0]
 80085f6:	1a6d      	subs	r5, r5, r1
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff ffa6 	bl	800854c <sbrk_aligned>
 8008600:	3001      	adds	r0, #1
 8008602:	d03a      	beq.n	800867a <_malloc_r+0xea>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	442b      	add	r3, r5
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	f8d8 3000 	ldr.w	r3, [r8]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	bb62      	cbnz	r2, 800866c <_malloc_r+0xdc>
 8008612:	f8c8 7000 	str.w	r7, [r8]
 8008616:	e00f      	b.n	8008638 <_malloc_r+0xa8>
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	1b52      	subs	r2, r2, r5
 800861c:	d420      	bmi.n	8008660 <_malloc_r+0xd0>
 800861e:	2a0b      	cmp	r2, #11
 8008620:	d917      	bls.n	8008652 <_malloc_r+0xc2>
 8008622:	1961      	adds	r1, r4, r5
 8008624:	42a3      	cmp	r3, r4
 8008626:	6025      	str	r5, [r4, #0]
 8008628:	bf18      	it	ne
 800862a:	6059      	strne	r1, [r3, #4]
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	bf08      	it	eq
 8008630:	f8c8 1000 	streq.w	r1, [r8]
 8008634:	5162      	str	r2, [r4, r5]
 8008636:	604b      	str	r3, [r1, #4]
 8008638:	4630      	mov	r0, r6
 800863a:	f000 f82f 	bl	800869c <__malloc_unlock>
 800863e:	f104 000b 	add.w	r0, r4, #11
 8008642:	1d23      	adds	r3, r4, #4
 8008644:	f020 0007 	bic.w	r0, r0, #7
 8008648:	1ac2      	subs	r2, r0, r3
 800864a:	bf1c      	itt	ne
 800864c:	1a1b      	subne	r3, r3, r0
 800864e:	50a3      	strne	r3, [r4, r2]
 8008650:	e7af      	b.n	80085b2 <_malloc_r+0x22>
 8008652:	6862      	ldr	r2, [r4, #4]
 8008654:	42a3      	cmp	r3, r4
 8008656:	bf0c      	ite	eq
 8008658:	f8c8 2000 	streq.w	r2, [r8]
 800865c:	605a      	strne	r2, [r3, #4]
 800865e:	e7eb      	b.n	8008638 <_malloc_r+0xa8>
 8008660:	4623      	mov	r3, r4
 8008662:	6864      	ldr	r4, [r4, #4]
 8008664:	e7ae      	b.n	80085c4 <_malloc_r+0x34>
 8008666:	463c      	mov	r4, r7
 8008668:	687f      	ldr	r7, [r7, #4]
 800866a:	e7b6      	b.n	80085da <_malloc_r+0x4a>
 800866c:	461a      	mov	r2, r3
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	42a3      	cmp	r3, r4
 8008672:	d1fb      	bne.n	800866c <_malloc_r+0xdc>
 8008674:	2300      	movs	r3, #0
 8008676:	6053      	str	r3, [r2, #4]
 8008678:	e7de      	b.n	8008638 <_malloc_r+0xa8>
 800867a:	230c      	movs	r3, #12
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	4630      	mov	r0, r6
 8008680:	f000 f80c 	bl	800869c <__malloc_unlock>
 8008684:	e794      	b.n	80085b0 <_malloc_r+0x20>
 8008686:	6005      	str	r5, [r0, #0]
 8008688:	e7d6      	b.n	8008638 <_malloc_r+0xa8>
 800868a:	bf00      	nop
 800868c:	20004cc0 	.word	0x20004cc0

08008690 <__malloc_lock>:
 8008690:	4801      	ldr	r0, [pc, #4]	@ (8008698 <__malloc_lock+0x8>)
 8008692:	f7ff bf00 	b.w	8008496 <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	20004cb8 	.word	0x20004cb8

0800869c <__malloc_unlock>:
 800869c:	4801      	ldr	r0, [pc, #4]	@ (80086a4 <__malloc_unlock+0x8>)
 800869e:	f7ff befb 	b.w	8008498 <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	20004cb8 	.word	0x20004cb8

080086a8 <__sfputc_r>:
 80086a8:	6893      	ldr	r3, [r2, #8]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	b410      	push	{r4}
 80086b0:	6093      	str	r3, [r2, #8]
 80086b2:	da08      	bge.n	80086c6 <__sfputc_r+0x1e>
 80086b4:	6994      	ldr	r4, [r2, #24]
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	db01      	blt.n	80086be <__sfputc_r+0x16>
 80086ba:	290a      	cmp	r1, #10
 80086bc:	d103      	bne.n	80086c6 <__sfputc_r+0x1e>
 80086be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c2:	f000 bb6d 	b.w	8008da0 <__swbuf_r>
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	1c58      	adds	r0, r3, #1
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	7019      	strb	r1, [r3, #0]
 80086ce:	4608      	mov	r0, r1
 80086d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <__sfputs_r>:
 80086d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d8:	4606      	mov	r6, r0
 80086da:	460f      	mov	r7, r1
 80086dc:	4614      	mov	r4, r2
 80086de:	18d5      	adds	r5, r2, r3
 80086e0:	42ac      	cmp	r4, r5
 80086e2:	d101      	bne.n	80086e8 <__sfputs_r+0x12>
 80086e4:	2000      	movs	r0, #0
 80086e6:	e007      	b.n	80086f8 <__sfputs_r+0x22>
 80086e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ec:	463a      	mov	r2, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff ffda 	bl	80086a8 <__sfputc_r>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d1f3      	bne.n	80086e0 <__sfputs_r+0xa>
 80086f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086fc <_vfiprintf_r>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	460d      	mov	r5, r1
 8008702:	b09d      	sub	sp, #116	@ 0x74
 8008704:	4614      	mov	r4, r2
 8008706:	4698      	mov	r8, r3
 8008708:	4606      	mov	r6, r0
 800870a:	b118      	cbz	r0, 8008714 <_vfiprintf_r+0x18>
 800870c:	6a03      	ldr	r3, [r0, #32]
 800870e:	b90b      	cbnz	r3, 8008714 <_vfiprintf_r+0x18>
 8008710:	f7ff fd66 	bl	80081e0 <__sinit>
 8008714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008716:	07d9      	lsls	r1, r3, #31
 8008718:	d405      	bmi.n	8008726 <_vfiprintf_r+0x2a>
 800871a:	89ab      	ldrh	r3, [r5, #12]
 800871c:	059a      	lsls	r2, r3, #22
 800871e:	d402      	bmi.n	8008726 <_vfiprintf_r+0x2a>
 8008720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008722:	f7ff feb8 	bl	8008496 <__retarget_lock_acquire_recursive>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	071b      	lsls	r3, r3, #28
 800872a:	d501      	bpl.n	8008730 <_vfiprintf_r+0x34>
 800872c:	692b      	ldr	r3, [r5, #16]
 800872e:	b99b      	cbnz	r3, 8008758 <_vfiprintf_r+0x5c>
 8008730:	4629      	mov	r1, r5
 8008732:	4630      	mov	r0, r6
 8008734:	f000 fb72 	bl	8008e1c <__swsetup_r>
 8008738:	b170      	cbz	r0, 8008758 <_vfiprintf_r+0x5c>
 800873a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800873c:	07dc      	lsls	r4, r3, #31
 800873e:	d504      	bpl.n	800874a <_vfiprintf_r+0x4e>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	b01d      	add	sp, #116	@ 0x74
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	0598      	lsls	r0, r3, #22
 800874e:	d4f7      	bmi.n	8008740 <_vfiprintf_r+0x44>
 8008750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008752:	f7ff fea1 	bl	8008498 <__retarget_lock_release_recursive>
 8008756:	e7f3      	b.n	8008740 <_vfiprintf_r+0x44>
 8008758:	2300      	movs	r3, #0
 800875a:	9309      	str	r3, [sp, #36]	@ 0x24
 800875c:	2320      	movs	r3, #32
 800875e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008762:	f8cd 800c 	str.w	r8, [sp, #12]
 8008766:	2330      	movs	r3, #48	@ 0x30
 8008768:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008918 <_vfiprintf_r+0x21c>
 800876c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008770:	f04f 0901 	mov.w	r9, #1
 8008774:	4623      	mov	r3, r4
 8008776:	469a      	mov	sl, r3
 8008778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877c:	b10a      	cbz	r2, 8008782 <_vfiprintf_r+0x86>
 800877e:	2a25      	cmp	r2, #37	@ 0x25
 8008780:	d1f9      	bne.n	8008776 <_vfiprintf_r+0x7a>
 8008782:	ebba 0b04 	subs.w	fp, sl, r4
 8008786:	d00b      	beq.n	80087a0 <_vfiprintf_r+0xa4>
 8008788:	465b      	mov	r3, fp
 800878a:	4622      	mov	r2, r4
 800878c:	4629      	mov	r1, r5
 800878e:	4630      	mov	r0, r6
 8008790:	f7ff ffa1 	bl	80086d6 <__sfputs_r>
 8008794:	3001      	adds	r0, #1
 8008796:	f000 80a7 	beq.w	80088e8 <_vfiprintf_r+0x1ec>
 800879a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879c:	445a      	add	r2, fp
 800879e:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a0:	f89a 3000 	ldrb.w	r3, [sl]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 809f 	beq.w	80088e8 <_vfiprintf_r+0x1ec>
 80087aa:	2300      	movs	r3, #0
 80087ac:	f04f 32ff 	mov.w	r2, #4294967295
 80087b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b4:	f10a 0a01 	add.w	sl, sl, #1
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	9307      	str	r3, [sp, #28]
 80087bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80087c2:	4654      	mov	r4, sl
 80087c4:	2205      	movs	r2, #5
 80087c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ca:	4853      	ldr	r0, [pc, #332]	@ (8008918 <_vfiprintf_r+0x21c>)
 80087cc:	f7f7 fd00 	bl	80001d0 <memchr>
 80087d0:	9a04      	ldr	r2, [sp, #16]
 80087d2:	b9d8      	cbnz	r0, 800880c <_vfiprintf_r+0x110>
 80087d4:	06d1      	lsls	r1, r2, #27
 80087d6:	bf44      	itt	mi
 80087d8:	2320      	movmi	r3, #32
 80087da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087de:	0713      	lsls	r3, r2, #28
 80087e0:	bf44      	itt	mi
 80087e2:	232b      	movmi	r3, #43	@ 0x2b
 80087e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ee:	d015      	beq.n	800881c <_vfiprintf_r+0x120>
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	4654      	mov	r4, sl
 80087f4:	2000      	movs	r0, #0
 80087f6:	f04f 0c0a 	mov.w	ip, #10
 80087fa:	4621      	mov	r1, r4
 80087fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008800:	3b30      	subs	r3, #48	@ 0x30
 8008802:	2b09      	cmp	r3, #9
 8008804:	d94b      	bls.n	800889e <_vfiprintf_r+0x1a2>
 8008806:	b1b0      	cbz	r0, 8008836 <_vfiprintf_r+0x13a>
 8008808:	9207      	str	r2, [sp, #28]
 800880a:	e014      	b.n	8008836 <_vfiprintf_r+0x13a>
 800880c:	eba0 0308 	sub.w	r3, r0, r8
 8008810:	fa09 f303 	lsl.w	r3, r9, r3
 8008814:	4313      	orrs	r3, r2
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	46a2      	mov	sl, r4
 800881a:	e7d2      	b.n	80087c2 <_vfiprintf_r+0xc6>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1d19      	adds	r1, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	9103      	str	r1, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	bfbb      	ittet	lt
 8008828:	425b      	neglt	r3, r3
 800882a:	f042 0202 	orrlt.w	r2, r2, #2
 800882e:	9307      	strge	r3, [sp, #28]
 8008830:	9307      	strlt	r3, [sp, #28]
 8008832:	bfb8      	it	lt
 8008834:	9204      	strlt	r2, [sp, #16]
 8008836:	7823      	ldrb	r3, [r4, #0]
 8008838:	2b2e      	cmp	r3, #46	@ 0x2e
 800883a:	d10a      	bne.n	8008852 <_vfiprintf_r+0x156>
 800883c:	7863      	ldrb	r3, [r4, #1]
 800883e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008840:	d132      	bne.n	80088a8 <_vfiprintf_r+0x1ac>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	1d1a      	adds	r2, r3, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	9203      	str	r2, [sp, #12]
 800884a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800884e:	3402      	adds	r4, #2
 8008850:	9305      	str	r3, [sp, #20]
 8008852:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008928 <_vfiprintf_r+0x22c>
 8008856:	7821      	ldrb	r1, [r4, #0]
 8008858:	2203      	movs	r2, #3
 800885a:	4650      	mov	r0, sl
 800885c:	f7f7 fcb8 	bl	80001d0 <memchr>
 8008860:	b138      	cbz	r0, 8008872 <_vfiprintf_r+0x176>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	eba0 000a 	sub.w	r0, r0, sl
 8008868:	2240      	movs	r2, #64	@ 0x40
 800886a:	4082      	lsls	r2, r0
 800886c:	4313      	orrs	r3, r2
 800886e:	3401      	adds	r4, #1
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008876:	4829      	ldr	r0, [pc, #164]	@ (800891c <_vfiprintf_r+0x220>)
 8008878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800887c:	2206      	movs	r2, #6
 800887e:	f7f7 fca7 	bl	80001d0 <memchr>
 8008882:	2800      	cmp	r0, #0
 8008884:	d03f      	beq.n	8008906 <_vfiprintf_r+0x20a>
 8008886:	4b26      	ldr	r3, [pc, #152]	@ (8008920 <_vfiprintf_r+0x224>)
 8008888:	bb1b      	cbnz	r3, 80088d2 <_vfiprintf_r+0x1d6>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	3307      	adds	r3, #7
 800888e:	f023 0307 	bic.w	r3, r3, #7
 8008892:	3308      	adds	r3, #8
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008898:	443b      	add	r3, r7
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	e76a      	b.n	8008774 <_vfiprintf_r+0x78>
 800889e:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a2:	460c      	mov	r4, r1
 80088a4:	2001      	movs	r0, #1
 80088a6:	e7a8      	b.n	80087fa <_vfiprintf_r+0xfe>
 80088a8:	2300      	movs	r3, #0
 80088aa:	3401      	adds	r4, #1
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	4619      	mov	r1, r3
 80088b0:	f04f 0c0a 	mov.w	ip, #10
 80088b4:	4620      	mov	r0, r4
 80088b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ba:	3a30      	subs	r2, #48	@ 0x30
 80088bc:	2a09      	cmp	r2, #9
 80088be:	d903      	bls.n	80088c8 <_vfiprintf_r+0x1cc>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0c6      	beq.n	8008852 <_vfiprintf_r+0x156>
 80088c4:	9105      	str	r1, [sp, #20]
 80088c6:	e7c4      	b.n	8008852 <_vfiprintf_r+0x156>
 80088c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088cc:	4604      	mov	r4, r0
 80088ce:	2301      	movs	r3, #1
 80088d0:	e7f0      	b.n	80088b4 <_vfiprintf_r+0x1b8>
 80088d2:	ab03      	add	r3, sp, #12
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	462a      	mov	r2, r5
 80088d8:	4b12      	ldr	r3, [pc, #72]	@ (8008924 <_vfiprintf_r+0x228>)
 80088da:	a904      	add	r1, sp, #16
 80088dc:	4630      	mov	r0, r6
 80088de:	f3af 8000 	nop.w
 80088e2:	4607      	mov	r7, r0
 80088e4:	1c78      	adds	r0, r7, #1
 80088e6:	d1d6      	bne.n	8008896 <_vfiprintf_r+0x19a>
 80088e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088ea:	07d9      	lsls	r1, r3, #31
 80088ec:	d405      	bmi.n	80088fa <_vfiprintf_r+0x1fe>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	059a      	lsls	r2, r3, #22
 80088f2:	d402      	bmi.n	80088fa <_vfiprintf_r+0x1fe>
 80088f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088f6:	f7ff fdcf 	bl	8008498 <__retarget_lock_release_recursive>
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	065b      	lsls	r3, r3, #25
 80088fe:	f53f af1f 	bmi.w	8008740 <_vfiprintf_r+0x44>
 8008902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008904:	e71e      	b.n	8008744 <_vfiprintf_r+0x48>
 8008906:	ab03      	add	r3, sp, #12
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	462a      	mov	r2, r5
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <_vfiprintf_r+0x228>)
 800890e:	a904      	add	r1, sp, #16
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f879 	bl	8008a08 <_printf_i>
 8008916:	e7e4      	b.n	80088e2 <_vfiprintf_r+0x1e6>
 8008918:	080095e8 	.word	0x080095e8
 800891c:	080095f2 	.word	0x080095f2
 8008920:	00000000 	.word	0x00000000
 8008924:	080086d7 	.word	0x080086d7
 8008928:	080095ee 	.word	0x080095ee

0800892c <_printf_common>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	4616      	mov	r6, r2
 8008932:	4698      	mov	r8, r3
 8008934:	688a      	ldr	r2, [r1, #8]
 8008936:	690b      	ldr	r3, [r1, #16]
 8008938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800893c:	4293      	cmp	r3, r2
 800893e:	bfb8      	it	lt
 8008940:	4613      	movlt	r3, r2
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008948:	4607      	mov	r7, r0
 800894a:	460c      	mov	r4, r1
 800894c:	b10a      	cbz	r2, 8008952 <_printf_common+0x26>
 800894e:	3301      	adds	r3, #1
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	0699      	lsls	r1, r3, #26
 8008956:	bf42      	ittt	mi
 8008958:	6833      	ldrmi	r3, [r6, #0]
 800895a:	3302      	addmi	r3, #2
 800895c:	6033      	strmi	r3, [r6, #0]
 800895e:	6825      	ldr	r5, [r4, #0]
 8008960:	f015 0506 	ands.w	r5, r5, #6
 8008964:	d106      	bne.n	8008974 <_printf_common+0x48>
 8008966:	f104 0a19 	add.w	sl, r4, #25
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	6832      	ldr	r2, [r6, #0]
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	42ab      	cmp	r3, r5
 8008972:	dc26      	bgt.n	80089c2 <_printf_common+0x96>
 8008974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	3b00      	subs	r3, #0
 800897c:	bf18      	it	ne
 800897e:	2301      	movne	r3, #1
 8008980:	0692      	lsls	r2, r2, #26
 8008982:	d42b      	bmi.n	80089dc <_printf_common+0xb0>
 8008984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008988:	4641      	mov	r1, r8
 800898a:	4638      	mov	r0, r7
 800898c:	47c8      	blx	r9
 800898e:	3001      	adds	r0, #1
 8008990:	d01e      	beq.n	80089d0 <_printf_common+0xa4>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	6922      	ldr	r2, [r4, #16]
 8008996:	f003 0306 	and.w	r3, r3, #6
 800899a:	2b04      	cmp	r3, #4
 800899c:	bf02      	ittt	eq
 800899e:	68e5      	ldreq	r5, [r4, #12]
 80089a0:	6833      	ldreq	r3, [r6, #0]
 80089a2:	1aed      	subeq	r5, r5, r3
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	bf0c      	ite	eq
 80089a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089ac:	2500      	movne	r5, #0
 80089ae:	4293      	cmp	r3, r2
 80089b0:	bfc4      	itt	gt
 80089b2:	1a9b      	subgt	r3, r3, r2
 80089b4:	18ed      	addgt	r5, r5, r3
 80089b6:	2600      	movs	r6, #0
 80089b8:	341a      	adds	r4, #26
 80089ba:	42b5      	cmp	r5, r6
 80089bc:	d11a      	bne.n	80089f4 <_printf_common+0xc8>
 80089be:	2000      	movs	r0, #0
 80089c0:	e008      	b.n	80089d4 <_printf_common+0xa8>
 80089c2:	2301      	movs	r3, #1
 80089c4:	4652      	mov	r2, sl
 80089c6:	4641      	mov	r1, r8
 80089c8:	4638      	mov	r0, r7
 80089ca:	47c8      	blx	r9
 80089cc:	3001      	adds	r0, #1
 80089ce:	d103      	bne.n	80089d8 <_printf_common+0xac>
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295
 80089d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d8:	3501      	adds	r5, #1
 80089da:	e7c6      	b.n	800896a <_printf_common+0x3e>
 80089dc:	18e1      	adds	r1, r4, r3
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	2030      	movs	r0, #48	@ 0x30
 80089e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089e6:	4422      	add	r2, r4
 80089e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089f0:	3302      	adds	r3, #2
 80089f2:	e7c7      	b.n	8008984 <_printf_common+0x58>
 80089f4:	2301      	movs	r3, #1
 80089f6:	4622      	mov	r2, r4
 80089f8:	4641      	mov	r1, r8
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c8      	blx	r9
 80089fe:	3001      	adds	r0, #1
 8008a00:	d0e6      	beq.n	80089d0 <_printf_common+0xa4>
 8008a02:	3601      	adds	r6, #1
 8008a04:	e7d9      	b.n	80089ba <_printf_common+0x8e>
	...

08008a08 <_printf_i>:
 8008a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	7e0f      	ldrb	r7, [r1, #24]
 8008a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a10:	2f78      	cmp	r7, #120	@ 0x78
 8008a12:	4691      	mov	r9, r2
 8008a14:	4680      	mov	r8, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	469a      	mov	sl, r3
 8008a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a1e:	d807      	bhi.n	8008a30 <_printf_i+0x28>
 8008a20:	2f62      	cmp	r7, #98	@ 0x62
 8008a22:	d80a      	bhi.n	8008a3a <_printf_i+0x32>
 8008a24:	2f00      	cmp	r7, #0
 8008a26:	f000 80d2 	beq.w	8008bce <_printf_i+0x1c6>
 8008a2a:	2f58      	cmp	r7, #88	@ 0x58
 8008a2c:	f000 80b9 	beq.w	8008ba2 <_printf_i+0x19a>
 8008a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a38:	e03a      	b.n	8008ab0 <_printf_i+0xa8>
 8008a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a3e:	2b15      	cmp	r3, #21
 8008a40:	d8f6      	bhi.n	8008a30 <_printf_i+0x28>
 8008a42:	a101      	add	r1, pc, #4	@ (adr r1, 8008a48 <_printf_i+0x40>)
 8008a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008ab5 	.word	0x08008ab5
 8008a50:	08008a31 	.word	0x08008a31
 8008a54:	08008a31 	.word	0x08008a31
 8008a58:	08008a31 	.word	0x08008a31
 8008a5c:	08008a31 	.word	0x08008a31
 8008a60:	08008ab5 	.word	0x08008ab5
 8008a64:	08008a31 	.word	0x08008a31
 8008a68:	08008a31 	.word	0x08008a31
 8008a6c:	08008a31 	.word	0x08008a31
 8008a70:	08008a31 	.word	0x08008a31
 8008a74:	08008bb5 	.word	0x08008bb5
 8008a78:	08008adf 	.word	0x08008adf
 8008a7c:	08008b6f 	.word	0x08008b6f
 8008a80:	08008a31 	.word	0x08008a31
 8008a84:	08008a31 	.word	0x08008a31
 8008a88:	08008bd7 	.word	0x08008bd7
 8008a8c:	08008a31 	.word	0x08008a31
 8008a90:	08008adf 	.word	0x08008adf
 8008a94:	08008a31 	.word	0x08008a31
 8008a98:	08008a31 	.word	0x08008a31
 8008a9c:	08008b77 	.word	0x08008b77
 8008aa0:	6833      	ldr	r3, [r6, #0]
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6032      	str	r2, [r6, #0]
 8008aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e09d      	b.n	8008bf0 <_printf_i+0x1e8>
 8008ab4:	6833      	ldr	r3, [r6, #0]
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	1d19      	adds	r1, r3, #4
 8008aba:	6031      	str	r1, [r6, #0]
 8008abc:	0606      	lsls	r6, r0, #24
 8008abe:	d501      	bpl.n	8008ac4 <_printf_i+0xbc>
 8008ac0:	681d      	ldr	r5, [r3, #0]
 8008ac2:	e003      	b.n	8008acc <_printf_i+0xc4>
 8008ac4:	0645      	lsls	r5, r0, #25
 8008ac6:	d5fb      	bpl.n	8008ac0 <_printf_i+0xb8>
 8008ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	da03      	bge.n	8008ad8 <_printf_i+0xd0>
 8008ad0:	232d      	movs	r3, #45	@ 0x2d
 8008ad2:	426d      	negs	r5, r5
 8008ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad8:	4859      	ldr	r0, [pc, #356]	@ (8008c40 <_printf_i+0x238>)
 8008ada:	230a      	movs	r3, #10
 8008adc:	e011      	b.n	8008b02 <_printf_i+0xfa>
 8008ade:	6821      	ldr	r1, [r4, #0]
 8008ae0:	6833      	ldr	r3, [r6, #0]
 8008ae2:	0608      	lsls	r0, r1, #24
 8008ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ae8:	d402      	bmi.n	8008af0 <_printf_i+0xe8>
 8008aea:	0649      	lsls	r1, r1, #25
 8008aec:	bf48      	it	mi
 8008aee:	b2ad      	uxthmi	r5, r5
 8008af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008af2:	4853      	ldr	r0, [pc, #332]	@ (8008c40 <_printf_i+0x238>)
 8008af4:	6033      	str	r3, [r6, #0]
 8008af6:	bf14      	ite	ne
 8008af8:	230a      	movne	r3, #10
 8008afa:	2308      	moveq	r3, #8
 8008afc:	2100      	movs	r1, #0
 8008afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b02:	6866      	ldr	r6, [r4, #4]
 8008b04:	60a6      	str	r6, [r4, #8]
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	bfa2      	ittt	ge
 8008b0a:	6821      	ldrge	r1, [r4, #0]
 8008b0c:	f021 0104 	bicge.w	r1, r1, #4
 8008b10:	6021      	strge	r1, [r4, #0]
 8008b12:	b90d      	cbnz	r5, 8008b18 <_printf_i+0x110>
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	d04b      	beq.n	8008bb0 <_printf_i+0x1a8>
 8008b18:	4616      	mov	r6, r2
 8008b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b22:	5dc7      	ldrb	r7, [r0, r7]
 8008b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b28:	462f      	mov	r7, r5
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	460d      	mov	r5, r1
 8008b2e:	d9f4      	bls.n	8008b1a <_printf_i+0x112>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d10b      	bne.n	8008b4c <_printf_i+0x144>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	07df      	lsls	r7, r3, #31
 8008b38:	d508      	bpl.n	8008b4c <_printf_i+0x144>
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	bfde      	ittt	le
 8008b42:	2330      	movle	r3, #48	@ 0x30
 8008b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b4c:	1b92      	subs	r2, r2, r6
 8008b4e:	6122      	str	r2, [r4, #16]
 8008b50:	f8cd a000 	str.w	sl, [sp]
 8008b54:	464b      	mov	r3, r9
 8008b56:	aa03      	add	r2, sp, #12
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fee6 	bl	800892c <_printf_common>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d14a      	bne.n	8008bfa <_printf_i+0x1f2>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	b004      	add	sp, #16
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	f043 0320 	orr.w	r3, r3, #32
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	4833      	ldr	r0, [pc, #204]	@ (8008c44 <_printf_i+0x23c>)
 8008b78:	2778      	movs	r7, #120	@ 0x78
 8008b7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	6831      	ldr	r1, [r6, #0]
 8008b82:	061f      	lsls	r7, r3, #24
 8008b84:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b88:	d402      	bmi.n	8008b90 <_printf_i+0x188>
 8008b8a:	065f      	lsls	r7, r3, #25
 8008b8c:	bf48      	it	mi
 8008b8e:	b2ad      	uxthmi	r5, r5
 8008b90:	6031      	str	r1, [r6, #0]
 8008b92:	07d9      	lsls	r1, r3, #31
 8008b94:	bf44      	itt	mi
 8008b96:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9a:	6023      	strmi	r3, [r4, #0]
 8008b9c:	b11d      	cbz	r5, 8008ba6 <_printf_i+0x19e>
 8008b9e:	2310      	movs	r3, #16
 8008ba0:	e7ac      	b.n	8008afc <_printf_i+0xf4>
 8008ba2:	4827      	ldr	r0, [pc, #156]	@ (8008c40 <_printf_i+0x238>)
 8008ba4:	e7e9      	b.n	8008b7a <_printf_i+0x172>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	f023 0320 	bic.w	r3, r3, #32
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	e7f6      	b.n	8008b9e <_printf_i+0x196>
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	e7bd      	b.n	8008b30 <_printf_i+0x128>
 8008bb4:	6833      	ldr	r3, [r6, #0]
 8008bb6:	6825      	ldr	r5, [r4, #0]
 8008bb8:	6961      	ldr	r1, [r4, #20]
 8008bba:	1d18      	adds	r0, r3, #4
 8008bbc:	6030      	str	r0, [r6, #0]
 8008bbe:	062e      	lsls	r6, r5, #24
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	d501      	bpl.n	8008bc8 <_printf_i+0x1c0>
 8008bc4:	6019      	str	r1, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <_printf_i+0x1c6>
 8008bc8:	0668      	lsls	r0, r5, #25
 8008bca:	d5fb      	bpl.n	8008bc4 <_printf_i+0x1bc>
 8008bcc:	8019      	strh	r1, [r3, #0]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	4616      	mov	r6, r2
 8008bd4:	e7bc      	b.n	8008b50 <_printf_i+0x148>
 8008bd6:	6833      	ldr	r3, [r6, #0]
 8008bd8:	1d1a      	adds	r2, r3, #4
 8008bda:	6032      	str	r2, [r6, #0]
 8008bdc:	681e      	ldr	r6, [r3, #0]
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	2100      	movs	r1, #0
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7f7 faf4 	bl	80001d0 <memchr>
 8008be8:	b108      	cbz	r0, 8008bee <_printf_i+0x1e6>
 8008bea:	1b80      	subs	r0, r0, r6
 8008bec:	6060      	str	r0, [r4, #4]
 8008bee:	6863      	ldr	r3, [r4, #4]
 8008bf0:	6123      	str	r3, [r4, #16]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf8:	e7aa      	b.n	8008b50 <_printf_i+0x148>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	47d0      	blx	sl
 8008c04:	3001      	adds	r0, #1
 8008c06:	d0ad      	beq.n	8008b64 <_printf_i+0x15c>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	079b      	lsls	r3, r3, #30
 8008c0c:	d413      	bmi.n	8008c36 <_printf_i+0x22e>
 8008c0e:	68e0      	ldr	r0, [r4, #12]
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	4298      	cmp	r0, r3
 8008c14:	bfb8      	it	lt
 8008c16:	4618      	movlt	r0, r3
 8008c18:	e7a6      	b.n	8008b68 <_printf_i+0x160>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4640      	mov	r0, r8
 8008c22:	47d0      	blx	sl
 8008c24:	3001      	adds	r0, #1
 8008c26:	d09d      	beq.n	8008b64 <_printf_i+0x15c>
 8008c28:	3501      	adds	r5, #1
 8008c2a:	68e3      	ldr	r3, [r4, #12]
 8008c2c:	9903      	ldr	r1, [sp, #12]
 8008c2e:	1a5b      	subs	r3, r3, r1
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	dcf2      	bgt.n	8008c1a <_printf_i+0x212>
 8008c34:	e7eb      	b.n	8008c0e <_printf_i+0x206>
 8008c36:	2500      	movs	r5, #0
 8008c38:	f104 0619 	add.w	r6, r4, #25
 8008c3c:	e7f5      	b.n	8008c2a <_printf_i+0x222>
 8008c3e:	bf00      	nop
 8008c40:	080095f9 	.word	0x080095f9
 8008c44:	0800960a 	.word	0x0800960a

08008c48 <__sflush_r>:
 8008c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	0716      	lsls	r6, r2, #28
 8008c52:	4605      	mov	r5, r0
 8008c54:	460c      	mov	r4, r1
 8008c56:	d454      	bmi.n	8008d02 <__sflush_r+0xba>
 8008c58:	684b      	ldr	r3, [r1, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc02      	bgt.n	8008c64 <__sflush_r+0x1c>
 8008c5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dd48      	ble.n	8008cf6 <__sflush_r+0xae>
 8008c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d045      	beq.n	8008cf6 <__sflush_r+0xae>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c70:	682f      	ldr	r7, [r5, #0]
 8008c72:	6a21      	ldr	r1, [r4, #32]
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	d030      	beq.n	8008cda <__sflush_r+0x92>
 8008c78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	0759      	lsls	r1, r3, #29
 8008c7e:	d505      	bpl.n	8008c8c <__sflush_r+0x44>
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c86:	b10b      	cbz	r3, 8008c8c <__sflush_r+0x44>
 8008c88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c8a:	1ad2      	subs	r2, r2, r3
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c90:	6a21      	ldr	r1, [r4, #32]
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b0      	blx	r6
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	d106      	bne.n	8008caa <__sflush_r+0x62>
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	291d      	cmp	r1, #29
 8008ca0:	d82b      	bhi.n	8008cfa <__sflush_r+0xb2>
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d4c <__sflush_r+0x104>)
 8008ca4:	410a      	asrs	r2, r1
 8008ca6:	07d6      	lsls	r6, r2, #31
 8008ca8:	d427      	bmi.n	8008cfa <__sflush_r+0xb2>
 8008caa:	2200      	movs	r2, #0
 8008cac:	6062      	str	r2, [r4, #4]
 8008cae:	04d9      	lsls	r1, r3, #19
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	d504      	bpl.n	8008cc0 <__sflush_r+0x78>
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	d101      	bne.n	8008cbe <__sflush_r+0x76>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	b903      	cbnz	r3, 8008cc0 <__sflush_r+0x78>
 8008cbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cc2:	602f      	str	r7, [r5, #0]
 8008cc4:	b1b9      	cbz	r1, 8008cf6 <__sflush_r+0xae>
 8008cc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d002      	beq.n	8008cd4 <__sflush_r+0x8c>
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7ff fbf2 	bl	80084b8 <_free_r>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd8:	e00d      	b.n	8008cf6 <__sflush_r+0xae>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b0      	blx	r6
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	1c50      	adds	r0, r2, #1
 8008ce4:	d1c9      	bne.n	8008c7a <__sflush_r+0x32>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0c6      	beq.n	8008c7a <__sflush_r+0x32>
 8008cec:	2b1d      	cmp	r3, #29
 8008cee:	d001      	beq.n	8008cf4 <__sflush_r+0xac>
 8008cf0:	2b16      	cmp	r3, #22
 8008cf2:	d11e      	bne.n	8008d32 <__sflush_r+0xea>
 8008cf4:	602f      	str	r7, [r5, #0]
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	e022      	b.n	8008d40 <__sflush_r+0xf8>
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfe:	b21b      	sxth	r3, r3
 8008d00:	e01b      	b.n	8008d3a <__sflush_r+0xf2>
 8008d02:	690f      	ldr	r7, [r1, #16]
 8008d04:	2f00      	cmp	r7, #0
 8008d06:	d0f6      	beq.n	8008cf6 <__sflush_r+0xae>
 8008d08:	0793      	lsls	r3, r2, #30
 8008d0a:	680e      	ldr	r6, [r1, #0]
 8008d0c:	bf08      	it	eq
 8008d0e:	694b      	ldreq	r3, [r1, #20]
 8008d10:	600f      	str	r7, [r1, #0]
 8008d12:	bf18      	it	ne
 8008d14:	2300      	movne	r3, #0
 8008d16:	eba6 0807 	sub.w	r8, r6, r7
 8008d1a:	608b      	str	r3, [r1, #8]
 8008d1c:	f1b8 0f00 	cmp.w	r8, #0
 8008d20:	dde9      	ble.n	8008cf6 <__sflush_r+0xae>
 8008d22:	6a21      	ldr	r1, [r4, #32]
 8008d24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d26:	4643      	mov	r3, r8
 8008d28:	463a      	mov	r2, r7
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b0      	blx	r6
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	dc08      	bgt.n	8008d44 <__sflush_r+0xfc>
 8008d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d44:	4407      	add	r7, r0
 8008d46:	eba8 0800 	sub.w	r8, r8, r0
 8008d4a:	e7e7      	b.n	8008d1c <__sflush_r+0xd4>
 8008d4c:	dfbffffe 	.word	0xdfbffffe

08008d50 <_fflush_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	4605      	mov	r5, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b913      	cbnz	r3, 8008d60 <_fflush_r+0x10>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	b118      	cbz	r0, 8008d6a <_fflush_r+0x1a>
 8008d62:	6a03      	ldr	r3, [r0, #32]
 8008d64:	b90b      	cbnz	r3, 8008d6a <_fflush_r+0x1a>
 8008d66:	f7ff fa3b 	bl	80081e0 <__sinit>
 8008d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f3      	beq.n	8008d5a <_fflush_r+0xa>
 8008d72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d74:	07d0      	lsls	r0, r2, #31
 8008d76:	d404      	bmi.n	8008d82 <_fflush_r+0x32>
 8008d78:	0599      	lsls	r1, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_fflush_r+0x32>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7e:	f7ff fb8a 	bl	8008496 <__retarget_lock_acquire_recursive>
 8008d82:	4628      	mov	r0, r5
 8008d84:	4621      	mov	r1, r4
 8008d86:	f7ff ff5f 	bl	8008c48 <__sflush_r>
 8008d8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d8c:	07da      	lsls	r2, r3, #31
 8008d8e:	4605      	mov	r5, r0
 8008d90:	d4e4      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	059b      	lsls	r3, r3, #22
 8008d96:	d4e1      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d9a:	f7ff fb7d 	bl	8008498 <__retarget_lock_release_recursive>
 8008d9e:	e7dd      	b.n	8008d5c <_fflush_r+0xc>

08008da0 <__swbuf_r>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	460e      	mov	r6, r1
 8008da4:	4614      	mov	r4, r2
 8008da6:	4605      	mov	r5, r0
 8008da8:	b118      	cbz	r0, 8008db2 <__swbuf_r+0x12>
 8008daa:	6a03      	ldr	r3, [r0, #32]
 8008dac:	b90b      	cbnz	r3, 8008db2 <__swbuf_r+0x12>
 8008dae:	f7ff fa17 	bl	80081e0 <__sinit>
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	d501      	bpl.n	8008dc0 <__swbuf_r+0x20>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	b943      	cbnz	r3, 8008dd2 <__swbuf_r+0x32>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f000 f82a 	bl	8008e1c <__swsetup_r>
 8008dc8:	b118      	cbz	r0, 8008dd2 <__swbuf_r+0x32>
 8008dca:	f04f 37ff 	mov.w	r7, #4294967295
 8008dce:	4638      	mov	r0, r7
 8008dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	1a98      	subs	r0, r3, r2
 8008dd8:	6963      	ldr	r3, [r4, #20]
 8008dda:	b2f6      	uxtb	r6, r6
 8008ddc:	4283      	cmp	r3, r0
 8008dde:	4637      	mov	r7, r6
 8008de0:	dc05      	bgt.n	8008dee <__swbuf_r+0x4e>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f7ff ffb3 	bl	8008d50 <_fflush_r>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d1ed      	bne.n	8008dca <__swbuf_r+0x2a>
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60a3      	str	r3, [r4, #8]
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	701e      	strb	r6, [r3, #0]
 8008dfc:	6962      	ldr	r2, [r4, #20]
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d004      	beq.n	8008e0e <__swbuf_r+0x6e>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d5e1      	bpl.n	8008dce <__swbuf_r+0x2e>
 8008e0a:	2e0a      	cmp	r6, #10
 8008e0c:	d1df      	bne.n	8008dce <__swbuf_r+0x2e>
 8008e0e:	4621      	mov	r1, r4
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7ff ff9d 	bl	8008d50 <_fflush_r>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0d9      	beq.n	8008dce <__swbuf_r+0x2e>
 8008e1a:	e7d6      	b.n	8008dca <__swbuf_r+0x2a>

08008e1c <__swsetup_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4b29      	ldr	r3, [pc, #164]	@ (8008ec4 <__swsetup_r+0xa8>)
 8008e20:	4605      	mov	r5, r0
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	460c      	mov	r4, r1
 8008e26:	b118      	cbz	r0, 8008e30 <__swsetup_r+0x14>
 8008e28:	6a03      	ldr	r3, [r0, #32]
 8008e2a:	b90b      	cbnz	r3, 8008e30 <__swsetup_r+0x14>
 8008e2c:	f7ff f9d8 	bl	80081e0 <__sinit>
 8008e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e34:	0719      	lsls	r1, r3, #28
 8008e36:	d422      	bmi.n	8008e7e <__swsetup_r+0x62>
 8008e38:	06da      	lsls	r2, r3, #27
 8008e3a:	d407      	bmi.n	8008e4c <__swsetup_r+0x30>
 8008e3c:	2209      	movs	r2, #9
 8008e3e:	602a      	str	r2, [r5, #0]
 8008e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	e033      	b.n	8008eb4 <__swsetup_r+0x98>
 8008e4c:	0758      	lsls	r0, r3, #29
 8008e4e:	d512      	bpl.n	8008e76 <__swsetup_r+0x5a>
 8008e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e52:	b141      	cbz	r1, 8008e66 <__swsetup_r+0x4a>
 8008e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	d002      	beq.n	8008e62 <__swsetup_r+0x46>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7ff fb2b 	bl	80084b8 <_free_r>
 8008e62:	2300      	movs	r3, #0
 8008e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f043 0308 	orr.w	r3, r3, #8
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	b94b      	cbnz	r3, 8008e96 <__swsetup_r+0x7a>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e8c:	d003      	beq.n	8008e96 <__swsetup_r+0x7a>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 f84f 	bl	8008f34 <__smakebuf_r>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	f013 0201 	ands.w	r2, r3, #1
 8008e9e:	d00a      	beq.n	8008eb6 <__swsetup_r+0x9a>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	60a2      	str	r2, [r4, #8]
 8008ea4:	6962      	ldr	r2, [r4, #20]
 8008ea6:	4252      	negs	r2, r2
 8008ea8:	61a2      	str	r2, [r4, #24]
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	b942      	cbnz	r2, 8008ec0 <__swsetup_r+0xa4>
 8008eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eb2:	d1c5      	bne.n	8008e40 <__swsetup_r+0x24>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	0799      	lsls	r1, r3, #30
 8008eb8:	bf58      	it	pl
 8008eba:	6962      	ldrpl	r2, [r4, #20]
 8008ebc:	60a2      	str	r2, [r4, #8]
 8008ebe:	e7f4      	b.n	8008eaa <__swsetup_r+0x8e>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7f7      	b.n	8008eb4 <__swsetup_r+0x98>
 8008ec4:	20000024 	.word	0x20000024

08008ec8 <_sbrk_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_sbrk_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f9 f90c 	bl	80020f0 <_sbrk>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_sbrk_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_sbrk_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20004cb4 	.word	0x20004cb4

08008ee8 <__swhatbuf_r>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	b096      	sub	sp, #88	@ 0x58
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	461e      	mov	r6, r3
 8008ef8:	da0d      	bge.n	8008f16 <__swhatbuf_r+0x2e>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f00:	f04f 0100 	mov.w	r1, #0
 8008f04:	bf14      	ite	ne
 8008f06:	2340      	movne	r3, #64	@ 0x40
 8008f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	6031      	str	r1, [r6, #0]
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	b016      	add	sp, #88	@ 0x58
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
 8008f16:	466a      	mov	r2, sp
 8008f18:	f000 f848 	bl	8008fac <_fstat_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	dbec      	blt.n	8008efa <__swhatbuf_r+0x12>
 8008f20:	9901      	ldr	r1, [sp, #4]
 8008f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f2a:	4259      	negs	r1, r3
 8008f2c:	4159      	adcs	r1, r3
 8008f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f32:	e7eb      	b.n	8008f0c <__swhatbuf_r+0x24>

08008f34 <__smakebuf_r>:
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f38:	079d      	lsls	r5, r3, #30
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	d507      	bpl.n	8008f50 <__smakebuf_r+0x1c>
 8008f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6163      	str	r3, [r4, #20]
 8008f4c:	b003      	add	sp, #12
 8008f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f50:	ab01      	add	r3, sp, #4
 8008f52:	466a      	mov	r2, sp
 8008f54:	f7ff ffc8 	bl	8008ee8 <__swhatbuf_r>
 8008f58:	9f00      	ldr	r7, [sp, #0]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7ff fb16 	bl	8008590 <_malloc_r>
 8008f64:	b948      	cbnz	r0, 8008f7a <__smakebuf_r+0x46>
 8008f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6a:	059a      	lsls	r2, r3, #22
 8008f6c:	d4ee      	bmi.n	8008f4c <__smakebuf_r+0x18>
 8008f6e:	f023 0303 	bic.w	r3, r3, #3
 8008f72:	f043 0302 	orr.w	r3, r3, #2
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	e7e2      	b.n	8008f40 <__smakebuf_r+0xc>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	6020      	str	r0, [r4, #0]
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f8a:	b15b      	cbz	r3, 8008fa4 <__smakebuf_r+0x70>
 8008f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f90:	4630      	mov	r0, r6
 8008f92:	f000 f81d 	bl	8008fd0 <_isatty_r>
 8008f96:	b128      	cbz	r0, 8008fa4 <__smakebuf_r+0x70>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	431d      	orrs	r5, r3
 8008fa8:	81a5      	strh	r5, [r4, #12]
 8008faa:	e7cf      	b.n	8008f4c <__smakebuf_r+0x18>

08008fac <_fstat_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	@ (8008fcc <_fstat_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7f9 f870 	bl	800209e <_fstat>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_fstat_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_fstat_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	20004cb4 	.word	0x20004cb4

08008fd0 <_isatty_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	@ (8008fec <_isatty_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7f9 f86f 	bl	80020be <_isatty>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_isatty_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_isatty_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20004cb4 	.word	0x20004cb4

08008ff0 <atan2>:
 8008ff0:	f000 b802 	b.w	8008ff8 <__ieee754_atan2>
 8008ff4:	0000      	movs	r0, r0
	...

08008ff8 <__ieee754_atan2>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	ec57 6b11 	vmov	r6, r7, d1
 8009000:	4273      	negs	r3, r6
 8009002:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009180 <__ieee754_atan2+0x188>
 8009006:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800900a:	4333      	orrs	r3, r6
 800900c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009010:	4543      	cmp	r3, r8
 8009012:	ec51 0b10 	vmov	r0, r1, d0
 8009016:	4635      	mov	r5, r6
 8009018:	d809      	bhi.n	800902e <__ieee754_atan2+0x36>
 800901a:	4244      	negs	r4, r0
 800901c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009020:	4304      	orrs	r4, r0
 8009022:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009026:	4544      	cmp	r4, r8
 8009028:	468e      	mov	lr, r1
 800902a:	4681      	mov	r9, r0
 800902c:	d907      	bls.n	800903e <__ieee754_atan2+0x46>
 800902e:	4632      	mov	r2, r6
 8009030:	463b      	mov	r3, r7
 8009032:	f7f7 f923 	bl	800027c <__adddf3>
 8009036:	ec41 0b10 	vmov	d0, r0, r1
 800903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009042:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009046:	4334      	orrs	r4, r6
 8009048:	d103      	bne.n	8009052 <__ieee754_atan2+0x5a>
 800904a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904e:	f000 b89b 	b.w	8009188 <atan>
 8009052:	17bc      	asrs	r4, r7, #30
 8009054:	f004 0402 	and.w	r4, r4, #2
 8009058:	ea53 0909 	orrs.w	r9, r3, r9
 800905c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009060:	d107      	bne.n	8009072 <__ieee754_atan2+0x7a>
 8009062:	2c02      	cmp	r4, #2
 8009064:	d05f      	beq.n	8009126 <__ieee754_atan2+0x12e>
 8009066:	2c03      	cmp	r4, #3
 8009068:	d1e5      	bne.n	8009036 <__ieee754_atan2+0x3e>
 800906a:	a141      	add	r1, pc, #260	@ (adr r1, 8009170 <__ieee754_atan2+0x178>)
 800906c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009070:	e7e1      	b.n	8009036 <__ieee754_atan2+0x3e>
 8009072:	4315      	orrs	r5, r2
 8009074:	d106      	bne.n	8009084 <__ieee754_atan2+0x8c>
 8009076:	f1be 0f00 	cmp.w	lr, #0
 800907a:	da5f      	bge.n	800913c <__ieee754_atan2+0x144>
 800907c:	a13e      	add	r1, pc, #248	@ (adr r1, 8009178 <__ieee754_atan2+0x180>)
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	e7d8      	b.n	8009036 <__ieee754_atan2+0x3e>
 8009084:	4542      	cmp	r2, r8
 8009086:	d10f      	bne.n	80090a8 <__ieee754_atan2+0xb0>
 8009088:	4293      	cmp	r3, r2
 800908a:	f104 34ff 	add.w	r4, r4, #4294967295
 800908e:	d107      	bne.n	80090a0 <__ieee754_atan2+0xa8>
 8009090:	2c02      	cmp	r4, #2
 8009092:	d84c      	bhi.n	800912e <__ieee754_atan2+0x136>
 8009094:	4b34      	ldr	r3, [pc, #208]	@ (8009168 <__ieee754_atan2+0x170>)
 8009096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800909a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800909e:	e7ca      	b.n	8009036 <__ieee754_atan2+0x3e>
 80090a0:	2c02      	cmp	r4, #2
 80090a2:	d848      	bhi.n	8009136 <__ieee754_atan2+0x13e>
 80090a4:	4b31      	ldr	r3, [pc, #196]	@ (800916c <__ieee754_atan2+0x174>)
 80090a6:	e7f6      	b.n	8009096 <__ieee754_atan2+0x9e>
 80090a8:	4543      	cmp	r3, r8
 80090aa:	d0e4      	beq.n	8009076 <__ieee754_atan2+0x7e>
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80090b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80090b6:	da1e      	bge.n	80090f6 <__ieee754_atan2+0xfe>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	da01      	bge.n	80090c0 <__ieee754_atan2+0xc8>
 80090bc:	323c      	adds	r2, #60	@ 0x3c
 80090be:	db1e      	blt.n	80090fe <__ieee754_atan2+0x106>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 fbba 	bl	800083c <__aeabi_ddiv>
 80090c8:	ec41 0b10 	vmov	d0, r0, r1
 80090cc:	f000 f9f4 	bl	80094b8 <fabs>
 80090d0:	f000 f85a 	bl	8009188 <atan>
 80090d4:	ec51 0b10 	vmov	r0, r1, d0
 80090d8:	2c01      	cmp	r4, #1
 80090da:	d013      	beq.n	8009104 <__ieee754_atan2+0x10c>
 80090dc:	2c02      	cmp	r4, #2
 80090de:	d015      	beq.n	800910c <__ieee754_atan2+0x114>
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	d0a8      	beq.n	8009036 <__ieee754_atan2+0x3e>
 80090e4:	a318      	add	r3, pc, #96	@ (adr r3, 8009148 <__ieee754_atan2+0x150>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 f8c5 	bl	8000278 <__aeabi_dsub>
 80090ee:	a318      	add	r3, pc, #96	@ (adr r3, 8009150 <__ieee754_atan2+0x158>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	e014      	b.n	8009120 <__ieee754_atan2+0x128>
 80090f6:	a118      	add	r1, pc, #96	@ (adr r1, 8009158 <__ieee754_atan2+0x160>)
 80090f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090fc:	e7ec      	b.n	80090d8 <__ieee754_atan2+0xe0>
 80090fe:	2000      	movs	r0, #0
 8009100:	2100      	movs	r1, #0
 8009102:	e7e9      	b.n	80090d8 <__ieee754_atan2+0xe0>
 8009104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009108:	4619      	mov	r1, r3
 800910a:	e794      	b.n	8009036 <__ieee754_atan2+0x3e>
 800910c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009148 <__ieee754_atan2+0x150>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f8b1 	bl	8000278 <__aeabi_dsub>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	a10d      	add	r1, pc, #52	@ (adr r1, 8009150 <__ieee754_atan2+0x158>)
 800911c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009120:	f7f7 f8aa 	bl	8000278 <__aeabi_dsub>
 8009124:	e787      	b.n	8009036 <__ieee754_atan2+0x3e>
 8009126:	a10a      	add	r1, pc, #40	@ (adr r1, 8009150 <__ieee754_atan2+0x158>)
 8009128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800912c:	e783      	b.n	8009036 <__ieee754_atan2+0x3e>
 800912e:	a10c      	add	r1, pc, #48	@ (adr r1, 8009160 <__ieee754_atan2+0x168>)
 8009130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009134:	e77f      	b.n	8009036 <__ieee754_atan2+0x3e>
 8009136:	2000      	movs	r0, #0
 8009138:	2100      	movs	r1, #0
 800913a:	e77c      	b.n	8009036 <__ieee754_atan2+0x3e>
 800913c:	a106      	add	r1, pc, #24	@ (adr r1, 8009158 <__ieee754_atan2+0x160>)
 800913e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009142:	e778      	b.n	8009036 <__ieee754_atan2+0x3e>
 8009144:	f3af 8000 	nop.w
 8009148:	33145c07 	.word	0x33145c07
 800914c:	3ca1a626 	.word	0x3ca1a626
 8009150:	54442d18 	.word	0x54442d18
 8009154:	400921fb 	.word	0x400921fb
 8009158:	54442d18 	.word	0x54442d18
 800915c:	3ff921fb 	.word	0x3ff921fb
 8009160:	54442d18 	.word	0x54442d18
 8009164:	3fe921fb 	.word	0x3fe921fb
 8009168:	08009638 	.word	0x08009638
 800916c:	08009620 	.word	0x08009620
 8009170:	54442d18 	.word	0x54442d18
 8009174:	c00921fb 	.word	0xc00921fb
 8009178:	54442d18 	.word	0x54442d18
 800917c:	bff921fb 	.word	0xbff921fb
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	00000000 	.word	0x00000000

08009188 <atan>:
 8009188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	ec55 4b10 	vmov	r4, r5, d0
 8009190:	4bbf      	ldr	r3, [pc, #764]	@ (8009490 <atan+0x308>)
 8009192:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009196:	429e      	cmp	r6, r3
 8009198:	46ab      	mov	fp, r5
 800919a:	d918      	bls.n	80091ce <atan+0x46>
 800919c:	4bbd      	ldr	r3, [pc, #756]	@ (8009494 <atan+0x30c>)
 800919e:	429e      	cmp	r6, r3
 80091a0:	d801      	bhi.n	80091a6 <atan+0x1e>
 80091a2:	d109      	bne.n	80091b8 <atan+0x30>
 80091a4:	b144      	cbz	r4, 80091b8 <atan+0x30>
 80091a6:	4622      	mov	r2, r4
 80091a8:	462b      	mov	r3, r5
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7f7 f865 	bl	800027c <__adddf3>
 80091b2:	4604      	mov	r4, r0
 80091b4:	460d      	mov	r5, r1
 80091b6:	e006      	b.n	80091c6 <atan+0x3e>
 80091b8:	f1bb 0f00 	cmp.w	fp, #0
 80091bc:	f340 812b 	ble.w	8009416 <atan+0x28e>
 80091c0:	a597      	add	r5, pc, #604	@ (adr r5, 8009420 <atan+0x298>)
 80091c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091c6:	ec45 4b10 	vmov	d0, r4, r5
 80091ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	4bb2      	ldr	r3, [pc, #712]	@ (8009498 <atan+0x310>)
 80091d0:	429e      	cmp	r6, r3
 80091d2:	d813      	bhi.n	80091fc <atan+0x74>
 80091d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80091d8:	429e      	cmp	r6, r3
 80091da:	d80c      	bhi.n	80091f6 <atan+0x6e>
 80091dc:	a392      	add	r3, pc, #584	@ (adr r3, 8009428 <atan+0x2a0>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 f849 	bl	800027c <__adddf3>
 80091ea:	4bac      	ldr	r3, [pc, #688]	@ (800949c <atan+0x314>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	f7f7 fc8b 	bl	8000b08 <__aeabi_dcmpgt>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d1e7      	bne.n	80091c6 <atan+0x3e>
 80091f6:	f04f 3aff 	mov.w	sl, #4294967295
 80091fa:	e029      	b.n	8009250 <atan+0xc8>
 80091fc:	f000 f95c 	bl	80094b8 <fabs>
 8009200:	4ba7      	ldr	r3, [pc, #668]	@ (80094a0 <atan+0x318>)
 8009202:	429e      	cmp	r6, r3
 8009204:	ec55 4b10 	vmov	r4, r5, d0
 8009208:	f200 80bc 	bhi.w	8009384 <atan+0x1fc>
 800920c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009210:	429e      	cmp	r6, r3
 8009212:	f200 809e 	bhi.w	8009352 <atan+0x1ca>
 8009216:	4622      	mov	r2, r4
 8009218:	462b      	mov	r3, r5
 800921a:	4620      	mov	r0, r4
 800921c:	4629      	mov	r1, r5
 800921e:	f7f7 f82d 	bl	800027c <__adddf3>
 8009222:	4b9e      	ldr	r3, [pc, #632]	@ (800949c <atan+0x314>)
 8009224:	2200      	movs	r2, #0
 8009226:	f7f7 f827 	bl	8000278 <__aeabi_dsub>
 800922a:	2200      	movs	r2, #0
 800922c:	4606      	mov	r6, r0
 800922e:	460f      	mov	r7, r1
 8009230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f820 	bl	800027c <__adddf3>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4630      	mov	r0, r6
 8009242:	4639      	mov	r1, r7
 8009244:	f7f7 fafa 	bl	800083c <__aeabi_ddiv>
 8009248:	f04f 0a00 	mov.w	sl, #0
 800924c:	4604      	mov	r4, r0
 800924e:	460d      	mov	r5, r1
 8009250:	4622      	mov	r2, r4
 8009252:	462b      	mov	r3, r5
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 f9c6 	bl	80005e8 <__aeabi_dmul>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4680      	mov	r8, r0
 8009262:	4689      	mov	r9, r1
 8009264:	f7f7 f9c0 	bl	80005e8 <__aeabi_dmul>
 8009268:	a371      	add	r3, pc, #452	@ (adr r3, 8009430 <atan+0x2a8>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	f7f7 f9b9 	bl	80005e8 <__aeabi_dmul>
 8009276:	a370      	add	r3, pc, #448	@ (adr r3, 8009438 <atan+0x2b0>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f6 fffe 	bl	800027c <__adddf3>
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	f7f7 f9b0 	bl	80005e8 <__aeabi_dmul>
 8009288:	a36d      	add	r3, pc, #436	@ (adr r3, 8009440 <atan+0x2b8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f6 fff5 	bl	800027c <__adddf3>
 8009292:	4632      	mov	r2, r6
 8009294:	463b      	mov	r3, r7
 8009296:	f7f7 f9a7 	bl	80005e8 <__aeabi_dmul>
 800929a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009448 <atan+0x2c0>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f7f6 ffec 	bl	800027c <__adddf3>
 80092a4:	4632      	mov	r2, r6
 80092a6:	463b      	mov	r3, r7
 80092a8:	f7f7 f99e 	bl	80005e8 <__aeabi_dmul>
 80092ac:	a368      	add	r3, pc, #416	@ (adr r3, 8009450 <atan+0x2c8>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f6 ffe3 	bl	800027c <__adddf3>
 80092b6:	4632      	mov	r2, r6
 80092b8:	463b      	mov	r3, r7
 80092ba:	f7f7 f995 	bl	80005e8 <__aeabi_dmul>
 80092be:	a366      	add	r3, pc, #408	@ (adr r3, 8009458 <atan+0x2d0>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f7f6 ffda 	bl	800027c <__adddf3>
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	f7f7 f98c 	bl	80005e8 <__aeabi_dmul>
 80092d0:	a363      	add	r3, pc, #396	@ (adr r3, 8009460 <atan+0x2d8>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	4680      	mov	r8, r0
 80092d8:	4689      	mov	r9, r1
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 f983 	bl	80005e8 <__aeabi_dmul>
 80092e2:	a361      	add	r3, pc, #388	@ (adr r3, 8009468 <atan+0x2e0>)
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	f7f6 ffc6 	bl	8000278 <__aeabi_dsub>
 80092ec:	4632      	mov	r2, r6
 80092ee:	463b      	mov	r3, r7
 80092f0:	f7f7 f97a 	bl	80005e8 <__aeabi_dmul>
 80092f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009470 <atan+0x2e8>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f6 ffbd 	bl	8000278 <__aeabi_dsub>
 80092fe:	4632      	mov	r2, r6
 8009300:	463b      	mov	r3, r7
 8009302:	f7f7 f971 	bl	80005e8 <__aeabi_dmul>
 8009306:	a35c      	add	r3, pc, #368	@ (adr r3, 8009478 <atan+0x2f0>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f7f6 ffb4 	bl	8000278 <__aeabi_dsub>
 8009310:	4632      	mov	r2, r6
 8009312:	463b      	mov	r3, r7
 8009314:	f7f7 f968 	bl	80005e8 <__aeabi_dmul>
 8009318:	a359      	add	r3, pc, #356	@ (adr r3, 8009480 <atan+0x2f8>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	f7f6 ffab 	bl	8000278 <__aeabi_dsub>
 8009322:	4632      	mov	r2, r6
 8009324:	463b      	mov	r3, r7
 8009326:	f7f7 f95f 	bl	80005e8 <__aeabi_dmul>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4640      	mov	r0, r8
 8009330:	4649      	mov	r1, r9
 8009332:	f7f6 ffa3 	bl	800027c <__adddf3>
 8009336:	4622      	mov	r2, r4
 8009338:	462b      	mov	r3, r5
 800933a:	f7f7 f955 	bl	80005e8 <__aeabi_dmul>
 800933e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	d148      	bne.n	80093da <atan+0x252>
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f6 ff94 	bl	8000278 <__aeabi_dsub>
 8009350:	e72f      	b.n	80091b2 <atan+0x2a>
 8009352:	4b52      	ldr	r3, [pc, #328]	@ (800949c <atan+0x314>)
 8009354:	2200      	movs	r2, #0
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f6 ff8d 	bl	8000278 <__aeabi_dsub>
 800935e:	4b4f      	ldr	r3, [pc, #316]	@ (800949c <atan+0x314>)
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	2200      	movs	r2, #0
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f6 ff87 	bl	800027c <__adddf3>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4630      	mov	r0, r6
 8009374:	4639      	mov	r1, r7
 8009376:	f7f7 fa61 	bl	800083c <__aeabi_ddiv>
 800937a:	f04f 0a01 	mov.w	sl, #1
 800937e:	4604      	mov	r4, r0
 8009380:	460d      	mov	r5, r1
 8009382:	e765      	b.n	8009250 <atan+0xc8>
 8009384:	4b47      	ldr	r3, [pc, #284]	@ (80094a4 <atan+0x31c>)
 8009386:	429e      	cmp	r6, r3
 8009388:	d21c      	bcs.n	80093c4 <atan+0x23c>
 800938a:	4b47      	ldr	r3, [pc, #284]	@ (80094a8 <atan+0x320>)
 800938c:	2200      	movs	r2, #0
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	f7f6 ff71 	bl	8000278 <__aeabi_dsub>
 8009396:	4b44      	ldr	r3, [pc, #272]	@ (80094a8 <atan+0x320>)
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	2200      	movs	r2, #0
 800939e:	4620      	mov	r0, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 f921 	bl	80005e8 <__aeabi_dmul>
 80093a6:	4b3d      	ldr	r3, [pc, #244]	@ (800949c <atan+0x314>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	f7f6 ff67 	bl	800027c <__adddf3>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4630      	mov	r0, r6
 80093b4:	4639      	mov	r1, r7
 80093b6:	f7f7 fa41 	bl	800083c <__aeabi_ddiv>
 80093ba:	f04f 0a02 	mov.w	sl, #2
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	e745      	b.n	8009250 <atan+0xc8>
 80093c4:	4622      	mov	r2, r4
 80093c6:	462b      	mov	r3, r5
 80093c8:	4938      	ldr	r1, [pc, #224]	@ (80094ac <atan+0x324>)
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7f7 fa36 	bl	800083c <__aeabi_ddiv>
 80093d0:	f04f 0a03 	mov.w	sl, #3
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	e73a      	b.n	8009250 <atan+0xc8>
 80093da:	4b35      	ldr	r3, [pc, #212]	@ (80094b0 <atan+0x328>)
 80093dc:	4e35      	ldr	r6, [pc, #212]	@ (80094b4 <atan+0x32c>)
 80093de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f7f6 ff47 	bl	8000278 <__aeabi_dsub>
 80093ea:	4622      	mov	r2, r4
 80093ec:	462b      	mov	r3, r5
 80093ee:	f7f6 ff43 	bl	8000278 <__aeabi_dsub>
 80093f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093fe:	f7f6 ff3b 	bl	8000278 <__aeabi_dsub>
 8009402:	f1bb 0f00 	cmp.w	fp, #0
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	f6bf aedc 	bge.w	80091c6 <atan+0x3e>
 800940e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009412:	461d      	mov	r5, r3
 8009414:	e6d7      	b.n	80091c6 <atan+0x3e>
 8009416:	a51c      	add	r5, pc, #112	@ (adr r5, 8009488 <atan+0x300>)
 8009418:	e9d5 4500 	ldrd	r4, r5, [r5]
 800941c:	e6d3      	b.n	80091c6 <atan+0x3e>
 800941e:	bf00      	nop
 8009420:	54442d18 	.word	0x54442d18
 8009424:	3ff921fb 	.word	0x3ff921fb
 8009428:	8800759c 	.word	0x8800759c
 800942c:	7e37e43c 	.word	0x7e37e43c
 8009430:	e322da11 	.word	0xe322da11
 8009434:	3f90ad3a 	.word	0x3f90ad3a
 8009438:	24760deb 	.word	0x24760deb
 800943c:	3fa97b4b 	.word	0x3fa97b4b
 8009440:	a0d03d51 	.word	0xa0d03d51
 8009444:	3fb10d66 	.word	0x3fb10d66
 8009448:	c54c206e 	.word	0xc54c206e
 800944c:	3fb745cd 	.word	0x3fb745cd
 8009450:	920083ff 	.word	0x920083ff
 8009454:	3fc24924 	.word	0x3fc24924
 8009458:	5555550d 	.word	0x5555550d
 800945c:	3fd55555 	.word	0x3fd55555
 8009460:	2c6a6c2f 	.word	0x2c6a6c2f
 8009464:	bfa2b444 	.word	0xbfa2b444
 8009468:	52defd9a 	.word	0x52defd9a
 800946c:	3fadde2d 	.word	0x3fadde2d
 8009470:	af749a6d 	.word	0xaf749a6d
 8009474:	3fb3b0f2 	.word	0x3fb3b0f2
 8009478:	fe231671 	.word	0xfe231671
 800947c:	3fbc71c6 	.word	0x3fbc71c6
 8009480:	9998ebc4 	.word	0x9998ebc4
 8009484:	3fc99999 	.word	0x3fc99999
 8009488:	54442d18 	.word	0x54442d18
 800948c:	bff921fb 	.word	0xbff921fb
 8009490:	440fffff 	.word	0x440fffff
 8009494:	7ff00000 	.word	0x7ff00000
 8009498:	3fdbffff 	.word	0x3fdbffff
 800949c:	3ff00000 	.word	0x3ff00000
 80094a0:	3ff2ffff 	.word	0x3ff2ffff
 80094a4:	40038000 	.word	0x40038000
 80094a8:	3ff80000 	.word	0x3ff80000
 80094ac:	bff00000 	.word	0xbff00000
 80094b0:	08009650 	.word	0x08009650
 80094b4:	08009670 	.word	0x08009670

080094b8 <fabs>:
 80094b8:	ec51 0b10 	vmov	r0, r1, d0
 80094bc:	4602      	mov	r2, r0
 80094be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80094c2:	ec43 2b10 	vmov	d0, r2, r3
 80094c6:	4770      	bx	lr

080094c8 <_init>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr

080094d4 <_fini>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	bf00      	nop
 80094d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094da:	bc08      	pop	{r3}
 80094dc:	469e      	mov	lr, r3
 80094de:	4770      	bx	lr
