
CAN_NORMAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006e50  08006e50  00016e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007284  08007284  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800728c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d599  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001caf  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c40  00000000  00000000  0002f490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000980  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002225d  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d87e  00000000  00000000  00052cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d07d6  00000000  00000000  0006052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004544  00000000  00000000  00130d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00135248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e38 	.word	0x08006e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006e38 	.word	0x08006e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <SysTick_Handler>:
extern CAN_HandleTypeDef hCAN1;
extern TIM_HandleTypeDef htimer6;


void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ea8:	f000 fdbc 	bl	8001a24 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000eac:	f001 fd48 	bl	8002940 <HAL_SYSTICK_IRQHandler>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	TIM6->SR = 0;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <TIM6_DAC_IRQHandler+0x14>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40001000 	.word	0x40001000

08000ecc <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hCAN1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <CAN1_TX_IRQHandler+0x10>)
 8000ed2:	f001 f9ff 	bl	80022d4 <HAL_CAN_IRQHandler>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000250 	.word	0x20000250

08000ee0 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hCAN1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <CAN1_RX0_IRQHandler+0x10>)
 8000ee6:	f001 f9f5 	bl	80022d4 <HAL_CAN_IRQHandler>

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000250 	.word	0x20000250

08000ef4 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hCAN1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <CAN1_RX1_IRQHandler+0x10>)
 8000efa:	f001 f9eb 	bl	80022d4 <HAL_CAN_IRQHandler>

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000250 	.word	0x20000250

08000f08 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hCAN1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <CAN1_SCE_IRQHandler+0x10>)
 8000f0e:	f001 f9e1 	bl	80022d4 <HAL_CAN_IRQHandler>

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000250 	.word	0x20000250

08000f1c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <EXTI0_IRQHandler+0x14>)
 8000f22:	f002 fbdd 	bl	80036e0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f001 fece 	bl	8002cc8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000208 	.word	0x20000208

08000f34 <main>:
UART_HandleTypeDef huart2;

uint8_t tim_cnt = 0;

int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f38:	f000 fd22 	bl	8001980 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000f3c:	2032      	movs	r0, #50	; 0x32
 8000f3e:	f000 f8c5 	bl	80010cc <SystemClock_Config_HSE>

	GPIO_Init();
 8000f42:	f000 f81f 	bl	8000f84 <GPIO_Init>

	UART2_Init();
 8000f46:	f000 f89b 	bl	8001080 <UART2_Init>

	TIMER_Init();
 8000f4a:	f000 f87d 	bl	8001048 <TIMER_Init>

	CAN1_Init();
 8000f4e:	f000 f955 	bl	80011fc <CAN1_Init>

	CAN_Filter_Config();
 8000f52:	f000 f989 	bl	8001268 <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hCAN1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 8000f56:	f240 4103 	movw	r1, #1027	; 0x403
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <main+0x44>)
 8000f5c:	f001 f994 	bl	8002288 <HAL_CAN_ActivateNotification>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <main+0x36>
	{
		Error_Handler();
 8000f66:	f000 f809 	bl	8000f7c <Error_Handler>
		while(! (TIM6->SR & TIM_SR_UIF) );
		TIM6->SR = 0; // clear the UIF field
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	}*/

	HAL_CAN_Start(&hCAN1);
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <main+0x44>)
 8000f6c:	f000 ff56 	bl	8001e1c <HAL_CAN_Start>

	return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000250 	.word	0x20000250

08000f7c <Error_Handler>:

void Error_Handler()
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	while(1);
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x4>
	...

08000f84 <GPIO_Init>:
}

void GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <GPIO_Init+0xb8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <GPIO_Init+0xb8>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <GPIO_Init+0xb8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <GPIO_Init+0xb8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <GPIO_Init+0xb8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <GPIO_Init+0xb8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

	//for input user button in first board
	GPIO_InitTypeDef GPIO_BTN;
	GPIO_BTN.Pin = GPIO_PIN_0;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
	GPIO_BTN.Mode = GPIO_MODE_IT_RISING;
 8000fc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fca:	623b      	str	r3, [r7, #32]
	GPIO_BTN.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &GPIO_BTN);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <GPIO_Init+0xbc>)
 8000fd8:	f001 fcc0 	bl	800295c <HAL_GPIO_Init>

	//for output LEDs (on board) in second board
	GPIO_InitTypeDef GPIO_LEDs;
	GPIO_LEDs.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
	GPIO_LEDs.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]

	GPIO_LEDs.Pin = GPIO_PIN_12;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_LEDs);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4814      	ldr	r0, [pc, #80]	; (8001044 <GPIO_Init+0xc0>)
 8000ff2:	f001 fcb3 	bl	800295c <HAL_GPIO_Init>

	GPIO_LEDs.Pin = GPIO_PIN_13;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_LEDs);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4619      	mov	r1, r3
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <GPIO_Init+0xc0>)
 8001004:	f001 fcaa 	bl	800295c <HAL_GPIO_Init>

	GPIO_LEDs.Pin = GPIO_PIN_14;
 8001008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800100c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_LEDs);
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <GPIO_Init+0xc0>)
 8001016:	f001 fca1 	bl	800295c <HAL_GPIO_Init>

	GPIO_LEDs.Pin = GPIO_PIN_15;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &GPIO_LEDs);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <GPIO_Init+0xc0>)
 8001028:	f001 fc98 	bl	800295c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800102c:	2006      	movs	r0, #6
 800102e:	f001 fc50 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020c00 	.word	0x40020c00

08001048 <TIMER_Init>:


void TIMER_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <TIMER_Init+0x30>)
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <TIMER_Init+0x34>)
 8001050:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler =  4999 ;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <TIMER_Init+0x30>)
 8001054:	f241 3287 	movw	r2, #4999	; 0x1387
 8001058:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 10000-1;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <TIMER_Init+0x30>)
 800105c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001060:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <TIMER_Init+0x30>)
 8001064:	f002 faec 	bl	8003640 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <TIMER_Init+0x2a>
	{
		Error_Handler();
 800106e:	f7ff ff85 	bl	8000f7c <Error_Handler>
	}

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000208 	.word	0x20000208
 800107c:	40001000 	.word	0x40001000

08001080 <UART2_Init>:


void UART2_Init()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <UART2_Init+0x44>)
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <UART2_Init+0x48>)
 8001088:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <UART2_Init+0x44>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <UART2_Init+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <UART2_Init+0x44>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <UART2_Init+0x44>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <UART2_Init+0x44>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <UART2_Init+0x44>)
 80010ac:	220c      	movs	r2, #12
 80010ae:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <UART2_Init+0x44>)
 80010b2:	f002 fc31 	bl	8003918 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <UART2_Init+0x40>
	{
		//There is a problem
		Error_Handler();
 80010bc:	f7ff ff5e 	bl	8000f7c <Error_Handler>
	}

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000278 	.word	0x20000278
 80010c8:	40004400 	.word	0x40004400

080010cc <SystemClock_Config_HSE>:

void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b096      	sub	sp, #88	; 0x58
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
	uint8_t flash_latency = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 80010dc:	2307      	movs	r3, #7
 80010de:	623b      	str	r3, [r7, #32]
	Osc_Init.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.LSEState = RCC_LSE_ON;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.HSIState = RCC_HSI_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b78      	cmp	r3, #120	; 0x78
 80010fc:	d034      	beq.n	8001168 <SystemClock_Config_HSE+0x9c>
 80010fe:	2b78      	cmp	r3, #120	; 0x78
 8001100:	dc76      	bgt.n	80011f0 <SystemClock_Config_HSE+0x124>
 8001102:	2b32      	cmp	r3, #50	; 0x32
 8001104:	d002      	beq.n	800110c <SystemClock_Config_HSE+0x40>
 8001106:	2b54      	cmp	r3, #84	; 0x54
 8001108:	d017      	beq.n	800113a <SystemClock_Config_HSE+0x6e>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
		  flash_latency = 3;
		 break;

	  default:
	  return ;
 800110a:	e071      	b.n	80011f0 <SystemClock_Config_HSE+0x124>
		  Osc_Init.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 8001110:	2332      	movs	r3, #50	; 0x32
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
		  flash_latency = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 break;
 8001138:	e02e      	b.n	8001198 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 800113a:	2304      	movs	r3, #4
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 800113e:	2354      	movs	r3, #84	; 0x54
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
		  flash_latency = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 break;
 8001166:	e017      	b.n	8001198 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 800116c:	2378      	movs	r3, #120	; 0x78
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001178:	230f      	movs	r3, #15
 800117a:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001184:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001188:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	61fb      	str	r3, [r7, #28]
		  flash_latency = 3;
 8001190:	2303      	movs	r3, #3
 8001192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		 break;
 8001196:	bf00      	nop
	}

	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fdb7 	bl	8002d10 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config_HSE+0xe0>
	{
		Error_Handler();
 80011a8:	f7ff fee8 	bl	8000f7c <Error_Handler>
	}


	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80011ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f822 	bl	8003200 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config_HSE+0xfa>
	{
		Error_Handler();
 80011c2:	f7ff fedb 	bl	8000f7c <Error_Handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80011c6:	f002 fa07 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80011ca:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 80011cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SystemClock_Config_HSE+0x12c>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	099b      	lsrs	r3, r3, #6
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fb89 	bl	80028ee <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011dc:	2004      	movs	r0, #4
 80011de:	f001 fb93 	bl	8002908 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f001 fb56 	bl	800289a <HAL_NVIC_SetPriority>
 80011ee:	e000      	b.n	80011f2 <SystemClock_Config_HSE+0x126>
	  return ;
 80011f0:	bf00      	nop

}
 80011f2:	3758      	adds	r7, #88	; 0x58
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	10624dd3 	.word	0x10624dd3

080011fc <CAN1_Init>:
		CAN1_Tx();
		tim_cnt++;
	}
}
void CAN1_Init()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	hCAN1.Instance = CAN1;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <CAN1_Init+0x64>)
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <CAN1_Init+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
	hCAN1.Init.AutoBusOff  = DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <CAN1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	765a      	strb	r2, [r3, #25]
	hCAN1.Init.AutoRetransmission = ENABLE;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <CAN1_Init+0x64>)
 800120e:	2201      	movs	r2, #1
 8001210:	76da      	strb	r2, [r3, #27]
	hCAN1.Init.AutoWakeUp = DISABLE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <CAN1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	769a      	strb	r2, [r3, #26]
	hCAN1.Init.Mode = CAN_MODE_NORMAL;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <CAN1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
	hCAN1.Init.ReceiveFifoLocked = DISABLE;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <CAN1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	771a      	strb	r2, [r3, #28]
	hCAN1.Init.TransmitFifoPriority = DISABLE;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <CAN1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	775a      	strb	r2, [r3, #29]
	hCAN1.Init.TimeTriggeredMode = DISABLE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <CAN1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	761a      	strb	r2, [r3, #24]

	//configure bit timing
	hCAN1.Init.Prescaler = 5;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <CAN1_Init+0x64>)
 8001232:	2205      	movs	r2, #5
 8001234:	605a      	str	r2, [r3, #4]
	hCAN1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <CAN1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	hCAN1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <CAN1_Init+0x64>)
 800123e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001242:	611a      	str	r2, [r3, #16]
	hCAN1.Init.TimeSeg2 = CAN_BS1_1TQ;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <CAN1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hCAN1) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <CAN1_Init+0x64>)
 800124c:	f000 fc0a 	bl	8001a64 <HAL_CAN_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <CAN1_Init+0x5e>
	{
		Error_Handler();
 8001256:	f7ff fe91 	bl	8000f7c <Error_Handler>
	}

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000250 	.word	0x20000250
 8001264:	40006400 	.word	0x40006400

08001268 <CAN_Filter_Config>:
		Error_Handler();
	}

}
void CAN_Filter_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filterh;

	can_filterh.FilterActivation = CAN_FILTER_ENABLE;
 800126e:	2301      	movs	r3, #1
 8001270:	623b      	str	r3, [r7, #32]
	can_filterh.FilterBank = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
	can_filterh.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
	can_filterh.FilterIdHigh = 0x0000;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
	can_filterh.FilterIdLow = 0x0000;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
	can_filterh.FilterMaskIdHigh = 0x0000;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
	can_filterh.FilterMaskIdLow = 0x0000;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
	can_filterh.FilterMode = CAN_FILTERMODE_IDMASK;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
	can_filterh.FilterScale = CAN_FILTERSCALE_32BIT;
 800128e:	2301      	movs	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hCAN1, &can_filterh) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <CAN_Filter_Config+0x48>)
 8001298:	f000 fce0 	bl	8001c5c <HAL_CAN_ConfigFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 80012a2:	f7ff fe6b 	bl	8000f7c <Error_Handler>
	}
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000250 	.word	0x20000250

080012b4 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	; 0x40
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	char umessage [50];
	sprintf(umessage, "Transmission Successful: M0\r\n");
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	490a      	ldr	r1, [pc, #40]	; (80012ec <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fc5c 	bl	8004b80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) umessage, strlen(umessage), HAL_MAX_DELAY);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ffcf 	bl	8000270 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80012e0:	f002 fb6a 	bl	80039b8 <HAL_UART_Transmit>
}
 80012e4:	bf00      	nop
 80012e6:	3740      	adds	r7, #64	; 0x40
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08006e50 	.word	0x08006e50
 80012f0:	20000278 	.word	0x20000278

080012f4 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	char umessage [50];
	sprintf(umessage, "Transmission Successful: M1\r\n");
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	490a      	ldr	r1, [pc, #40]	; (800132c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fc3c 	bl	8004b80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) umessage, strlen(umessage), HAL_MAX_DELAY);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ffaf 	bl	8000270 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8001320:	f002 fb4a 	bl	80039b8 <HAL_UART_Transmit>
}
 8001324:	bf00      	nop
 8001326:	3740      	adds	r7, #64	; 0x40
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08006e70 	.word	0x08006e70
 8001330:	20000278 	.word	0x20000278

08001334 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	; 0x40
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	char umessage [50];
	sprintf(umessage, "Transmission Successful: M2\r\n");
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	490a      	ldr	r1, [pc, #40]	; (800136c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fc1c 	bl	8004b80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) umessage, strlen(umessage), HAL_MAX_DELAY);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff8f 	bl	8000270 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f107 010c 	add.w	r1, r7, #12
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8001360:	f002 fb2a 	bl	80039b8 <HAL_UART_Transmit>
}
 8001364:	bf00      	nop
 8001366:	3740      	adds	r7, #64	; 0x40
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	08006e90 	.word	0x08006e90
 8001370:	20000278 	.word	0x20000278

08001374 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b098      	sub	sp, #96	; 0x60
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t rcvd_msg[8];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&hCAN1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)!= HAL_OK)
 800137c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001380:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001384:	2100      	movs	r1, #0
 8001386:	4828      	ldr	r0, [pc, #160]	; (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001388:	f000 fe5c 	bl	8002044 <HAL_CAN_GetRxMessage>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8001392:	f7ff fdf3 	bl	8000f7c <Error_Handler>
	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0)
 8001396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001398:	f240 625d 	movw	r2, #1629	; 0x65d
 800139c:	4293      	cmp	r3, r2
 800139e:	d110      	bne.n	80013c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 80013a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10d      	bne.n	80013c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	{
		//n2 receives data containing LED number from n1
		LED_Manage_Output(led_no);
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f890 	bl	80014d0 <LED_Manage_Output>
		sprintf(msg, "Message Received: #%X\r\n", rcvd_msg[0]);
 80013b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80013b4:	461a      	mov	r2, r3
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fbdf 	bl	8004b80 <siprintf>

	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 1)
 80013c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c4:	f240 625d 	movw	r2, #1629	; 0x65d
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d108      	bne.n	80013de <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 80013cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d105      	bne.n	80013de <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	{
		//n2 receives remote from n1 asking for 2 bytes of data
		Send_response(RxHeader.StdId);
 80013d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f850 	bl	800147c <Send_response>
 80013dc:	e021      	b.n	8001422 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		return;
	}

	if(RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 80013de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e0:	f240 6251 	movw	r2, #1617	; 0x651
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d10e      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 80013e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10b      	bne.n	8001406 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	{
		//n1 receives from n2. This should be the data it requested
		sprintf(msg, "Reply Received: #%X\r\n", rcvd_msg[0] << 8 | rcvd_msg[1]);
 80013ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80013f8:	431a      	orrs	r2, r3
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fbbd 	bl	8004b80 <siprintf>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&msg, strlen(msg), HAL_MAX_DELAY);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe ff30 	bl	8000270 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0108 	add.w	r1, r7, #8
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800141e:	f002 facb 	bl	80039b8 <HAL_UART_Transmit>

}
 8001422:	3760      	adds	r7, #96	; 0x60
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000250 	.word	0x20000250
 800142c:	200002c0 	.word	0x200002c0
 8001430:	08006eb0 	.word	0x08006eb0
 8001434:	08006ec8 	.word	0x08006ec8
 8001438:	20000278 	.word	0x20000278

0800143c <HAL_CAN_ErrorCallback>:


void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b090      	sub	sp, #64	; 0x40
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "CAN Error Detected");
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	490a      	ldr	r1, [pc, #40]	; (8001474 <HAL_CAN_ErrorCallback+0x38>)
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fb98 	bl	8004b80 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)&msg, strlen(msg), HAL_MAX_DELAY);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ff0b 	bl	8000270 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 010c 	add.w	r1, r7, #12
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <HAL_CAN_ErrorCallback+0x3c>)
 8001468:	f002 faa6 	bl	80039b8 <HAL_UART_Transmit>
}
 800146c:	bf00      	nop
 800146e:	3740      	adds	r7, #64	; 0x40
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	08006ee0 	.word	0x08006ee0
 8001478:	20000278 	.word	0x20000278

0800147c <Send_response>:

void Send_response(uint8_t StdID)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]

	uint32_t MailBox;

	uint8_t response [2] = { 0xAB, 0xCD };
 8001486:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 800148a:	813b      	strh	r3, [r7, #8]

	TxHeader.DLC = 2;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <Send_response+0x4c>)
 800148e:	2202      	movs	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <Send_response+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = StdID;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <Send_response+0x4c>)
 800149c:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <Send_response+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]

	if(HAL_CAN_AddTxMessage(&hCAN1, &TxHeader, response, &MailBox) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	f107 0208 	add.w	r2, r7, #8
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <Send_response+0x4c>)
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <Send_response+0x50>)
 80014b0:	f000 fcf8 	bl	8001ea4 <HAL_CAN_AddTxMessage>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <Send_response+0x42>
	{
		Error_Handler();
 80014ba:	f7ff fd5f 	bl	8000f7c <Error_Handler>
	}


}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001f0 	.word	0x200001f0
 80014cc:	20000250 	.word	0x20000250

080014d0 <LED_Manage_Output>:
void LED_Manage_Output(uint8_t led_no)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	switch(led_no)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3b01      	subs	r3, #1
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d86e      	bhi.n	80015c0 <LED_Manage_Output+0xf0>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <LED_Manage_Output+0x18>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	0800152b 	.word	0x0800152b
 80014f0:	0800155d 	.word	0x0800155d
 80014f4:	0800158f 	.word	0x0800158f
	{
	case 1:
	{
		//switch on LED_GREEN (rest all OFF)
		HAL_GPIO_WritePin(GPIOD, LED_GREEN, SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fe:	4834      	ldr	r0, [pc, #208]	; (80015d0 <LED_Manage_Output+0x100>)
 8001500:	f001 fbc8 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	4831      	ldr	r0, [pc, #196]	; (80015d0 <LED_Manage_Output+0x100>)
 800150c:	f001 fbc2 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_RED, RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001516:	482e      	ldr	r0, [pc, #184]	; (80015d0 <LED_Manage_Output+0x100>)
 8001518:	f001 fbbc 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE, RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	482b      	ldr	r0, [pc, #172]	; (80015d0 <LED_Manage_Output+0x100>)
 8001524:	f001 fbb6 	bl	8002c94 <HAL_GPIO_WritePin>
		break;
 8001528:	e04d      	b.n	80015c6 <LED_Manage_Output+0xf6>
	}

	case 2:
	{
		//switch on LED_ORANGE
		HAL_GPIO_WritePin(GPIOD, LED_GREEN, RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <LED_Manage_Output+0x100>)
 8001532:	f001 fbaf 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	4824      	ldr	r0, [pc, #144]	; (80015d0 <LED_Manage_Output+0x100>)
 800153e:	f001 fba9 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_RED, RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	4821      	ldr	r0, [pc, #132]	; (80015d0 <LED_Manage_Output+0x100>)
 800154a:	f001 fba3 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE, RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001554:	481e      	ldr	r0, [pc, #120]	; (80015d0 <LED_Manage_Output+0x100>)
 8001556:	f001 fb9d 	bl	8002c94 <HAL_GPIO_WritePin>
		break;
 800155a:	e034      	b.n	80015c6 <LED_Manage_Output+0xf6>
	}

	case 3:
	{
		//switch on LED_RED
		HAL_GPIO_WritePin(GPIOD, LED_GREEN, RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <LED_Manage_Output+0x100>)
 8001564:	f001 fb96 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <LED_Manage_Output+0x100>)
 8001570:	f001 fb90 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_RED, SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157a:	4815      	ldr	r0, [pc, #84]	; (80015d0 <LED_Manage_Output+0x100>)
 800157c:	f001 fb8a 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE, RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <LED_Manage_Output+0x100>)
 8001588:	f001 fb84 	bl	8002c94 <HAL_GPIO_WritePin>
		break;
 800158c:	e01b      	b.n	80015c6 <LED_Manage_Output+0xf6>
	}

	case 4:
	{
		//switch on LED_BLUE
		HAL_GPIO_WritePin(GPIOD, LED_GREEN, RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <LED_Manage_Output+0x100>)
 8001596:	f001 fb7d 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE, RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <LED_Manage_Output+0x100>)
 80015a2:	f001 fb77 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_RED, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <LED_Manage_Output+0x100>)
 80015ae:	f001 fb71 	bl	8002c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <LED_Manage_Output+0x100>)
 80015ba:	f001 fb6b 	bl	8002c94 <HAL_GPIO_WritePin>
		break;
 80015be:	e002      	b.n	80015c6 <LED_Manage_Output+0xf6>
	}
	default:
		Error_Handler();
 80015c0:	f7ff fcdc 	bl	8000f7c <Error_Handler>
	}

}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

 void HAL_MspInit(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	 // Processor specific low level inits

	 //1. Set up the priority grouping of the arm cortex m4 processor
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f001 f953 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

	 //2. Enable the system exceptions
	 SCB->SHCSR |= 0x7 << 16;
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_MspInit+0x40>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_MspInit+0x40>)
 80015e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80015e8:	6253      	str	r3, [r2, #36]	; 0x24

	 //3. Set up the priority for the system exceptions.
	 HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0); //for mem manage fault
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	f06f 000b 	mvn.w	r0, #11
 80015f2:	f001 f952 	bl	800289a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0); //for bus fault
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	f06f 000a 	mvn.w	r0, #10
 80015fe:	f001 f94c 	bl	800289a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0); //for usage fault
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	f06f 0009 	mvn.w	r0, #9
 800160a:	f001 f946 	bl	800289a <HAL_NVIC_SetPriority>

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_TIM_Base_MspInit>:

 void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
 {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	 //1. enable the TIM6 clock
	 __HAL_RCC_TIM6_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_TIM_Base_MspInit+0x3c>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x3c>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_TIM_Base_MspInit+0x3c>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

	 //2. Enable the interrupt
	 HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163c:	2036      	movs	r0, #54	; 0x36
 800163e:	f001 f948 	bl	80028d2 <HAL_NVIC_EnableIRQ>

	 HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	210f      	movs	r1, #15
 8001646:	2036      	movs	r0, #54	; 0x36
 8001648:	f001 f927 	bl	800289a <HAL_NVIC_SetPriority>
 }
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_CAN_MspInit>:

 void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 {
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 	__HAL_RCC_CAN1_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_CAN_MspInit+0x8c>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_CAN_MspInit+0x8c>)
 800166a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_CAN_MspInit+0x8c>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
 	//PD0-->CANRX
 	//PD1--->CANTX

 	GPIO_InitTypeDef gpiod;

 	gpiod.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
 	gpiod.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001680:	2303      	movs	r3, #3
 8001682:	60fb      	str	r3, [r7, #12]
 	gpiod.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 	gpiod.Speed = GPIO_SPEED_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	61bb      	str	r3, [r7, #24]
 	gpiod.Alternate = GPIO_AF9_CAN1;
 800168c:	2309      	movs	r3, #9
 800168e:	61fb      	str	r3, [r7, #28]

 	HAL_GPIO_Init(GPIOD, &gpiod);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	4814      	ldr	r0, [pc, #80]	; (80016e8 <HAL_CAN_MspInit+0x90>)
 8001698:	f001 f960 	bl	800295c <HAL_GPIO_Init>

 	//SET PRIORITY FOR DIFFERENT INTERRUPTS
 	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	210f      	movs	r1, #15
 80016a0:	2013      	movs	r0, #19
 80016a2:	f001 f8fa 	bl	800289a <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	2014      	movs	r0, #20
 80016ac:	f001 f8f5 	bl	800289a <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	210f      	movs	r1, #15
 80016b4:	2015      	movs	r0, #21
 80016b6:	f001 f8f0 	bl	800289a <HAL_NVIC_SetPriority>
 	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210f      	movs	r1, #15
 80016be:	2016      	movs	r0, #22
 80016c0:	f001 f8eb 	bl	800289a <HAL_NVIC_SetPriority>

 	//Enable the IRQs
 	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80016c4:	2013      	movs	r0, #19
 80016c6:	f001 f904 	bl	80028d2 <HAL_NVIC_EnableIRQ>
 	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f001 f901 	bl	80028d2 <HAL_NVIC_EnableIRQ>
 	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016d0:	2015      	movs	r0, #21
 80016d2:	f001 f8fe 	bl	80028d2 <HAL_NVIC_EnableIRQ>
 	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80016d6:	2016      	movs	r0, #22
 80016d8:	f001 f8fb 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020c00 	.word	0x40020c00

080016ec <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 	 GPIO_InitTypeDef gpio_uart;
 	 //here we are going to do the low level inits. of the USART2 peripheral

 	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
 	 __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_UART_MspInit+0x88>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_UART_MspInit+0x88>)
 80016fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_UART_MspInit+0x88>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_UART_MspInit+0x88>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_UART_MspInit+0x88>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_UART_MspInit+0x88>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

 	 //2 . Do the pin muxing configurations
 	 gpio_uart.Pin = GPIO_PIN_2;
 800172c:	2304      	movs	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
 	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
 	 gpio_uart.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 800173c:	2307      	movs	r3, #7
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
 	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <HAL_UART_MspInit+0x8c>)
 8001748:	f001 f908 	bl	800295c <HAL_GPIO_Init>

 	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800174c:	2308      	movs	r3, #8
 800174e:	617b      	str	r3, [r7, #20]
 	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <HAL_UART_MspInit+0x8c>)
 8001758:	f001 f900 	bl	800295c <HAL_GPIO_Init>

 	 //3 . Enable the IRQ and set up the priority (NVIC settings )
 	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175c:	2026      	movs	r0, #38	; 0x26
 800175e:	f001 f8b8 	bl	80028d2 <HAL_NVIC_EnableIRQ>
 	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8001762:	2200      	movs	r2, #0
 8001764:	210f      	movs	r1, #15
 8001766:	2026      	movs	r0, #38	; 0x26
 8001768:	f001 f897 	bl	800289a <HAL_NVIC_SetPriority>

 }
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_kill>:

int _kill(int pid, int sig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001796:	f003 faa9 	bl	8004cec <__errno>
 800179a:	4603      	mov	r3, r0
 800179c:	2216      	movs	r2, #22
 800179e:	601a      	str	r2, [r3, #0]
  return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_exit>:

void _exit (int status)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffe7 	bl	800178c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017be:	e7fe      	b.n	80017be <_exit+0x12>

080017c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e00a      	b.n	80017e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d2:	f3af 8000 	nop.w
 80017d6:	4601      	mov	r1, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	60ba      	str	r2, [r7, #8]
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf0      	blt.n	80017d2 <_read+0x12>
  }

  return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e009      	b.n	8001820 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf1      	blt.n	800180c <_write+0x12>
  }
  return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_close>:

int _close(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185a:	605a      	str	r2, [r3, #4]
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_isatty>:

int _isatty(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f003 fa0e 	bl	8004cec <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20020000 	.word	0x20020000
 80018fc:	00000400 	.word	0x00000400
 8001900:	200002c4 	.word	0x200002c4
 8001904:	20000418 	.word	0x20000418

08001908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001930:	f7ff ffea 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195a:	f003 f9cd 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff fae9 	bl	8000f34 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001970:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 8001974:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001978:	20000418 	.word	0x20000418

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 ff6b 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fe0e 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 ff83 	bl	80028ee <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 ff4b 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	200002c8 	.word	0x200002c8

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200002c8 	.word	0x200002c8

08001a64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0ed      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fde8 	bl	8001658 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff ffd8 	bl	8001a4c <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a9e:	e012      	b.n	8001ac6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa0:	f7ff ffd4 	bl	8001a4c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d90b      	bls.n	8001ac6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0c5      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0e5      	beq.n	8001aa0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0202 	bic.w	r2, r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae4:	f7ff ffb2 	bl	8001a4c <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aea:	e012      	b.n	8001b12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aec:	f7ff ffae 	bl	8001a4c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b0a      	cmp	r3, #10
 8001af8:	d90b      	bls.n	8001b12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e09f      	b.n	8001c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e5      	bne.n	8001aec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7e1b      	ldrb	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e007      	b.n	8001b4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7e5b      	ldrb	r3, [r3, #25]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7e9b      	ldrb	r3, [r3, #26]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e007      	b.n	8001b9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0220 	bic.w	r2, r2, #32
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7edb      	ldrb	r3, [r3, #27]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0210 	bic.w	r2, r2, #16
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e007      	b.n	8001bc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0210 	orr.w	r2, r2, #16
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7f1b      	ldrb	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e007      	b.n	8001bf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7f5b      	ldrb	r3, [r3, #29]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0204 	orr.w	r2, r2, #4
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0204 	bic.w	r2, r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	ea42 0103 	orr.w	r1, r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d003      	beq.n	8001c82 <HAL_CAN_ConfigFilter+0x26>
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	f040 80be 	bne.w	8001dfe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c84:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d123      	bne.n	8001d2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3248      	adds	r2, #72	; 0x48
 8001d0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	3348      	adds	r3, #72	; 0x48
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d122      	bne.n	8001d7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3248      	adds	r2, #72	; 0x48
 8001d5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d94:	e007      	b.n	8001da6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001df0:	f023 0201 	bic.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e006      	b.n	8001e0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40006400 	.word	0x40006400

08001e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d12e      	bne.n	8001e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fe00 	bl	8001a4c <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e4e:	e012      	b.n	8001e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e50:	f7ff fdfc 	bl	8001a4c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d90b      	bls.n	8001e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e012      	b.n	8001e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e006      	b.n	8001e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_AddTxMessage+0x2c>
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 80ad 	bne.w	800202a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8095 	beq.w	800201a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	0e1b      	lsrs	r3, r3, #24
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10d      	bne.n	8001f28 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	6809      	ldr	r1, [r1, #0]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3318      	adds	r3, #24
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00f      	b.n	8001f48 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3318      	adds	r3, #24
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	440b      	add	r3, r1
 8001f46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3318      	adds	r3, #24
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	440b      	add	r3, r1
 8001f58:	3304      	adds	r3, #4
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	7d1b      	ldrb	r3, [r3, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d111      	bne.n	8001f88 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3318      	adds	r3, #24
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	6811      	ldr	r1, [r2, #0]
 8001f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3318      	adds	r3, #24
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	440b      	add	r3, r1
 8001f84:	3304      	adds	r3, #4
 8001f86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3307      	adds	r3, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	061a      	lsls	r2, r3, #24
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3306      	adds	r3, #6
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	3204      	adds	r2, #4
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	4610      	mov	r0, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	6811      	ldr	r1, [r2, #0]
 8001fb0:	ea43 0200 	orr.w	r2, r3, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	061a      	lsls	r2, r3, #24
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	ea43 0200 	orr.w	r2, r3, r0
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	440b      	add	r3, r1
 8001ff0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ff4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3318      	adds	r3, #24
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	440b      	add	r3, r1
 8002014:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e00e      	b.n	8002038 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e006      	b.n	8002038 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3724      	adds	r7, #36	; 0x24
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d003      	beq.n	8002068 <HAL_CAN_GetRxMessage+0x24>
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b02      	cmp	r3, #2
 8002064:	f040 8103 	bne.w	800226e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10e      	bne.n	800208c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d116      	bne.n	80020aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0f7      	b.n	800227c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d107      	bne.n	80020aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e8      	b.n	800227c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	331b      	adds	r3, #27
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0204 	and.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	331b      	adds	r3, #27
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0d5b      	lsrs	r3, r3, #21
 80020d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e00b      	b.n	80020fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	331b      	adds	r3, #27
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	331b      	adds	r3, #27
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	4413      	add	r3, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0202 	and.w	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2208      	movs	r2, #8
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e00b      	b.n	8002148 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	331b      	adds	r3, #27
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	b2da      	uxtb	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	331b      	adds	r3, #27
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0a1a      	lsrs	r2, r3, #8
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0c1a      	lsrs	r2, r3, #16
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3302      	adds	r3, #2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e1a      	lsrs	r2, r3, #24
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	3303      	adds	r3, #3
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	3304      	adds	r3, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0a1a      	lsrs	r2, r3, #8
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3305      	adds	r3, #5
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0c1a      	lsrs	r2, r3, #16
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3306      	adds	r3, #6
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e1a      	lsrs	r2, r3, #24
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3307      	adds	r3, #7
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d108      	bne.n	800225a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0220 	orr.w	r2, r2, #32
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	e007      	b.n	800226a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0220 	orr.w	r2, r2, #32
 8002268:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e006      	b.n	800227c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
  }
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002298:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <HAL_CAN_ActivateNotification+0x1e>
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d109      	bne.n	80022ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6959      	ldr	r1, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e006      	b.n	80022c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07c      	beq.n	8002414 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d023      	beq.n	800236c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe ffbc 	bl	80012b4 <HAL_CAN_TxMailbox0CompleteCallback>
 800233c:	e016      	b.n	800236c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e00c      	b.n	800236c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e002      	b.n	800236c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f96b 	bl	8002642 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d024      	beq.n	80023c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe ffb2 	bl	80012f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002390:	e016      	b.n	80023c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	e00c      	b.n	80023c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	e002      	b.n	80023c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f94b 	bl	8002656 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d024      	beq.n	8002414 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe ffa8 	bl	8001334 <HAL_CAN_TxMailbox2CompleteCallback>
 80023e4:	e016      	b.n	8002414 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	e00c      	b.n	8002414 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e002      	b.n	8002414 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f92b 	bl	800266a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2210      	movs	r2, #16
 8002436:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2208      	movs	r2, #8
 8002452:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f912 	bl	800267e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe ff7e 	bl	8001374 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2210      	movs	r2, #16
 800249a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2208      	movs	r2, #8
 80024b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8f4 	bl	80026a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8db 	bl	8002692 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8de 	bl	80026ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8d7 	bl	80026ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d07b      	beq.n	8002622 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d072      	beq.n	800261a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	2b00      	cmp	r3, #0
 8002590:	d043      	beq.n	800261a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03e      	beq.n	800261a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025a2:	2b60      	cmp	r3, #96	; 0x60
 80025a4:	d02b      	beq.n	80025fe <HAL_CAN_IRQHandler+0x32a>
 80025a6:	2b60      	cmp	r3, #96	; 0x60
 80025a8:	d82e      	bhi.n	8002608 <HAL_CAN_IRQHandler+0x334>
 80025aa:	2b50      	cmp	r3, #80	; 0x50
 80025ac:	d022      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x320>
 80025ae:	2b50      	cmp	r3, #80	; 0x50
 80025b0:	d82a      	bhi.n	8002608 <HAL_CAN_IRQHandler+0x334>
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d019      	beq.n	80025ea <HAL_CAN_IRQHandler+0x316>
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d826      	bhi.n	8002608 <HAL_CAN_IRQHandler+0x334>
 80025ba:	2b30      	cmp	r3, #48	; 0x30
 80025bc:	d010      	beq.n	80025e0 <HAL_CAN_IRQHandler+0x30c>
 80025be:	2b30      	cmp	r3, #48	; 0x30
 80025c0:	d822      	bhi.n	8002608 <HAL_CAN_IRQHandler+0x334>
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d002      	beq.n	80025cc <HAL_CAN_IRQHandler+0x2f8>
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d005      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025ca:	e01d      	b.n	8002608 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d4:	e019      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025de:	e014      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f043 0320 	orr.w	r3, r3, #32
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e8:	e00f      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f2:	e00a      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025fc:	e005      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002606:	e000      	b.n	800260a <HAL_CAN_IRQHandler+0x336>
            break;
 8002608:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002618:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2204      	movs	r2, #4
 8002620:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe ff01 	bl	800143c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d106      	bne.n	8002924 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002922:	e005      	b.n	8002930 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800292a:	f023 0304 	bic.w	r3, r3, #4
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002944:	f000 f802 	bl	800294c <HAL_SYSTICK_Callback>
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e16b      	b.n	8002c50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 815a 	bne.w	8002c4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80b4 	beq.w	8002c4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_GPIO_Init+0x314>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02b      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_GPIO_Init+0x318>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d025      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x31c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x320>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <HAL_GPIO_Init+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x328>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x212>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x20a>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b66:	2308      	movs	r3, #8
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae90 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f806 	bl	8002cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e267      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d075      	beq.n	8002e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b82      	ldr	r3, [pc, #520]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x108>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e242      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x74>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x98>
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xb0>
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fe40 	bl	8001a4c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fe3c 	bl	8001a4c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e207      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fe2c 	bl	8001a4c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fe28 	bl	8001a4c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1f3      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0xe8>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c7      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe fde1 	bl	8001a4c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fddd 	bl	8001a4c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a8      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4925      	ldr	r1, [pc, #148]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x244>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fdc0 	bl	8001a4c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fdbc 	bl	8001a4c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e187      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe fda0 	bl	8001a4c <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe fd9c 	bl	8001a4c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e167      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x240>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x200>
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_OscConfig+0x248>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fd89 	bl	8001a4c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	e00e      	b.n	8002f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fd85 	bl	8001a4c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d907      	bls.n	8002f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e150      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470000 	.word	0x42470000
 8002f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ea      	bne.n	8002f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8097 	beq.w	80030a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b7d      	ldr	r3, [pc, #500]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a73      	ldr	r2, [pc, #460]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fd45 	bl	8001a4c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe fd41 	bl	8001a4c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e10c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x474>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ea>
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a63      	ldr	r2, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e01c      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x30c>
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0x324>
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fd06 	bl	8001a4c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fd02 	bl	8001a4c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0cb      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ee      	beq.n	8003044 <HAL_RCC_OscConfig+0x334>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fcf0 	bl	8001a4c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe fcec 	bl	8001a4c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b5      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ee      	bne.n	8003070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a1 	beq.w	80031f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d05c      	beq.n	8003174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d141      	bne.n	8003146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fcc0 	bl	8001a4c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fcbc 	bl	8001a4c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	491b      	ldr	r1, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe fc95 	bl	8001a4c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fc91 	bl	8001a4c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e05c      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x416>
 8003144:	e054      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCC_OscConfig+0x478>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe fc7e 	bl	8001a4c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003154:	f7fe fc7a 	bl	8001a4c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e045      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x470>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x444>
 8003172:	e03d      	b.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e038      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	40007000 	.word	0x40007000
 8003188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x4ec>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fe fbac 	bl	8001a4c <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe fba8 	bl	8001a4c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f821 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490a      	ldr	r1, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fb0c 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08006ef4 	.word	0x08006ef4
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b094      	sub	sp, #80	; 0x50
 80033d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	647b      	str	r3, [r7, #68]	; 0x44
 80033d8:	2300      	movs	r3, #0
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	2300      	movs	r3, #0
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e4:	4b79      	ldr	r3, [pc, #484]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d00d      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x40>
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	f200 80e1 	bhi.w	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x3a>
 80033fe:	e0db      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003404:	e0db      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003406:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800340a:	e0d8      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003416:	4b6d      	ldr	r3, [pc, #436]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	2200      	movs	r2, #0
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
 800342c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
 800343a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4621      	mov	r1, r4
 8003458:	1a51      	subs	r1, r2, r1
 800345a:	6139      	str	r1, [r7, #16]
 800345c:	4629      	mov	r1, r5
 800345e:	eb63 0301 	sbc.w	r3, r3, r1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003470:	4659      	mov	r1, fp
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347a:	4651      	mov	r1, sl
 800347c:	018a      	lsls	r2, r1, #6
 800347e:	4651      	mov	r1, sl
 8003480:	ebb2 0801 	subs.w	r8, r2, r1
 8003484:	4659      	mov	r1, fp
 8003486:	eb63 0901 	sbc.w	r9, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800349e:	4690      	mov	r8, r2
 80034a0:	4699      	mov	r9, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb18 0303 	adds.w	r3, r8, r3
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	462b      	mov	r3, r5
 80034ac:	eb49 0303 	adc.w	r3, r9, r3
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034be:	4629      	mov	r1, r5
 80034c0:	024b      	lsls	r3, r1, #9
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c8:	4621      	mov	r1, r4
 80034ca:	024a      	lsls	r2, r1, #9
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034dc:	f7fd fb64 	bl	8000ba8 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e8:	e058      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	2200      	movs	r2, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	4611      	mov	r1, r2
 80034f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	f04f 0000 	mov.w	r0, #0
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	0159      	lsls	r1, r3, #5
 8003512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003516:	0150      	lsls	r0, r2, #5
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4641      	mov	r1, r8
 800351e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb63 0b01 	sbc.w	fp, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800353c:	ebb2 040a 	subs.w	r4, r2, sl
 8003540:	eb63 050b 	sbc.w	r5, r3, fp
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	00eb      	lsls	r3, r5, #3
 800354e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003552:	00e2      	lsls	r2, r4, #3
 8003554:	4614      	mov	r4, r2
 8003556:	461d      	mov	r5, r3
 8003558:	4643      	mov	r3, r8
 800355a:	18e3      	adds	r3, r4, r3
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	464b      	mov	r3, r9
 8003560:	eb45 0303 	adc.w	r3, r5, r3
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	61fa      	str	r2, [r7, #28]
 800358c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003590:	f7fd fb0a 	bl	8000ba8 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3750      	adds	r7, #80	; 0x50
 80035c4:	46bd      	mov	sp, r7
 80035c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08006f04 	.word	0x08006f04

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08006f04 	.word	0x08006f04

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd ffd6 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 f89e 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04e      	b.n	8003796 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d01d      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIM_Base_Start_IT+0xdc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d010      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	e007      	b.n	8003794 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40010400 	.word	0x40010400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40001800 	.word	0x40001800

080037c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a46      	ldr	r2, [pc, #280]	; (80038ec <TIM_Base_SetConfig+0x12c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d00f      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <TIM_Base_SetConfig+0x130>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <TIM_Base_SetConfig+0x134>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a41      	ldr	r2, [pc, #260]	; (80038f8 <TIM_Base_SetConfig+0x138>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a40      	ldr	r2, [pc, #256]	; (80038fc <TIM_Base_SetConfig+0x13c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a35      	ldr	r2, [pc, #212]	; (80038ec <TIM_Base_SetConfig+0x12c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d027      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a32      	ldr	r2, [pc, #200]	; (80038f0 <TIM_Base_SetConfig+0x130>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d023      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <TIM_Base_SetConfig+0x134>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <TIM_Base_SetConfig+0x138>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2f      	ldr	r2, [pc, #188]	; (80038fc <TIM_Base_SetConfig+0x13c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <TIM_Base_SetConfig+0x140>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <TIM_Base_SetConfig+0x144>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <TIM_Base_SetConfig+0x148>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2b      	ldr	r2, [pc, #172]	; (800390c <TIM_Base_SetConfig+0x14c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <TIM_Base_SetConfig+0x150>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a29      	ldr	r2, [pc, #164]	; (8003914 <TIM_Base_SetConfig+0x154>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <TIM_Base_SetConfig+0x12c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <TIM_Base_SetConfig+0x13c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]
  }
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40010400 	.word	0x40010400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800
 800390c:	40001800 	.word	0x40001800
 8003910:	40001c00 	.word	0x40001c00
 8003914:	40002000 	.word	0x40002000

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e042      	b.n	80039b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fed4 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f973 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d175      	bne.n	8003ac4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Transmit+0x2c>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e06e      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2221      	movs	r2, #33	; 0x21
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f6:	f7fe f829 	bl	8001a4c <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d108      	bne.n	8003a24 <HAL_UART_Transmit+0x6c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e003      	b.n	8003a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a2c:	e02e      	b.n	8003a8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f848 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e03a      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3302      	adds	r3, #2
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e007      	b.n	8003a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1cb      	bne.n	8003a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2140      	movs	r1, #64	; 0x40
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f814 	bl	8003ace <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ade:	e03b      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d037      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fd ffb0 	bl	8001a4c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <UART_WaitOnFlagUntilTimeout+0x30>
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e03a      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d023      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d020      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d01d      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d116      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f81d 	bl	8003b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e00f      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d0b4      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b095      	sub	sp, #84	; 0x54
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba8:	643a      	str	r2, [r7, #64]	; 0x40
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3314      	adds	r3, #20
 8003bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d119      	bne.n	8003c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 0310 	bic.w	r3, r3, #16
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c18:	61ba      	str	r2, [r7, #24]
 8003c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6979      	ldr	r1, [r7, #20]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	613b      	str	r3, [r7, #16]
   return(result);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c3a:	bf00      	nop
 8003c3c:	3754      	adds	r7, #84	; 0x54
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b0c0      	sub	sp, #256	; 0x100
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	68d9      	ldr	r1, [r3, #12]
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	ea40 0301 	orr.w	r3, r0, r1
 8003c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca0:	f021 010c 	bic.w	r1, r1, #12
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	6999      	ldr	r1, [r3, #24]
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	ea40 0301 	orr.w	r3, r0, r1
 8003cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b8f      	ldr	r3, [pc, #572]	; (8003f14 <UART_SetConfig+0x2cc>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d005      	beq.n	8003ce8 <UART_SetConfig+0xa0>
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <UART_SetConfig+0x2d0>)
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d104      	bne.n	8003cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7ff fc96 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8003cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf0:	e003      	b.n	8003cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7ff fc7d 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8003cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	f040 810c 	bne.w	8003f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	1891      	adds	r1, r2, r2
 8003d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d22:	415b      	adcs	r3, r3
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	eb12 0801 	adds.w	r8, r2, r1
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb43 0901 	adc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb49 0303 	adc.w	r3, r9, r3
 8003d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d76:	460b      	mov	r3, r1
 8003d78:	18db      	adds	r3, r3, r3
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	eb42 0303 	adc.w	r3, r2, r3
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
 8003d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d8c:	f7fc ff0c 	bl	8000ba8 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003d96:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	011c      	lsls	r4, r3, #4
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003db8:	415b      	adcs	r3, r3
 8003dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de0:	4692      	mov	sl, r2
 8003de2:	469b      	mov	fp, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb4b 0303 	adc.w	r3, fp, r3
 8003df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	18db      	adds	r3, r3, r3
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
 8003e12:	4613      	mov	r3, r2
 8003e14:	eb42 0303 	adc.w	r3, r2, r3
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e22:	f7fc fec1 	bl	8000ba8 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2264      	movs	r2, #100	; 0x64
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	1acb      	subs	r3, r1, r3
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003e44:	fba3 2302 	umull	r2, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e50:	441c      	add	r4, r3
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e74:	4641      	mov	r1, r8
 8003e76:	1851      	adds	r1, r2, r1
 8003e78:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	00cb      	lsls	r3, r1, #3
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e96:	4651      	mov	r1, sl
 8003e98:	00ca      	lsls	r2, r1, #3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec8:	460b      	mov	r3, r1
 8003eca:	18db      	adds	r3, r3, r3
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	4613      	mov	r3, r2
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ede:	f7fc fe63 	bl	8000ba8 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	; 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UART_SetConfig+0x2d4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 0207 	and.w	r2, r3, #7
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4422      	add	r2, r4
 8003f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f10:	e106      	b.n	8004120 <UART_SetConfig+0x4d8>
 8003f12:	bf00      	nop
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f32:	4642      	mov	r2, r8
 8003f34:	464b      	mov	r3, r9
 8003f36:	1891      	adds	r1, r2, r2
 8003f38:	6239      	str	r1, [r7, #32]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f42:	4641      	mov	r1, r8
 8003f44:	1854      	adds	r4, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb43 0501 	adc.w	r5, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	00eb      	lsls	r3, r5, #3
 8003f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f5a:	00e2      	lsls	r2, r4, #3
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	4643      	mov	r3, r8
 8003f62:	18e3      	adds	r3, r4, r3
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f68:	464b      	mov	r3, r9
 8003f6a:	eb45 0303 	adc.w	r3, r5, r3
 8003f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f8e:	4629      	mov	r1, r5
 8003f90:	008b      	lsls	r3, r1, #2
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f98:	4621      	mov	r1, r4
 8003f9a:	008a      	lsls	r2, r1, #2
 8003f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa0:	f7fc fe02 	bl	8000ba8 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b60      	ldr	r3, [pc, #384]	; (800412c <UART_SetConfig+0x4e4>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011c      	lsls	r4, r3, #4
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	61b9      	str	r1, [r7, #24]
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6139      	str	r1, [r7, #16]
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004008:	464b      	mov	r3, r9
 800400a:	460a      	mov	r2, r1
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	67bb      	str	r3, [r7, #120]	; 0x78
 800401e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800402c:	4649      	mov	r1, r9
 800402e:	008b      	lsls	r3, r1, #2
 8004030:	4641      	mov	r1, r8
 8004032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004036:	4641      	mov	r1, r8
 8004038:	008a      	lsls	r2, r1, #2
 800403a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800403e:	f7fc fdb3 	bl	8000ba8 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b38      	ldr	r3, [pc, #224]	; (800412c <UART_SetConfig+0x4e4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	3332      	adds	r3, #50	; 0x32
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <UART_SetConfig+0x4e4>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	441c      	add	r4, r3
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
 8004072:	677a      	str	r2, [r7, #116]	; 0x74
 8004074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	415b      	adcs	r3, r3
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004088:	4641      	mov	r1, r8
 800408a:	1851      	adds	r1, r2, r1
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	4649      	mov	r1, r9
 8004090:	414b      	adcs	r3, r1
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a0:	4659      	mov	r1, fp
 80040a2:	00cb      	lsls	r3, r1, #3
 80040a4:	4651      	mov	r1, sl
 80040a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040aa:	4651      	mov	r1, sl
 80040ac:	00ca      	lsls	r2, r1, #3
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	4642      	mov	r2, r8
 80040b6:	189b      	adds	r3, r3, r2
 80040b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ba:	464b      	mov	r3, r9
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
 80040ce:	667a      	str	r2, [r7, #100]	; 0x64
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040dc:	4649      	mov	r1, r9
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	4641      	mov	r1, r8
 80040e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e6:	4641      	mov	r1, r8
 80040e8:	008a      	lsls	r2, r1, #2
 80040ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040ee:	f7fc fd5b 	bl	8000ba8 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <UART_SetConfig+0x4e4>)
 80040f8:	fba3 1302 	umull	r1, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3332      	adds	r3, #50	; 0x32
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <UART_SetConfig+0x4e4>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4422      	add	r2, r4
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004126:	46bd      	mov	sp, r7
 8004128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412c:	51eb851f 	.word	0x51eb851f

08004130 <__cvt>:
 8004130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	ec55 4b10 	vmov	r4, r5, d0
 8004138:	2d00      	cmp	r5, #0
 800413a:	460e      	mov	r6, r1
 800413c:	4619      	mov	r1, r3
 800413e:	462b      	mov	r3, r5
 8004140:	bfbb      	ittet	lt
 8004142:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004146:	461d      	movlt	r5, r3
 8004148:	2300      	movge	r3, #0
 800414a:	232d      	movlt	r3, #45	; 0x2d
 800414c:	700b      	strb	r3, [r1, #0]
 800414e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004150:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004154:	4691      	mov	r9, r2
 8004156:	f023 0820 	bic.w	r8, r3, #32
 800415a:	bfbc      	itt	lt
 800415c:	4622      	movlt	r2, r4
 800415e:	4614      	movlt	r4, r2
 8004160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004164:	d005      	beq.n	8004172 <__cvt+0x42>
 8004166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800416a:	d100      	bne.n	800416e <__cvt+0x3e>
 800416c:	3601      	adds	r6, #1
 800416e:	2102      	movs	r1, #2
 8004170:	e000      	b.n	8004174 <__cvt+0x44>
 8004172:	2103      	movs	r1, #3
 8004174:	ab03      	add	r3, sp, #12
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	ab02      	add	r3, sp, #8
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	ec45 4b10 	vmov	d0, r4, r5
 8004180:	4653      	mov	r3, sl
 8004182:	4632      	mov	r2, r6
 8004184:	f000 fe68 	bl	8004e58 <_dtoa_r>
 8004188:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800418c:	4607      	mov	r7, r0
 800418e:	d102      	bne.n	8004196 <__cvt+0x66>
 8004190:	f019 0f01 	tst.w	r9, #1
 8004194:	d022      	beq.n	80041dc <__cvt+0xac>
 8004196:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800419a:	eb07 0906 	add.w	r9, r7, r6
 800419e:	d110      	bne.n	80041c2 <__cvt+0x92>
 80041a0:	783b      	ldrb	r3, [r7, #0]
 80041a2:	2b30      	cmp	r3, #48	; 0x30
 80041a4:	d10a      	bne.n	80041bc <__cvt+0x8c>
 80041a6:	2200      	movs	r2, #0
 80041a8:	2300      	movs	r3, #0
 80041aa:	4620      	mov	r0, r4
 80041ac:	4629      	mov	r1, r5
 80041ae:	f7fc fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80041b2:	b918      	cbnz	r0, 80041bc <__cvt+0x8c>
 80041b4:	f1c6 0601 	rsb	r6, r6, #1
 80041b8:	f8ca 6000 	str.w	r6, [sl]
 80041bc:	f8da 3000 	ldr.w	r3, [sl]
 80041c0:	4499      	add	r9, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	2300      	movs	r3, #0
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80041ce:	b108      	cbz	r0, 80041d4 <__cvt+0xa4>
 80041d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80041d4:	2230      	movs	r2, #48	; 0x30
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	454b      	cmp	r3, r9
 80041da:	d307      	bcc.n	80041ec <__cvt+0xbc>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041e0:	1bdb      	subs	r3, r3, r7
 80041e2:	4638      	mov	r0, r7
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	b004      	add	sp, #16
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	9103      	str	r1, [sp, #12]
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e7f0      	b.n	80041d6 <__cvt+0xa6>

080041f4 <__exponent>:
 80041f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041f6:	4603      	mov	r3, r0
 80041f8:	2900      	cmp	r1, #0
 80041fa:	bfb8      	it	lt
 80041fc:	4249      	neglt	r1, r1
 80041fe:	f803 2b02 	strb.w	r2, [r3], #2
 8004202:	bfb4      	ite	lt
 8004204:	222d      	movlt	r2, #45	; 0x2d
 8004206:	222b      	movge	r2, #43	; 0x2b
 8004208:	2909      	cmp	r1, #9
 800420a:	7042      	strb	r2, [r0, #1]
 800420c:	dd2a      	ble.n	8004264 <__exponent+0x70>
 800420e:	f10d 0207 	add.w	r2, sp, #7
 8004212:	4617      	mov	r7, r2
 8004214:	260a      	movs	r6, #10
 8004216:	4694      	mov	ip, r2
 8004218:	fb91 f5f6 	sdiv	r5, r1, r6
 800421c:	fb06 1415 	mls	r4, r6, r5, r1
 8004220:	3430      	adds	r4, #48	; 0x30
 8004222:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004226:	460c      	mov	r4, r1
 8004228:	2c63      	cmp	r4, #99	; 0x63
 800422a:	f102 32ff 	add.w	r2, r2, #4294967295
 800422e:	4629      	mov	r1, r5
 8004230:	dcf1      	bgt.n	8004216 <__exponent+0x22>
 8004232:	3130      	adds	r1, #48	; 0x30
 8004234:	f1ac 0402 	sub.w	r4, ip, #2
 8004238:	f802 1c01 	strb.w	r1, [r2, #-1]
 800423c:	1c41      	adds	r1, r0, #1
 800423e:	4622      	mov	r2, r4
 8004240:	42ba      	cmp	r2, r7
 8004242:	d30a      	bcc.n	800425a <__exponent+0x66>
 8004244:	f10d 0209 	add.w	r2, sp, #9
 8004248:	eba2 020c 	sub.w	r2, r2, ip
 800424c:	42bc      	cmp	r4, r7
 800424e:	bf88      	it	hi
 8004250:	2200      	movhi	r2, #0
 8004252:	4413      	add	r3, r2
 8004254:	1a18      	subs	r0, r3, r0
 8004256:	b003      	add	sp, #12
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800425e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004262:	e7ed      	b.n	8004240 <__exponent+0x4c>
 8004264:	2330      	movs	r3, #48	; 0x30
 8004266:	3130      	adds	r1, #48	; 0x30
 8004268:	7083      	strb	r3, [r0, #2]
 800426a:	70c1      	strb	r1, [r0, #3]
 800426c:	1d03      	adds	r3, r0, #4
 800426e:	e7f1      	b.n	8004254 <__exponent+0x60>

08004270 <_printf_float>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	ed2d 8b02 	vpush	{d8}
 8004278:	b08d      	sub	sp, #52	; 0x34
 800427a:	460c      	mov	r4, r1
 800427c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004280:	4616      	mov	r6, r2
 8004282:	461f      	mov	r7, r3
 8004284:	4605      	mov	r5, r0
 8004286:	f000 fce7 	bl	8004c58 <_localeconv_r>
 800428a:	f8d0 a000 	ldr.w	sl, [r0]
 800428e:	4650      	mov	r0, sl
 8004290:	f7fb ffee 	bl	8000270 <strlen>
 8004294:	2300      	movs	r3, #0
 8004296:	930a      	str	r3, [sp, #40]	; 0x28
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8d8 3000 	ldr.w	r3, [r8]
 80042a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042a4:	3307      	adds	r3, #7
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	f103 0208 	add.w	r2, r3, #8
 80042ae:	f8c8 2000 	str.w	r2, [r8]
 80042b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042ba:	9307      	str	r3, [sp, #28]
 80042bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80042c0:	ee08 0a10 	vmov	s16, r0
 80042c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80042c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042cc:	4b9e      	ldr	r3, [pc, #632]	; (8004548 <_printf_float+0x2d8>)
 80042ce:	f04f 32ff 	mov.w	r2, #4294967295
 80042d2:	f7fc fc2b 	bl	8000b2c <__aeabi_dcmpun>
 80042d6:	bb88      	cbnz	r0, 800433c <_printf_float+0xcc>
 80042d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042dc:	4b9a      	ldr	r3, [pc, #616]	; (8004548 <_printf_float+0x2d8>)
 80042de:	f04f 32ff 	mov.w	r2, #4294967295
 80042e2:	f7fc fc05 	bl	8000af0 <__aeabi_dcmple>
 80042e6:	bb48      	cbnz	r0, 800433c <_printf_float+0xcc>
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fc fbf4 	bl	8000adc <__aeabi_dcmplt>
 80042f4:	b110      	cbz	r0, 80042fc <_printf_float+0x8c>
 80042f6:	232d      	movs	r3, #45	; 0x2d
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	4a93      	ldr	r2, [pc, #588]	; (800454c <_printf_float+0x2dc>)
 80042fe:	4b94      	ldr	r3, [pc, #592]	; (8004550 <_printf_float+0x2e0>)
 8004300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004304:	bf94      	ite	ls
 8004306:	4690      	movls	r8, r2
 8004308:	4698      	movhi	r8, r3
 800430a:	2303      	movs	r3, #3
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	9b05      	ldr	r3, [sp, #20]
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	f04f 0900 	mov.w	r9, #0
 800431a:	9700      	str	r7, [sp, #0]
 800431c:	4633      	mov	r3, r6
 800431e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 f9da 	bl	80046dc <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	f040 8090 	bne.w	800444e <_printf_float+0x1de>
 800432e:	f04f 30ff 	mov.w	r0, #4294967295
 8004332:	b00d      	add	sp, #52	; 0x34
 8004334:	ecbd 8b02 	vpop	{d8}
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc fbf2 	bl	8000b2c <__aeabi_dcmpun>
 8004348:	b140      	cbz	r0, 800435c <_printf_float+0xec>
 800434a:	464b      	mov	r3, r9
 800434c:	2b00      	cmp	r3, #0
 800434e:	bfbc      	itt	lt
 8004350:	232d      	movlt	r3, #45	; 0x2d
 8004352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004356:	4a7f      	ldr	r2, [pc, #508]	; (8004554 <_printf_float+0x2e4>)
 8004358:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <_printf_float+0x2e8>)
 800435a:	e7d1      	b.n	8004300 <_printf_float+0x90>
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004362:	9206      	str	r2, [sp, #24]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	d13f      	bne.n	80043e8 <_printf_float+0x178>
 8004368:	2306      	movs	r3, #6
 800436a:	6063      	str	r3, [r4, #4]
 800436c:	9b05      	ldr	r3, [sp, #20]
 800436e:	6861      	ldr	r1, [r4, #4]
 8004370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004374:	2300      	movs	r3, #0
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	ab0a      	add	r3, sp, #40	; 0x28
 800437a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800437e:	ab09      	add	r3, sp, #36	; 0x24
 8004380:	ec49 8b10 	vmov	d0, r8, r9
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6022      	str	r2, [r4, #0]
 8004388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800438c:	4628      	mov	r0, r5
 800438e:	f7ff fecf 	bl	8004130 <__cvt>
 8004392:	9b06      	ldr	r3, [sp, #24]
 8004394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004396:	2b47      	cmp	r3, #71	; 0x47
 8004398:	4680      	mov	r8, r0
 800439a:	d108      	bne.n	80043ae <_printf_float+0x13e>
 800439c:	1cc8      	adds	r0, r1, #3
 800439e:	db02      	blt.n	80043a6 <_printf_float+0x136>
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	4299      	cmp	r1, r3
 80043a4:	dd41      	ble.n	800442a <_printf_float+0x1ba>
 80043a6:	f1ab 0302 	sub.w	r3, fp, #2
 80043aa:	fa5f fb83 	uxtb.w	fp, r3
 80043ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043b2:	d820      	bhi.n	80043f6 <_printf_float+0x186>
 80043b4:	3901      	subs	r1, #1
 80043b6:	465a      	mov	r2, fp
 80043b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043bc:	9109      	str	r1, [sp, #36]	; 0x24
 80043be:	f7ff ff19 	bl	80041f4 <__exponent>
 80043c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c4:	1813      	adds	r3, r2, r0
 80043c6:	2a01      	cmp	r2, #1
 80043c8:	4681      	mov	r9, r0
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	dc02      	bgt.n	80043d4 <_printf_float+0x164>
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	07d2      	lsls	r2, r2, #31
 80043d2:	d501      	bpl.n	80043d8 <_printf_float+0x168>
 80043d4:	3301      	adds	r3, #1
 80043d6:	6123      	str	r3, [r4, #16]
 80043d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d09c      	beq.n	800431a <_printf_float+0xaa>
 80043e0:	232d      	movs	r3, #45	; 0x2d
 80043e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e6:	e798      	b.n	800431a <_printf_float+0xaa>
 80043e8:	9a06      	ldr	r2, [sp, #24]
 80043ea:	2a47      	cmp	r2, #71	; 0x47
 80043ec:	d1be      	bne.n	800436c <_printf_float+0xfc>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1bc      	bne.n	800436c <_printf_float+0xfc>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e7b9      	b.n	800436a <_printf_float+0xfa>
 80043f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043fa:	d118      	bne.n	800442e <_printf_float+0x1be>
 80043fc:	2900      	cmp	r1, #0
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	dd0b      	ble.n	800441a <_printf_float+0x1aa>
 8004402:	6121      	str	r1, [r4, #16]
 8004404:	b913      	cbnz	r3, 800440c <_printf_float+0x19c>
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	07d0      	lsls	r0, r2, #31
 800440a:	d502      	bpl.n	8004412 <_printf_float+0x1a2>
 800440c:	3301      	adds	r3, #1
 800440e:	440b      	add	r3, r1
 8004410:	6123      	str	r3, [r4, #16]
 8004412:	65a1      	str	r1, [r4, #88]	; 0x58
 8004414:	f04f 0900 	mov.w	r9, #0
 8004418:	e7de      	b.n	80043d8 <_printf_float+0x168>
 800441a:	b913      	cbnz	r3, 8004422 <_printf_float+0x1b2>
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	07d2      	lsls	r2, r2, #31
 8004420:	d501      	bpl.n	8004426 <_printf_float+0x1b6>
 8004422:	3302      	adds	r3, #2
 8004424:	e7f4      	b.n	8004410 <_printf_float+0x1a0>
 8004426:	2301      	movs	r3, #1
 8004428:	e7f2      	b.n	8004410 <_printf_float+0x1a0>
 800442a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004430:	4299      	cmp	r1, r3
 8004432:	db05      	blt.n	8004440 <_printf_float+0x1d0>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	6121      	str	r1, [r4, #16]
 8004438:	07d8      	lsls	r0, r3, #31
 800443a:	d5ea      	bpl.n	8004412 <_printf_float+0x1a2>
 800443c:	1c4b      	adds	r3, r1, #1
 800443e:	e7e7      	b.n	8004410 <_printf_float+0x1a0>
 8004440:	2900      	cmp	r1, #0
 8004442:	bfd4      	ite	le
 8004444:	f1c1 0202 	rsble	r2, r1, #2
 8004448:	2201      	movgt	r2, #1
 800444a:	4413      	add	r3, r2
 800444c:	e7e0      	b.n	8004410 <_printf_float+0x1a0>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	055a      	lsls	r2, r3, #21
 8004452:	d407      	bmi.n	8004464 <_printf_float+0x1f4>
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	4642      	mov	r2, r8
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	d12c      	bne.n	80044bc <_printf_float+0x24c>
 8004462:	e764      	b.n	800432e <_printf_float+0xbe>
 8004464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004468:	f240 80e0 	bls.w	800462c <_printf_float+0x3bc>
 800446c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	f7fc fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8004478:	2800      	cmp	r0, #0
 800447a:	d034      	beq.n	80044e6 <_printf_float+0x276>
 800447c:	4a37      	ldr	r2, [pc, #220]	; (800455c <_printf_float+0x2ec>)
 800447e:	2301      	movs	r3, #1
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f af51 	beq.w	800432e <_printf_float+0xbe>
 800448c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004490:	429a      	cmp	r2, r3
 8004492:	db02      	blt.n	800449a <_printf_float+0x22a>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	07d8      	lsls	r0, r3, #31
 8004498:	d510      	bpl.n	80044bc <_printf_float+0x24c>
 800449a:	ee18 3a10 	vmov	r3, s16
 800449e:	4652      	mov	r2, sl
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f af41 	beq.w	800432e <_printf_float+0xbe>
 80044ac:	f04f 0800 	mov.w	r8, #0
 80044b0:	f104 091a 	add.w	r9, r4, #26
 80044b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4543      	cmp	r3, r8
 80044ba:	dc09      	bgt.n	80044d0 <_printf_float+0x260>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	079b      	lsls	r3, r3, #30
 80044c0:	f100 8107 	bmi.w	80046d2 <_printf_float+0x462>
 80044c4:	68e0      	ldr	r0, [r4, #12]
 80044c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044c8:	4298      	cmp	r0, r3
 80044ca:	bfb8      	it	lt
 80044cc:	4618      	movlt	r0, r3
 80044ce:	e730      	b.n	8004332 <_printf_float+0xc2>
 80044d0:	2301      	movs	r3, #1
 80044d2:	464a      	mov	r2, r9
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f af27 	beq.w	800432e <_printf_float+0xbe>
 80044e0:	f108 0801 	add.w	r8, r8, #1
 80044e4:	e7e6      	b.n	80044b4 <_printf_float+0x244>
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc39      	bgt.n	8004560 <_printf_float+0x2f0>
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <_printf_float+0x2ec>)
 80044ee:	2301      	movs	r3, #1
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f af19 	beq.w	800432e <_printf_float+0xbe>
 80044fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004500:	4313      	orrs	r3, r2
 8004502:	d102      	bne.n	800450a <_printf_float+0x29a>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	07d9      	lsls	r1, r3, #31
 8004508:	d5d8      	bpl.n	80044bc <_printf_float+0x24c>
 800450a:	ee18 3a10 	vmov	r3, s16
 800450e:	4652      	mov	r2, sl
 8004510:	4631      	mov	r1, r6
 8004512:	4628      	mov	r0, r5
 8004514:	47b8      	blx	r7
 8004516:	3001      	adds	r0, #1
 8004518:	f43f af09 	beq.w	800432e <_printf_float+0xbe>
 800451c:	f04f 0900 	mov.w	r9, #0
 8004520:	f104 0a1a 	add.w	sl, r4, #26
 8004524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004526:	425b      	negs	r3, r3
 8004528:	454b      	cmp	r3, r9
 800452a:	dc01      	bgt.n	8004530 <_printf_float+0x2c0>
 800452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452e:	e792      	b.n	8004456 <_printf_float+0x1e6>
 8004530:	2301      	movs	r3, #1
 8004532:	4652      	mov	r2, sl
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f aef7 	beq.w	800432e <_printf_float+0xbe>
 8004540:	f109 0901 	add.w	r9, r9, #1
 8004544:	e7ee      	b.n	8004524 <_printf_float+0x2b4>
 8004546:	bf00      	nop
 8004548:	7fefffff 	.word	0x7fefffff
 800454c:	08006f0c 	.word	0x08006f0c
 8004550:	08006f10 	.word	0x08006f10
 8004554:	08006f14 	.word	0x08006f14
 8004558:	08006f18 	.word	0x08006f18
 800455c:	08006f1c 	.word	0x08006f1c
 8004560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004564:	429a      	cmp	r2, r3
 8004566:	bfa8      	it	ge
 8004568:	461a      	movge	r2, r3
 800456a:	2a00      	cmp	r2, #0
 800456c:	4691      	mov	r9, r2
 800456e:	dc37      	bgt.n	80045e0 <_printf_float+0x370>
 8004570:	f04f 0b00 	mov.w	fp, #0
 8004574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004578:	f104 021a 	add.w	r2, r4, #26
 800457c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	eba3 0309 	sub.w	r3, r3, r9
 8004584:	455b      	cmp	r3, fp
 8004586:	dc33      	bgt.n	80045f0 <_printf_float+0x380>
 8004588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800458c:	429a      	cmp	r2, r3
 800458e:	db3b      	blt.n	8004608 <_printf_float+0x398>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	07da      	lsls	r2, r3, #31
 8004594:	d438      	bmi.n	8004608 <_printf_float+0x398>
 8004596:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800459a:	eba2 0903 	sub.w	r9, r2, r3
 800459e:	9b05      	ldr	r3, [sp, #20]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	4591      	cmp	r9, r2
 80045a4:	bfa8      	it	ge
 80045a6:	4691      	movge	r9, r2
 80045a8:	f1b9 0f00 	cmp.w	r9, #0
 80045ac:	dc35      	bgt.n	800461a <_printf_float+0x3aa>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045b6:	f104 0a1a 	add.w	sl, r4, #26
 80045ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	eba3 0309 	sub.w	r3, r3, r9
 80045c4:	4543      	cmp	r3, r8
 80045c6:	f77f af79 	ble.w	80044bc <_printf_float+0x24c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	f43f aeaa 	beq.w	800432e <_printf_float+0xbe>
 80045da:	f108 0801 	add.w	r8, r8, #1
 80045de:	e7ec      	b.n	80045ba <_printf_float+0x34a>
 80045e0:	4613      	mov	r3, r2
 80045e2:	4631      	mov	r1, r6
 80045e4:	4642      	mov	r2, r8
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	d1c0      	bne.n	8004570 <_printf_float+0x300>
 80045ee:	e69e      	b.n	800432e <_printf_float+0xbe>
 80045f0:	2301      	movs	r3, #1
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	9205      	str	r2, [sp, #20]
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	f43f ae97 	beq.w	800432e <_printf_float+0xbe>
 8004600:	9a05      	ldr	r2, [sp, #20]
 8004602:	f10b 0b01 	add.w	fp, fp, #1
 8004606:	e7b9      	b.n	800457c <_printf_float+0x30c>
 8004608:	ee18 3a10 	vmov	r3, s16
 800460c:	4652      	mov	r2, sl
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	d1be      	bne.n	8004596 <_printf_float+0x326>
 8004618:	e689      	b.n	800432e <_printf_float+0xbe>
 800461a:	9a05      	ldr	r2, [sp, #20]
 800461c:	464b      	mov	r3, r9
 800461e:	4442      	add	r2, r8
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	d1c1      	bne.n	80045ae <_printf_float+0x33e>
 800462a:	e680      	b.n	800432e <_printf_float+0xbe>
 800462c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462e:	2a01      	cmp	r2, #1
 8004630:	dc01      	bgt.n	8004636 <_printf_float+0x3c6>
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d53a      	bpl.n	80046ac <_printf_float+0x43c>
 8004636:	2301      	movs	r3, #1
 8004638:	4642      	mov	r2, r8
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f ae74 	beq.w	800432e <_printf_float+0xbe>
 8004646:	ee18 3a10 	vmov	r3, s16
 800464a:	4652      	mov	r2, sl
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f ae6b 	beq.w	800432e <_printf_float+0xbe>
 8004658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004664:	f7fc fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004668:	b9d8      	cbnz	r0, 80046a2 <_printf_float+0x432>
 800466a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800466e:	f108 0201 	add.w	r2, r8, #1
 8004672:	4631      	mov	r1, r6
 8004674:	4628      	mov	r0, r5
 8004676:	47b8      	blx	r7
 8004678:	3001      	adds	r0, #1
 800467a:	d10e      	bne.n	800469a <_printf_float+0x42a>
 800467c:	e657      	b.n	800432e <_printf_float+0xbe>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f ae50 	beq.w	800432e <_printf_float+0xbe>
 800468e:	f108 0801 	add.w	r8, r8, #1
 8004692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	4543      	cmp	r3, r8
 8004698:	dcf1      	bgt.n	800467e <_printf_float+0x40e>
 800469a:	464b      	mov	r3, r9
 800469c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046a0:	e6da      	b.n	8004458 <_printf_float+0x1e8>
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	f104 0a1a 	add.w	sl, r4, #26
 80046aa:	e7f2      	b.n	8004692 <_printf_float+0x422>
 80046ac:	2301      	movs	r3, #1
 80046ae:	4642      	mov	r2, r8
 80046b0:	e7df      	b.n	8004672 <_printf_float+0x402>
 80046b2:	2301      	movs	r3, #1
 80046b4:	464a      	mov	r2, r9
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f ae36 	beq.w	800432e <_printf_float+0xbe>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ca:	1a5b      	subs	r3, r3, r1
 80046cc:	4543      	cmp	r3, r8
 80046ce:	dcf0      	bgt.n	80046b2 <_printf_float+0x442>
 80046d0:	e6f8      	b.n	80044c4 <_printf_float+0x254>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	f104 0919 	add.w	r9, r4, #25
 80046da:	e7f4      	b.n	80046c6 <_printf_float+0x456>

080046dc <_printf_common>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	4616      	mov	r6, r2
 80046e2:	4699      	mov	r9, r3
 80046e4:	688a      	ldr	r2, [r1, #8]
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bfb8      	it	lt
 80046f0:	4613      	movlt	r3, r2
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046f8:	4607      	mov	r7, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	b10a      	cbz	r2, 8004702 <_printf_common+0x26>
 80046fe:	3301      	adds	r3, #1
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	0699      	lsls	r1, r3, #26
 8004706:	bf42      	ittt	mi
 8004708:	6833      	ldrmi	r3, [r6, #0]
 800470a:	3302      	addmi	r3, #2
 800470c:	6033      	strmi	r3, [r6, #0]
 800470e:	6825      	ldr	r5, [r4, #0]
 8004710:	f015 0506 	ands.w	r5, r5, #6
 8004714:	d106      	bne.n	8004724 <_printf_common+0x48>
 8004716:	f104 0a19 	add.w	sl, r4, #25
 800471a:	68e3      	ldr	r3, [r4, #12]
 800471c:	6832      	ldr	r2, [r6, #0]
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	42ab      	cmp	r3, r5
 8004722:	dc26      	bgt.n	8004772 <_printf_common+0x96>
 8004724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004728:	1e13      	subs	r3, r2, #0
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	bf18      	it	ne
 800472e:	2301      	movne	r3, #1
 8004730:	0692      	lsls	r2, r2, #26
 8004732:	d42b      	bmi.n	800478c <_printf_common+0xb0>
 8004734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004738:	4649      	mov	r1, r9
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d01e      	beq.n	8004780 <_printf_common+0xa4>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf02      	ittt	eq
 800474e:	68e5      	ldreq	r5, [r4, #12]
 8004750:	6833      	ldreq	r3, [r6, #0]
 8004752:	1aed      	subeq	r5, r5, r3
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	bf0c      	ite	eq
 8004758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800475c:	2500      	movne	r5, #0
 800475e:	4293      	cmp	r3, r2
 8004760:	bfc4      	itt	gt
 8004762:	1a9b      	subgt	r3, r3, r2
 8004764:	18ed      	addgt	r5, r5, r3
 8004766:	2600      	movs	r6, #0
 8004768:	341a      	adds	r4, #26
 800476a:	42b5      	cmp	r5, r6
 800476c:	d11a      	bne.n	80047a4 <_printf_common+0xc8>
 800476e:	2000      	movs	r0, #0
 8004770:	e008      	b.n	8004784 <_printf_common+0xa8>
 8004772:	2301      	movs	r3, #1
 8004774:	4652      	mov	r2, sl
 8004776:	4649      	mov	r1, r9
 8004778:	4638      	mov	r0, r7
 800477a:	47c0      	blx	r8
 800477c:	3001      	adds	r0, #1
 800477e:	d103      	bne.n	8004788 <_printf_common+0xac>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	3501      	adds	r5, #1
 800478a:	e7c6      	b.n	800471a <_printf_common+0x3e>
 800478c:	18e1      	adds	r1, r4, r3
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	2030      	movs	r0, #48	; 0x30
 8004792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004796:	4422      	add	r2, r4
 8004798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800479c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a0:	3302      	adds	r3, #2
 80047a2:	e7c7      	b.n	8004734 <_printf_common+0x58>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4622      	mov	r2, r4
 80047a8:	4649      	mov	r1, r9
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c0      	blx	r8
 80047ae:	3001      	adds	r0, #1
 80047b0:	d0e6      	beq.n	8004780 <_printf_common+0xa4>
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7d9      	b.n	800476a <_printf_common+0x8e>
	...

080047b8 <_printf_i>:
 80047b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	7e0f      	ldrb	r7, [r1, #24]
 80047be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c0:	2f78      	cmp	r7, #120	; 0x78
 80047c2:	4691      	mov	r9, r2
 80047c4:	4680      	mov	r8, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	469a      	mov	sl, r3
 80047ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047ce:	d807      	bhi.n	80047e0 <_printf_i+0x28>
 80047d0:	2f62      	cmp	r7, #98	; 0x62
 80047d2:	d80a      	bhi.n	80047ea <_printf_i+0x32>
 80047d4:	2f00      	cmp	r7, #0
 80047d6:	f000 80d4 	beq.w	8004982 <_printf_i+0x1ca>
 80047da:	2f58      	cmp	r7, #88	; 0x58
 80047dc:	f000 80c0 	beq.w	8004960 <_printf_i+0x1a8>
 80047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047e8:	e03a      	b.n	8004860 <_printf_i+0xa8>
 80047ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ee:	2b15      	cmp	r3, #21
 80047f0:	d8f6      	bhi.n	80047e0 <_printf_i+0x28>
 80047f2:	a101      	add	r1, pc, #4	; (adr r1, 80047f8 <_printf_i+0x40>)
 80047f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004865 	.word	0x08004865
 8004800:	080047e1 	.word	0x080047e1
 8004804:	080047e1 	.word	0x080047e1
 8004808:	080047e1 	.word	0x080047e1
 800480c:	080047e1 	.word	0x080047e1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047e1 	.word	0x080047e1
 8004818:	080047e1 	.word	0x080047e1
 800481c:	080047e1 	.word	0x080047e1
 8004820:	080047e1 	.word	0x080047e1
 8004824:	08004969 	.word	0x08004969
 8004828:	08004891 	.word	0x08004891
 800482c:	08004923 	.word	0x08004923
 8004830:	080047e1 	.word	0x080047e1
 8004834:	080047e1 	.word	0x080047e1
 8004838:	0800498b 	.word	0x0800498b
 800483c:	080047e1 	.word	0x080047e1
 8004840:	08004891 	.word	0x08004891
 8004844:	080047e1 	.word	0x080047e1
 8004848:	080047e1 	.word	0x080047e1
 800484c:	0800492b 	.word	0x0800492b
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004860:	2301      	movs	r3, #1
 8004862:	e09f      	b.n	80049a4 <_printf_i+0x1ec>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	0607      	lsls	r7, r0, #24
 800486a:	f103 0104 	add.w	r1, r3, #4
 800486e:	6029      	str	r1, [r5, #0]
 8004870:	d501      	bpl.n	8004876 <_printf_i+0xbe>
 8004872:	681e      	ldr	r6, [r3, #0]
 8004874:	e003      	b.n	800487e <_printf_i+0xc6>
 8004876:	0646      	lsls	r6, r0, #25
 8004878:	d5fb      	bpl.n	8004872 <_printf_i+0xba>
 800487a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800487e:	2e00      	cmp	r6, #0
 8004880:	da03      	bge.n	800488a <_printf_i+0xd2>
 8004882:	232d      	movs	r3, #45	; 0x2d
 8004884:	4276      	negs	r6, r6
 8004886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488a:	485a      	ldr	r0, [pc, #360]	; (80049f4 <_printf_i+0x23c>)
 800488c:	230a      	movs	r3, #10
 800488e:	e012      	b.n	80048b6 <_printf_i+0xfe>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	1d19      	adds	r1, r3, #4
 8004896:	6029      	str	r1, [r5, #0]
 8004898:	0605      	lsls	r5, r0, #24
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0xe8>
 800489c:	681e      	ldr	r6, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0xee>
 80048a0:	0641      	lsls	r1, r0, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0xe4>
 80048a4:	881e      	ldrh	r6, [r3, #0]
 80048a6:	4853      	ldr	r0, [pc, #332]	; (80049f4 <_printf_i+0x23c>)
 80048a8:	2f6f      	cmp	r7, #111	; 0x6f
 80048aa:	bf0c      	ite	eq
 80048ac:	2308      	moveq	r3, #8
 80048ae:	230a      	movne	r3, #10
 80048b0:	2100      	movs	r1, #0
 80048b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048b6:	6865      	ldr	r5, [r4, #4]
 80048b8:	60a5      	str	r5, [r4, #8]
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	bfa2      	ittt	ge
 80048be:	6821      	ldrge	r1, [r4, #0]
 80048c0:	f021 0104 	bicge.w	r1, r1, #4
 80048c4:	6021      	strge	r1, [r4, #0]
 80048c6:	b90e      	cbnz	r6, 80048cc <_printf_i+0x114>
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	d04b      	beq.n	8004964 <_printf_i+0x1ac>
 80048cc:	4615      	mov	r5, r2
 80048ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80048d2:	fb03 6711 	mls	r7, r3, r1, r6
 80048d6:	5dc7      	ldrb	r7, [r0, r7]
 80048d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048dc:	4637      	mov	r7, r6
 80048de:	42bb      	cmp	r3, r7
 80048e0:	460e      	mov	r6, r1
 80048e2:	d9f4      	bls.n	80048ce <_printf_i+0x116>
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d10b      	bne.n	8004900 <_printf_i+0x148>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07de      	lsls	r6, r3, #31
 80048ec:	d508      	bpl.n	8004900 <_printf_i+0x148>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4299      	cmp	r1, r3
 80048f4:	bfde      	ittt	le
 80048f6:	2330      	movle	r3, #48	; 0x30
 80048f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004900:	1b52      	subs	r2, r2, r5
 8004902:	6122      	str	r2, [r4, #16]
 8004904:	f8cd a000 	str.w	sl, [sp]
 8004908:	464b      	mov	r3, r9
 800490a:	aa03      	add	r2, sp, #12
 800490c:	4621      	mov	r1, r4
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fee4 	bl	80046dc <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	d14a      	bne.n	80049ae <_printf_i+0x1f6>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	b004      	add	sp, #16
 800491e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	4833      	ldr	r0, [pc, #204]	; (80049f8 <_printf_i+0x240>)
 800492c:	2778      	movs	r7, #120	; 0x78
 800492e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6829      	ldr	r1, [r5, #0]
 8004936:	061f      	lsls	r7, r3, #24
 8004938:	f851 6b04 	ldr.w	r6, [r1], #4
 800493c:	d402      	bmi.n	8004944 <_printf_i+0x18c>
 800493e:	065f      	lsls	r7, r3, #25
 8004940:	bf48      	it	mi
 8004942:	b2b6      	uxthmi	r6, r6
 8004944:	07df      	lsls	r7, r3, #31
 8004946:	bf48      	it	mi
 8004948:	f043 0320 	orrmi.w	r3, r3, #32
 800494c:	6029      	str	r1, [r5, #0]
 800494e:	bf48      	it	mi
 8004950:	6023      	strmi	r3, [r4, #0]
 8004952:	b91e      	cbnz	r6, 800495c <_printf_i+0x1a4>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	f023 0320 	bic.w	r3, r3, #32
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	2310      	movs	r3, #16
 800495e:	e7a7      	b.n	80048b0 <_printf_i+0xf8>
 8004960:	4824      	ldr	r0, [pc, #144]	; (80049f4 <_printf_i+0x23c>)
 8004962:	e7e4      	b.n	800492e <_printf_i+0x176>
 8004964:	4615      	mov	r5, r2
 8004966:	e7bd      	b.n	80048e4 <_printf_i+0x12c>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	6826      	ldr	r6, [r4, #0]
 800496c:	6961      	ldr	r1, [r4, #20]
 800496e:	1d18      	adds	r0, r3, #4
 8004970:	6028      	str	r0, [r5, #0]
 8004972:	0635      	lsls	r5, r6, #24
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	d501      	bpl.n	800497c <_printf_i+0x1c4>
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	e002      	b.n	8004982 <_printf_i+0x1ca>
 800497c:	0670      	lsls	r0, r6, #25
 800497e:	d5fb      	bpl.n	8004978 <_printf_i+0x1c0>
 8004980:	8019      	strh	r1, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	4615      	mov	r5, r2
 8004988:	e7bc      	b.n	8004904 <_printf_i+0x14c>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	1d1a      	adds	r2, r3, #4
 800498e:	602a      	str	r2, [r5, #0]
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	2100      	movs	r1, #0
 8004996:	4628      	mov	r0, r5
 8004998:	f7fb fc1a 	bl	80001d0 <memchr>
 800499c:	b108      	cbz	r0, 80049a2 <_printf_i+0x1ea>
 800499e:	1b40      	subs	r0, r0, r5
 80049a0:	6060      	str	r0, [r4, #4]
 80049a2:	6863      	ldr	r3, [r4, #4]
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	2300      	movs	r3, #0
 80049a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ac:	e7aa      	b.n	8004904 <_printf_i+0x14c>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	462a      	mov	r2, r5
 80049b2:	4649      	mov	r1, r9
 80049b4:	4640      	mov	r0, r8
 80049b6:	47d0      	blx	sl
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0ad      	beq.n	8004918 <_printf_i+0x160>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	079b      	lsls	r3, r3, #30
 80049c0:	d413      	bmi.n	80049ea <_printf_i+0x232>
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	4298      	cmp	r0, r3
 80049c8:	bfb8      	it	lt
 80049ca:	4618      	movlt	r0, r3
 80049cc:	e7a6      	b.n	800491c <_printf_i+0x164>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d09d      	beq.n	8004918 <_printf_i+0x160>
 80049dc:	3501      	adds	r5, #1
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	9903      	ldr	r1, [sp, #12]
 80049e2:	1a5b      	subs	r3, r3, r1
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dcf2      	bgt.n	80049ce <_printf_i+0x216>
 80049e8:	e7eb      	b.n	80049c2 <_printf_i+0x20a>
 80049ea:	2500      	movs	r5, #0
 80049ec:	f104 0619 	add.w	r6, r4, #25
 80049f0:	e7f5      	b.n	80049de <_printf_i+0x226>
 80049f2:	bf00      	nop
 80049f4:	08006f1e 	.word	0x08006f1e
 80049f8:	08006f2f 	.word	0x08006f2f

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f000 f914 	bl	8004c46 <memset>
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <std+0x58>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <std+0x5c>)
 8004a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <std+0x60>)
 8004a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <std+0x64>)
 8004a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <std+0x68>)
 8004a30:	6224      	str	r4, [r4, #32]
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d006      	beq.n	8004a44 <std+0x48>
 8004a36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a3a:	4294      	cmp	r4, r2
 8004a3c:	d002      	beq.n	8004a44 <std+0x48>
 8004a3e:	33d0      	adds	r3, #208	; 0xd0
 8004a40:	429c      	cmp	r4, r3
 8004a42:	d105      	bne.n	8004a50 <std+0x54>
 8004a44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	f000 b978 	b.w	8004d40 <__retarget_lock_init_recursive>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08004bc1 	.word	0x08004bc1
 8004a58:	08004be3 	.word	0x08004be3
 8004a5c:	08004c1b 	.word	0x08004c1b
 8004a60:	08004c3f 	.word	0x08004c3f
 8004a64:	200002cc 	.word	0x200002cc

08004a68 <stdio_exit_handler>:
 8004a68:	4a02      	ldr	r2, [pc, #8]	; (8004a74 <stdio_exit_handler+0xc>)
 8004a6a:	4903      	ldr	r1, [pc, #12]	; (8004a78 <stdio_exit_handler+0x10>)
 8004a6c:	4803      	ldr	r0, [pc, #12]	; (8004a7c <stdio_exit_handler+0x14>)
 8004a6e:	f000 b869 	b.w	8004b44 <_fwalk_sglue>
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	080066f1 	.word	0x080066f1
 8004a7c:	20000018 	.word	0x20000018

08004a80 <cleanup_stdio>:
 8004a80:	6841      	ldr	r1, [r0, #4]
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <cleanup_stdio+0x34>)
 8004a84:	4299      	cmp	r1, r3
 8004a86:	b510      	push	{r4, lr}
 8004a88:	4604      	mov	r4, r0
 8004a8a:	d001      	beq.n	8004a90 <cleanup_stdio+0x10>
 8004a8c:	f001 fe30 	bl	80066f0 <_fflush_r>
 8004a90:	68a1      	ldr	r1, [r4, #8]
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <cleanup_stdio+0x38>)
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d002      	beq.n	8004a9e <cleanup_stdio+0x1e>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f001 fe29 	bl	80066f0 <_fflush_r>
 8004a9e:	68e1      	ldr	r1, [r4, #12]
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <cleanup_stdio+0x3c>)
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	d004      	beq.n	8004ab0 <cleanup_stdio+0x30>
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aac:	f001 be20 	b.w	80066f0 <_fflush_r>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	200002cc 	.word	0x200002cc
 8004ab8:	20000334 	.word	0x20000334
 8004abc:	2000039c 	.word	0x2000039c

08004ac0 <global_stdio_init.part.0>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <global_stdio_init.part.0+0x30>)
 8004ac4:	4c0b      	ldr	r4, [pc, #44]	; (8004af4 <global_stdio_init.part.0+0x34>)
 8004ac6:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <global_stdio_init.part.0+0x38>)
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	4620      	mov	r0, r4
 8004acc:	2200      	movs	r2, #0
 8004ace:	2104      	movs	r1, #4
 8004ad0:	f7ff ff94 	bl	80049fc <std>
 8004ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2109      	movs	r1, #9
 8004adc:	f7ff ff8e 	bl	80049fc <std>
 8004ae0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aea:	2112      	movs	r1, #18
 8004aec:	f7ff bf86 	b.w	80049fc <std>
 8004af0:	20000404 	.word	0x20000404
 8004af4:	200002cc 	.word	0x200002cc
 8004af8:	08004a69 	.word	0x08004a69

08004afc <__sfp_lock_acquire>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sfp_lock_acquire+0x8>)
 8004afe:	f000 b920 	b.w	8004d42 <__retarget_lock_acquire_recursive>
 8004b02:	bf00      	nop
 8004b04:	2000040d 	.word	0x2000040d

08004b08 <__sfp_lock_release>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__sfp_lock_release+0x8>)
 8004b0a:	f000 b91b 	b.w	8004d44 <__retarget_lock_release_recursive>
 8004b0e:	bf00      	nop
 8004b10:	2000040d 	.word	0x2000040d

08004b14 <__sinit>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	4604      	mov	r4, r0
 8004b18:	f7ff fff0 	bl	8004afc <__sfp_lock_acquire>
 8004b1c:	6a23      	ldr	r3, [r4, #32]
 8004b1e:	b11b      	cbz	r3, 8004b28 <__sinit+0x14>
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f7ff bff0 	b.w	8004b08 <__sfp_lock_release>
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <__sinit+0x28>)
 8004b2a:	6223      	str	r3, [r4, #32]
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <__sinit+0x2c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f5      	bne.n	8004b20 <__sinit+0xc>
 8004b34:	f7ff ffc4 	bl	8004ac0 <global_stdio_init.part.0>
 8004b38:	e7f2      	b.n	8004b20 <__sinit+0xc>
 8004b3a:	bf00      	nop
 8004b3c:	08004a81 	.word	0x08004a81
 8004b40:	20000404 	.word	0x20000404

08004b44 <_fwalk_sglue>:
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b48:	4607      	mov	r7, r0
 8004b4a:	4688      	mov	r8, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	2600      	movs	r6, #0
 8004b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b54:	f1b9 0901 	subs.w	r9, r9, #1
 8004b58:	d505      	bpl.n	8004b66 <_fwalk_sglue+0x22>
 8004b5a:	6824      	ldr	r4, [r4, #0]
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	d1f7      	bne.n	8004b50 <_fwalk_sglue+0xc>
 8004b60:	4630      	mov	r0, r6
 8004b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b66:	89ab      	ldrh	r3, [r5, #12]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d907      	bls.n	8004b7c <_fwalk_sglue+0x38>
 8004b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b70:	3301      	adds	r3, #1
 8004b72:	d003      	beq.n	8004b7c <_fwalk_sglue+0x38>
 8004b74:	4629      	mov	r1, r5
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c0      	blx	r8
 8004b7a:	4306      	orrs	r6, r0
 8004b7c:	3568      	adds	r5, #104	; 0x68
 8004b7e:	e7e9      	b.n	8004b54 <_fwalk_sglue+0x10>

08004b80 <siprintf>:
 8004b80:	b40e      	push	{r1, r2, r3}
 8004b82:	b500      	push	{lr}
 8004b84:	b09c      	sub	sp, #112	; 0x70
 8004b86:	ab1d      	add	r3, sp, #116	; 0x74
 8004b88:	9002      	str	r0, [sp, #8]
 8004b8a:	9006      	str	r0, [sp, #24]
 8004b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b90:	4809      	ldr	r0, [pc, #36]	; (8004bb8 <siprintf+0x38>)
 8004b92:	9107      	str	r1, [sp, #28]
 8004b94:	9104      	str	r1, [sp, #16]
 8004b96:	4909      	ldr	r1, [pc, #36]	; (8004bbc <siprintf+0x3c>)
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	9105      	str	r1, [sp, #20]
 8004b9e:	6800      	ldr	r0, [r0, #0]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	a902      	add	r1, sp, #8
 8004ba4:	f001 fc20 	bl	80063e8 <_svfiprintf_r>
 8004ba8:	9b02      	ldr	r3, [sp, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	b01c      	add	sp, #112	; 0x70
 8004bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb4:	b003      	add	sp, #12
 8004bb6:	4770      	bx	lr
 8004bb8:	20000064 	.word	0x20000064
 8004bbc:	ffff0208 	.word	0xffff0208

08004bc0 <__sread>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	f000 f86c 	bl	8004ca4 <_read_r>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	bfab      	itete	ge
 8004bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd4:	181b      	addge	r3, r3, r0
 8004bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bda:	bfac      	ite	ge
 8004bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bde:	81a3      	strhlt	r3, [r4, #12]
 8004be0:	bd10      	pop	{r4, pc}

08004be2 <__swrite>:
 8004be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be6:	461f      	mov	r7, r3
 8004be8:	898b      	ldrh	r3, [r1, #12]
 8004bea:	05db      	lsls	r3, r3, #23
 8004bec:	4605      	mov	r5, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	d505      	bpl.n	8004c00 <__swrite+0x1e>
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f000 f840 	bl	8004c80 <_lseek_r>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	463b      	mov	r3, r7
 8004c10:	4628      	mov	r0, r5
 8004c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c16:	f000 b857 	b.w	8004cc8 <_write_r>

08004c1a <__sseek>:
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c22:	f000 f82d 	bl	8004c80 <_lseek_r>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	89a3      	ldrh	r3, [r4, #12]
 8004c2a:	bf15      	itete	ne
 8004c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c36:	81a3      	strheq	r3, [r4, #12]
 8004c38:	bf18      	it	ne
 8004c3a:	81a3      	strhne	r3, [r4, #12]
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <__sclose>:
 8004c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c42:	f000 b80d 	b.w	8004c60 <_close_r>

08004c46 <memset>:
 8004c46:	4402      	add	r2, r0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <memset+0xa>
 8004c4e:	4770      	bx	lr
 8004c50:	f803 1b01 	strb.w	r1, [r3], #1
 8004c54:	e7f9      	b.n	8004c4a <memset+0x4>
	...

08004c58 <_localeconv_r>:
 8004c58:	4800      	ldr	r0, [pc, #0]	; (8004c5c <_localeconv_r+0x4>)
 8004c5a:	4770      	bx	lr
 8004c5c:	20000158 	.word	0x20000158

08004c60 <_close_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_close_r+0x1c>)
 8004c64:	2300      	movs	r3, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc fde1 	bl	8001832 <_close>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_close_r+0x1a>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_close_r+0x1a>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000408 	.word	0x20000408

08004c80 <_lseek_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4d07      	ldr	r5, [pc, #28]	; (8004ca0 <_lseek_r+0x20>)
 8004c84:	4604      	mov	r4, r0
 8004c86:	4608      	mov	r0, r1
 8004c88:	4611      	mov	r1, r2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	602a      	str	r2, [r5, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f7fc fdf6 	bl	8001880 <_lseek>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_lseek_r+0x1e>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_lseek_r+0x1e>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	20000408 	.word	0x20000408

08004ca4 <_read_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4d07      	ldr	r5, [pc, #28]	; (8004cc4 <_read_r+0x20>)
 8004ca8:	4604      	mov	r4, r0
 8004caa:	4608      	mov	r0, r1
 8004cac:	4611      	mov	r1, r2
 8004cae:	2200      	movs	r2, #0
 8004cb0:	602a      	str	r2, [r5, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7fc fd84 	bl	80017c0 <_read>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_read_r+0x1e>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_read_r+0x1e>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000408 	.word	0x20000408

08004cc8 <_write_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d07      	ldr	r5, [pc, #28]	; (8004ce8 <_write_r+0x20>)
 8004ccc:	4604      	mov	r4, r0
 8004cce:	4608      	mov	r0, r1
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	602a      	str	r2, [r5, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f7fc fd8f 	bl	80017fa <_write>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_write_r+0x1e>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_write_r+0x1e>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	20000408 	.word	0x20000408

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000064 	.word	0x20000064

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f002 f894 	bl	8006e38 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08007284 	.word	0x08007284
 8004d34:	08007284 	.word	0x08007284
 8004d38:	08007284 	.word	0x08007284
 8004d3c:	08007288 	.word	0x08007288

08004d40 <__retarget_lock_init_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_acquire_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <__retarget_lock_release_recursive>:
 8004d44:	4770      	bx	lr

08004d46 <quorem>:
 8004d46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	6903      	ldr	r3, [r0, #16]
 8004d4c:	690c      	ldr	r4, [r1, #16]
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	4607      	mov	r7, r0
 8004d52:	db7e      	blt.n	8004e52 <quorem+0x10c>
 8004d54:	3c01      	subs	r4, #1
 8004d56:	f101 0814 	add.w	r8, r1, #20
 8004d5a:	f100 0514 	add.w	r5, r0, #20
 8004d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d78:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d7c:	d331      	bcc.n	8004de2 <quorem+0x9c>
 8004d7e:	f04f 0e00 	mov.w	lr, #0
 8004d82:	4640      	mov	r0, r8
 8004d84:	46ac      	mov	ip, r5
 8004d86:	46f2      	mov	sl, lr
 8004d88:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d8c:	b293      	uxth	r3, r2
 8004d8e:	fb06 e303 	mla	r3, r6, r3, lr
 8004d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d96:	0c1a      	lsrs	r2, r3, #16
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d9e:	f8dc a000 	ldr.w	sl, [ip]
 8004da2:	fa13 f38a 	uxtah	r3, r3, sl
 8004da6:	fb06 220e 	mla	r2, r6, lr, r2
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	9b00      	ldr	r3, [sp, #0]
 8004dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004db2:	b292      	uxth	r2, r2
 8004db4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004db8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8004dc0:	4581      	cmp	r9, r0
 8004dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc6:	f84c 3b04 	str.w	r3, [ip], #4
 8004dca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dce:	d2db      	bcs.n	8004d88 <quorem+0x42>
 8004dd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dd4:	b92b      	cbnz	r3, 8004de2 <quorem+0x9c>
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	429d      	cmp	r5, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	d32c      	bcc.n	8004e3a <quorem+0xf4>
 8004de0:	613c      	str	r4, [r7, #16]
 8004de2:	4638      	mov	r0, r7
 8004de4:	f001 f9a6 	bl	8006134 <__mcmp>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	db22      	blt.n	8004e32 <quorem+0xec>
 8004dec:	3601      	adds	r6, #1
 8004dee:	4629      	mov	r1, r5
 8004df0:	2000      	movs	r0, #0
 8004df2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004df6:	f8d1 c000 	ldr.w	ip, [r1]
 8004dfa:	b293      	uxth	r3, r2
 8004dfc:	1ac3      	subs	r3, r0, r3
 8004dfe:	0c12      	lsrs	r2, r2, #16
 8004e00:	fa13 f38c 	uxtah	r3, r3, ip
 8004e04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e12:	45c1      	cmp	r9, r8
 8004e14:	f841 3b04 	str.w	r3, [r1], #4
 8004e18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e1c:	d2e9      	bcs.n	8004df2 <quorem+0xac>
 8004e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e26:	b922      	cbnz	r2, 8004e32 <quorem+0xec>
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	429d      	cmp	r5, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	d30a      	bcc.n	8004e46 <quorem+0x100>
 8004e30:	613c      	str	r4, [r7, #16]
 8004e32:	4630      	mov	r0, r6
 8004e34:	b003      	add	sp, #12
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	d1ce      	bne.n	8004de0 <quorem+0x9a>
 8004e42:	3c01      	subs	r4, #1
 8004e44:	e7c9      	b.n	8004dda <quorem+0x94>
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	d1f0      	bne.n	8004e30 <quorem+0xea>
 8004e4e:	3c01      	subs	r4, #1
 8004e50:	e7eb      	b.n	8004e2a <quorem+0xe4>
 8004e52:	2000      	movs	r0, #0
 8004e54:	e7ee      	b.n	8004e34 <quorem+0xee>
	...

08004e58 <_dtoa_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	ed2d 8b04 	vpush	{d8-d9}
 8004e60:	69c5      	ldr	r5, [r0, #28]
 8004e62:	b093      	sub	sp, #76	; 0x4c
 8004e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004e68:	ec57 6b10 	vmov	r6, r7, d0
 8004e6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e70:	9107      	str	r1, [sp, #28]
 8004e72:	4604      	mov	r4, r0
 8004e74:	920a      	str	r2, [sp, #40]	; 0x28
 8004e76:	930d      	str	r3, [sp, #52]	; 0x34
 8004e78:	b975      	cbnz	r5, 8004e98 <_dtoa_r+0x40>
 8004e7a:	2010      	movs	r0, #16
 8004e7c:	f000 fe2a 	bl	8005ad4 <malloc>
 8004e80:	4602      	mov	r2, r0
 8004e82:	61e0      	str	r0, [r4, #28]
 8004e84:	b920      	cbnz	r0, 8004e90 <_dtoa_r+0x38>
 8004e86:	4bae      	ldr	r3, [pc, #696]	; (8005140 <_dtoa_r+0x2e8>)
 8004e88:	21ef      	movs	r1, #239	; 0xef
 8004e8a:	48ae      	ldr	r0, [pc, #696]	; (8005144 <_dtoa_r+0x2ec>)
 8004e8c:	f001 fc90 	bl	80067b0 <__assert_func>
 8004e90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e94:	6005      	str	r5, [r0, #0]
 8004e96:	60c5      	str	r5, [r0, #12]
 8004e98:	69e3      	ldr	r3, [r4, #28]
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	b151      	cbz	r1, 8004eb4 <_dtoa_r+0x5c>
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	604a      	str	r2, [r1, #4]
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4093      	lsls	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 ff07 	bl	8005cbc <_Bfree>
 8004eae:	69e3      	ldr	r3, [r4, #28]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	1e3b      	subs	r3, r7, #0
 8004eb6:	bfbb      	ittet	lt
 8004eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ebc:	9303      	strlt	r3, [sp, #12]
 8004ebe:	2300      	movge	r3, #0
 8004ec0:	2201      	movlt	r2, #1
 8004ec2:	bfac      	ite	ge
 8004ec4:	f8c8 3000 	strge.w	r3, [r8]
 8004ec8:	f8c8 2000 	strlt.w	r2, [r8]
 8004ecc:	4b9e      	ldr	r3, [pc, #632]	; (8005148 <_dtoa_r+0x2f0>)
 8004ece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ed2:	ea33 0308 	bics.w	r3, r3, r8
 8004ed6:	d11b      	bne.n	8004f10 <_dtoa_r+0xb8>
 8004ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004ee4:	4333      	orrs	r3, r6
 8004ee6:	f000 8593 	beq.w	8005a10 <_dtoa_r+0xbb8>
 8004eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eec:	b963      	cbnz	r3, 8004f08 <_dtoa_r+0xb0>
 8004eee:	4b97      	ldr	r3, [pc, #604]	; (800514c <_dtoa_r+0x2f4>)
 8004ef0:	e027      	b.n	8004f42 <_dtoa_r+0xea>
 8004ef2:	4b97      	ldr	r3, [pc, #604]	; (8005150 <_dtoa_r+0x2f8>)
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	9800      	ldr	r0, [sp, #0]
 8004efe:	b013      	add	sp, #76	; 0x4c
 8004f00:	ecbd 8b04 	vpop	{d8-d9}
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	4b90      	ldr	r3, [pc, #576]	; (800514c <_dtoa_r+0x2f4>)
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	e7f3      	b.n	8004ef8 <_dtoa_r+0xa0>
 8004f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	ec51 0b17 	vmov	r0, r1, d7
 8004f1a:	eeb0 8a47 	vmov.f32	s16, s14
 8004f1e:	eef0 8a67 	vmov.f32	s17, s15
 8004f22:	2300      	movs	r3, #0
 8004f24:	f7fb fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f28:	4681      	mov	r9, r0
 8004f2a:	b160      	cbz	r0, 8004f46 <_dtoa_r+0xee>
 8004f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f2e:	2301      	movs	r3, #1
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8568 	beq.w	8005a0a <_dtoa_r+0xbb2>
 8004f3a:	4b86      	ldr	r3, [pc, #536]	; (8005154 <_dtoa_r+0x2fc>)
 8004f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	e7da      	b.n	8004efc <_dtoa_r+0xa4>
 8004f46:	aa10      	add	r2, sp, #64	; 0x40
 8004f48:	a911      	add	r1, sp, #68	; 0x44
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	eeb0 0a48 	vmov.f32	s0, s16
 8004f50:	eef0 0a68 	vmov.f32	s1, s17
 8004f54:	f001 f994 	bl	8006280 <__d2b>
 8004f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	d07f      	beq.n	8005062 <_dtoa_r+0x20a>
 8004f62:	ee18 3a90 	vmov	r3, s17
 8004f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f6e:	ec51 0b18 	vmov	r0, r1, d8
 8004f72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f7e:	4619      	mov	r1, r3
 8004f80:	2200      	movs	r2, #0
 8004f82:	4b75      	ldr	r3, [pc, #468]	; (8005158 <_dtoa_r+0x300>)
 8004f84:	f7fb f980 	bl	8000288 <__aeabi_dsub>
 8004f88:	a367      	add	r3, pc, #412	; (adr r3, 8005128 <_dtoa_r+0x2d0>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fb33 	bl	80005f8 <__aeabi_dmul>
 8004f92:	a367      	add	r3, pc, #412	; (adr r3, 8005130 <_dtoa_r+0x2d8>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb f978 	bl	800028c <__adddf3>
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	f7fb fabf 	bl	8000524 <__aeabi_i2d>
 8004fa6:	a364      	add	r3, pc, #400	; (adr r3, 8005138 <_dtoa_r+0x2e0>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb fb24 	bl	80005f8 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb f968 	bl	800028c <__adddf3>
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460f      	mov	r7, r1
 8004fc0:	f7fb fdca 	bl	8000b58 <__aeabi_d2iz>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4683      	mov	fp, r0
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	4639      	mov	r1, r7
 8004fce:	f7fb fd85 	bl	8000adc <__aeabi_dcmplt>
 8004fd2:	b148      	cbz	r0, 8004fe8 <_dtoa_r+0x190>
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	f7fb faa5 	bl	8000524 <__aeabi_i2d>
 8004fda:	4632      	mov	r2, r6
 8004fdc:	463b      	mov	r3, r7
 8004fde:	f7fb fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe2:	b908      	cbnz	r0, 8004fe8 <_dtoa_r+0x190>
 8004fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fe8:	f1bb 0f16 	cmp.w	fp, #22
 8004fec:	d857      	bhi.n	800509e <_dtoa_r+0x246>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <_dtoa_r+0x304>)
 8004ff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	ec51 0b18 	vmov	r0, r1, d8
 8004ffc:	f7fb fd6e 	bl	8000adc <__aeabi_dcmplt>
 8005000:	2800      	cmp	r0, #0
 8005002:	d04e      	beq.n	80050a2 <_dtoa_r+0x24a>
 8005004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005008:	2300      	movs	r3, #0
 800500a:	930c      	str	r3, [sp, #48]	; 0x30
 800500c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800500e:	1b5b      	subs	r3, r3, r5
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	bf45      	ittet	mi
 8005014:	f1c3 0301 	rsbmi	r3, r3, #1
 8005018:	9305      	strmi	r3, [sp, #20]
 800501a:	2300      	movpl	r3, #0
 800501c:	2300      	movmi	r3, #0
 800501e:	9206      	str	r2, [sp, #24]
 8005020:	bf54      	ite	pl
 8005022:	9305      	strpl	r3, [sp, #20]
 8005024:	9306      	strmi	r3, [sp, #24]
 8005026:	f1bb 0f00 	cmp.w	fp, #0
 800502a:	db3c      	blt.n	80050a6 <_dtoa_r+0x24e>
 800502c:	9b06      	ldr	r3, [sp, #24]
 800502e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005032:	445b      	add	r3, fp
 8005034:	9306      	str	r3, [sp, #24]
 8005036:	2300      	movs	r3, #0
 8005038:	9308      	str	r3, [sp, #32]
 800503a:	9b07      	ldr	r3, [sp, #28]
 800503c:	2b09      	cmp	r3, #9
 800503e:	d868      	bhi.n	8005112 <_dtoa_r+0x2ba>
 8005040:	2b05      	cmp	r3, #5
 8005042:	bfc4      	itt	gt
 8005044:	3b04      	subgt	r3, #4
 8005046:	9307      	strgt	r3, [sp, #28]
 8005048:	9b07      	ldr	r3, [sp, #28]
 800504a:	f1a3 0302 	sub.w	r3, r3, #2
 800504e:	bfcc      	ite	gt
 8005050:	2500      	movgt	r5, #0
 8005052:	2501      	movle	r5, #1
 8005054:	2b03      	cmp	r3, #3
 8005056:	f200 8085 	bhi.w	8005164 <_dtoa_r+0x30c>
 800505a:	e8df f003 	tbb	[pc, r3]
 800505e:	3b2e      	.short	0x3b2e
 8005060:	5839      	.short	0x5839
 8005062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005066:	441d      	add	r5, r3
 8005068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800506c:	2b20      	cmp	r3, #32
 800506e:	bfc1      	itttt	gt
 8005070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005074:	fa08 f803 	lslgt.w	r8, r8, r3
 8005078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800507c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005080:	bfd6      	itet	le
 8005082:	f1c3 0320 	rsble	r3, r3, #32
 8005086:	ea48 0003 	orrgt.w	r0, r8, r3
 800508a:	fa06 f003 	lslle.w	r0, r6, r3
 800508e:	f7fb fa39 	bl	8000504 <__aeabi_ui2d>
 8005092:	2201      	movs	r2, #1
 8005094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005098:	3d01      	subs	r5, #1
 800509a:	920e      	str	r2, [sp, #56]	; 0x38
 800509c:	e76f      	b.n	8004f7e <_dtoa_r+0x126>
 800509e:	2301      	movs	r3, #1
 80050a0:	e7b3      	b.n	800500a <_dtoa_r+0x1b2>
 80050a2:	900c      	str	r0, [sp, #48]	; 0x30
 80050a4:	e7b2      	b.n	800500c <_dtoa_r+0x1b4>
 80050a6:	9b05      	ldr	r3, [sp, #20]
 80050a8:	eba3 030b 	sub.w	r3, r3, fp
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f1cb 0300 	rsb	r3, fp, #0
 80050b2:	9308      	str	r3, [sp, #32]
 80050b4:	2300      	movs	r3, #0
 80050b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b8:	e7bf      	b.n	800503a <_dtoa_r+0x1e2>
 80050ba:	2300      	movs	r3, #0
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dc52      	bgt.n	800516a <_dtoa_r+0x312>
 80050c4:	2301      	movs	r3, #1
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	461a      	mov	r2, r3
 80050cc:	920a      	str	r2, [sp, #40]	; 0x28
 80050ce:	e00b      	b.n	80050e8 <_dtoa_r+0x290>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e7f3      	b.n	80050bc <_dtoa_r+0x264>
 80050d4:	2300      	movs	r3, #0
 80050d6:	9309      	str	r3, [sp, #36]	; 0x24
 80050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050da:	445b      	add	r3, fp
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	3301      	adds	r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	bfb8      	it	lt
 80050e6:	2301      	movlt	r3, #1
 80050e8:	69e0      	ldr	r0, [r4, #28]
 80050ea:	2100      	movs	r1, #0
 80050ec:	2204      	movs	r2, #4
 80050ee:	f102 0614 	add.w	r6, r2, #20
 80050f2:	429e      	cmp	r6, r3
 80050f4:	d93d      	bls.n	8005172 <_dtoa_r+0x31a>
 80050f6:	6041      	str	r1, [r0, #4]
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 fd9f 	bl	8005c3c <_Balloc>
 80050fe:	9000      	str	r0, [sp, #0]
 8005100:	2800      	cmp	r0, #0
 8005102:	d139      	bne.n	8005178 <_dtoa_r+0x320>
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <_dtoa_r+0x308>)
 8005106:	4602      	mov	r2, r0
 8005108:	f240 11af 	movw	r1, #431	; 0x1af
 800510c:	e6bd      	b.n	8004e8a <_dtoa_r+0x32>
 800510e:	2301      	movs	r3, #1
 8005110:	e7e1      	b.n	80050d6 <_dtoa_r+0x27e>
 8005112:	2501      	movs	r5, #1
 8005114:	2300      	movs	r3, #0
 8005116:	9307      	str	r3, [sp, #28]
 8005118:	9509      	str	r5, [sp, #36]	; 0x24
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	2200      	movs	r2, #0
 8005124:	2312      	movs	r3, #18
 8005126:	e7d1      	b.n	80050cc <_dtoa_r+0x274>
 8005128:	636f4361 	.word	0x636f4361
 800512c:	3fd287a7 	.word	0x3fd287a7
 8005130:	8b60c8b3 	.word	0x8b60c8b3
 8005134:	3fc68a28 	.word	0x3fc68a28
 8005138:	509f79fb 	.word	0x509f79fb
 800513c:	3fd34413 	.word	0x3fd34413
 8005140:	08006f4d 	.word	0x08006f4d
 8005144:	08006f64 	.word	0x08006f64
 8005148:	7ff00000 	.word	0x7ff00000
 800514c:	08006f49 	.word	0x08006f49
 8005150:	08006f40 	.word	0x08006f40
 8005154:	08006f1d 	.word	0x08006f1d
 8005158:	3ff80000 	.word	0x3ff80000
 800515c:	08007050 	.word	0x08007050
 8005160:	08006fbc 	.word	0x08006fbc
 8005164:	2301      	movs	r3, #1
 8005166:	9309      	str	r3, [sp, #36]	; 0x24
 8005168:	e7d7      	b.n	800511a <_dtoa_r+0x2c2>
 800516a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	e7ba      	b.n	80050e8 <_dtoa_r+0x290>
 8005172:	3101      	adds	r1, #1
 8005174:	0052      	lsls	r2, r2, #1
 8005176:	e7ba      	b.n	80050ee <_dtoa_r+0x296>
 8005178:	69e3      	ldr	r3, [r4, #28]
 800517a:	9a00      	ldr	r2, [sp, #0]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	9b04      	ldr	r3, [sp, #16]
 8005180:	2b0e      	cmp	r3, #14
 8005182:	f200 80a8 	bhi.w	80052d6 <_dtoa_r+0x47e>
 8005186:	2d00      	cmp	r5, #0
 8005188:	f000 80a5 	beq.w	80052d6 <_dtoa_r+0x47e>
 800518c:	f1bb 0f00 	cmp.w	fp, #0
 8005190:	dd38      	ble.n	8005204 <_dtoa_r+0x3ac>
 8005192:	4bc0      	ldr	r3, [pc, #768]	; (8005494 <_dtoa_r+0x63c>)
 8005194:	f00b 020f 	and.w	r2, fp, #15
 8005198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800519c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80051a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80051a8:	d019      	beq.n	80051de <_dtoa_r+0x386>
 80051aa:	4bbb      	ldr	r3, [pc, #748]	; (8005498 <_dtoa_r+0x640>)
 80051ac:	ec51 0b18 	vmov	r0, r1, d8
 80051b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051b4:	f7fb fb4a 	bl	800084c <__aeabi_ddiv>
 80051b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051bc:	f008 080f 	and.w	r8, r8, #15
 80051c0:	2503      	movs	r5, #3
 80051c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005498 <_dtoa_r+0x640>
 80051c6:	f1b8 0f00 	cmp.w	r8, #0
 80051ca:	d10a      	bne.n	80051e2 <_dtoa_r+0x38a>
 80051cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051d0:	4632      	mov	r2, r6
 80051d2:	463b      	mov	r3, r7
 80051d4:	f7fb fb3a 	bl	800084c <__aeabi_ddiv>
 80051d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051dc:	e02b      	b.n	8005236 <_dtoa_r+0x3de>
 80051de:	2502      	movs	r5, #2
 80051e0:	e7ef      	b.n	80051c2 <_dtoa_r+0x36a>
 80051e2:	f018 0f01 	tst.w	r8, #1
 80051e6:	d008      	beq.n	80051fa <_dtoa_r+0x3a2>
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80051f0:	f7fb fa02 	bl	80005f8 <__aeabi_dmul>
 80051f4:	3501      	adds	r5, #1
 80051f6:	4606      	mov	r6, r0
 80051f8:	460f      	mov	r7, r1
 80051fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051fe:	f109 0908 	add.w	r9, r9, #8
 8005202:	e7e0      	b.n	80051c6 <_dtoa_r+0x36e>
 8005204:	f000 809f 	beq.w	8005346 <_dtoa_r+0x4ee>
 8005208:	f1cb 0600 	rsb	r6, fp, #0
 800520c:	4ba1      	ldr	r3, [pc, #644]	; (8005494 <_dtoa_r+0x63c>)
 800520e:	4fa2      	ldr	r7, [pc, #648]	; (8005498 <_dtoa_r+0x640>)
 8005210:	f006 020f 	and.w	r2, r6, #15
 8005214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	ec51 0b18 	vmov	r0, r1, d8
 8005220:	f7fb f9ea 	bl	80005f8 <__aeabi_dmul>
 8005224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005228:	1136      	asrs	r6, r6, #4
 800522a:	2300      	movs	r3, #0
 800522c:	2502      	movs	r5, #2
 800522e:	2e00      	cmp	r6, #0
 8005230:	d17e      	bne.n	8005330 <_dtoa_r+0x4d8>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1d0      	bne.n	80051d8 <_dtoa_r+0x380>
 8005236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8084 	beq.w	800534a <_dtoa_r+0x4f2>
 8005242:	4b96      	ldr	r3, [pc, #600]	; (800549c <_dtoa_r+0x644>)
 8005244:	2200      	movs	r2, #0
 8005246:	4640      	mov	r0, r8
 8005248:	4649      	mov	r1, r9
 800524a:	f7fb fc47 	bl	8000adc <__aeabi_dcmplt>
 800524e:	2800      	cmp	r0, #0
 8005250:	d07b      	beq.n	800534a <_dtoa_r+0x4f2>
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d078      	beq.n	800534a <_dtoa_r+0x4f2>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	dd39      	ble.n	80052d2 <_dtoa_r+0x47a>
 800525e:	4b90      	ldr	r3, [pc, #576]	; (80054a0 <_dtoa_r+0x648>)
 8005260:	2200      	movs	r2, #0
 8005262:	4640      	mov	r0, r8
 8005264:	4649      	mov	r1, r9
 8005266:	f7fb f9c7 	bl	80005f8 <__aeabi_dmul>
 800526a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800526e:	9e01      	ldr	r6, [sp, #4]
 8005270:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005274:	3501      	adds	r5, #1
 8005276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800527a:	4628      	mov	r0, r5
 800527c:	f7fb f952 	bl	8000524 <__aeabi_i2d>
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	f7fb f9b8 	bl	80005f8 <__aeabi_dmul>
 8005288:	4b86      	ldr	r3, [pc, #536]	; (80054a4 <_dtoa_r+0x64c>)
 800528a:	2200      	movs	r2, #0
 800528c:	f7fa fffe 	bl	800028c <__adddf3>
 8005290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	2e00      	cmp	r6, #0
 800529c:	d158      	bne.n	8005350 <_dtoa_r+0x4f8>
 800529e:	4b82      	ldr	r3, [pc, #520]	; (80054a8 <_dtoa_r+0x650>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fa ffef 	bl	8000288 <__aeabi_dsub>
 80052aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ae:	4680      	mov	r8, r0
 80052b0:	4689      	mov	r9, r1
 80052b2:	f7fb fc31 	bl	8000b18 <__aeabi_dcmpgt>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f040 8296 	bne.w	80057e8 <_dtoa_r+0x990>
 80052bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80052c0:	4640      	mov	r0, r8
 80052c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052c6:	4649      	mov	r1, r9
 80052c8:	f7fb fc08 	bl	8000adc <__aeabi_dcmplt>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8289 	bne.w	80057e4 <_dtoa_r+0x98c>
 80052d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80052d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f2c0 814e 	blt.w	800557a <_dtoa_r+0x722>
 80052de:	f1bb 0f0e 	cmp.w	fp, #14
 80052e2:	f300 814a 	bgt.w	800557a <_dtoa_r+0x722>
 80052e6:	4b6b      	ldr	r3, [pc, #428]	; (8005494 <_dtoa_r+0x63c>)
 80052e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f280 80dc 	bge.w	80054b0 <_dtoa_r+0x658>
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f300 80d8 	bgt.w	80054b0 <_dtoa_r+0x658>
 8005300:	f040 826f 	bne.w	80057e2 <_dtoa_r+0x98a>
 8005304:	4b68      	ldr	r3, [pc, #416]	; (80054a8 <_dtoa_r+0x650>)
 8005306:	2200      	movs	r2, #0
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	f7fb f974 	bl	80005f8 <__aeabi_dmul>
 8005310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005314:	f7fb fbf6 	bl	8000b04 <__aeabi_dcmpge>
 8005318:	9e04      	ldr	r6, [sp, #16]
 800531a:	4637      	mov	r7, r6
 800531c:	2800      	cmp	r0, #0
 800531e:	f040 8245 	bne.w	80057ac <_dtoa_r+0x954>
 8005322:	9d00      	ldr	r5, [sp, #0]
 8005324:	2331      	movs	r3, #49	; 0x31
 8005326:	f805 3b01 	strb.w	r3, [r5], #1
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	e241      	b.n	80057b4 <_dtoa_r+0x95c>
 8005330:	07f2      	lsls	r2, r6, #31
 8005332:	d505      	bpl.n	8005340 <_dtoa_r+0x4e8>
 8005334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005338:	f7fb f95e 	bl	80005f8 <__aeabi_dmul>
 800533c:	3501      	adds	r5, #1
 800533e:	2301      	movs	r3, #1
 8005340:	1076      	asrs	r6, r6, #1
 8005342:	3708      	adds	r7, #8
 8005344:	e773      	b.n	800522e <_dtoa_r+0x3d6>
 8005346:	2502      	movs	r5, #2
 8005348:	e775      	b.n	8005236 <_dtoa_r+0x3de>
 800534a:	9e04      	ldr	r6, [sp, #16]
 800534c:	465f      	mov	r7, fp
 800534e:	e792      	b.n	8005276 <_dtoa_r+0x41e>
 8005350:	9900      	ldr	r1, [sp, #0]
 8005352:	4b50      	ldr	r3, [pc, #320]	; (8005494 <_dtoa_r+0x63c>)
 8005354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005358:	4431      	add	r1, r6
 800535a:	9102      	str	r1, [sp, #8]
 800535c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800535e:	eeb0 9a47 	vmov.f32	s18, s14
 8005362:	eef0 9a67 	vmov.f32	s19, s15
 8005366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800536a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800536e:	2900      	cmp	r1, #0
 8005370:	d044      	beq.n	80053fc <_dtoa_r+0x5a4>
 8005372:	494e      	ldr	r1, [pc, #312]	; (80054ac <_dtoa_r+0x654>)
 8005374:	2000      	movs	r0, #0
 8005376:	f7fb fa69 	bl	800084c <__aeabi_ddiv>
 800537a:	ec53 2b19 	vmov	r2, r3, d9
 800537e:	f7fa ff83 	bl	8000288 <__aeabi_dsub>
 8005382:	9d00      	ldr	r5, [sp, #0]
 8005384:	ec41 0b19 	vmov	d9, r0, r1
 8005388:	4649      	mov	r1, r9
 800538a:	4640      	mov	r0, r8
 800538c:	f7fb fbe4 	bl	8000b58 <__aeabi_d2iz>
 8005390:	4606      	mov	r6, r0
 8005392:	f7fb f8c7 	bl	8000524 <__aeabi_i2d>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4640      	mov	r0, r8
 800539c:	4649      	mov	r1, r9
 800539e:	f7fa ff73 	bl	8000288 <__aeabi_dsub>
 80053a2:	3630      	adds	r6, #48	; 0x30
 80053a4:	f805 6b01 	strb.w	r6, [r5], #1
 80053a8:	ec53 2b19 	vmov	r2, r3, d9
 80053ac:	4680      	mov	r8, r0
 80053ae:	4689      	mov	r9, r1
 80053b0:	f7fb fb94 	bl	8000adc <__aeabi_dcmplt>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d164      	bne.n	8005482 <_dtoa_r+0x62a>
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	4937      	ldr	r1, [pc, #220]	; (800549c <_dtoa_r+0x644>)
 80053be:	2000      	movs	r0, #0
 80053c0:	f7fa ff62 	bl	8000288 <__aeabi_dsub>
 80053c4:	ec53 2b19 	vmov	r2, r3, d9
 80053c8:	f7fb fb88 	bl	8000adc <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 80b6 	bne.w	800553e <_dtoa_r+0x6e6>
 80053d2:	9b02      	ldr	r3, [sp, #8]
 80053d4:	429d      	cmp	r5, r3
 80053d6:	f43f af7c 	beq.w	80052d2 <_dtoa_r+0x47a>
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <_dtoa_r+0x648>)
 80053dc:	ec51 0b19 	vmov	r0, r1, d9
 80053e0:	2200      	movs	r2, #0
 80053e2:	f7fb f909 	bl	80005f8 <__aeabi_dmul>
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <_dtoa_r+0x648>)
 80053e8:	ec41 0b19 	vmov	d9, r0, r1
 80053ec:	2200      	movs	r2, #0
 80053ee:	4640      	mov	r0, r8
 80053f0:	4649      	mov	r1, r9
 80053f2:	f7fb f901 	bl	80005f8 <__aeabi_dmul>
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	e7c5      	b.n	8005388 <_dtoa_r+0x530>
 80053fc:	ec51 0b17 	vmov	r0, r1, d7
 8005400:	f7fb f8fa 	bl	80005f8 <__aeabi_dmul>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	9d00      	ldr	r5, [sp, #0]
 8005408:	930f      	str	r3, [sp, #60]	; 0x3c
 800540a:	ec41 0b19 	vmov	d9, r0, r1
 800540e:	4649      	mov	r1, r9
 8005410:	4640      	mov	r0, r8
 8005412:	f7fb fba1 	bl	8000b58 <__aeabi_d2iz>
 8005416:	4606      	mov	r6, r0
 8005418:	f7fb f884 	bl	8000524 <__aeabi_i2d>
 800541c:	3630      	adds	r6, #48	; 0x30
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa ff2f 	bl	8000288 <__aeabi_dsub>
 800542a:	f805 6b01 	strb.w	r6, [r5], #1
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	429d      	cmp	r5, r3
 8005432:	4680      	mov	r8, r0
 8005434:	4689      	mov	r9, r1
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	d124      	bne.n	8005486 <_dtoa_r+0x62e>
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <_dtoa_r+0x654>)
 800543e:	ec51 0b19 	vmov	r0, r1, d9
 8005442:	f7fa ff23 	bl	800028c <__adddf3>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4640      	mov	r0, r8
 800544c:	4649      	mov	r1, r9
 800544e:	f7fb fb63 	bl	8000b18 <__aeabi_dcmpgt>
 8005452:	2800      	cmp	r0, #0
 8005454:	d173      	bne.n	800553e <_dtoa_r+0x6e6>
 8005456:	ec53 2b19 	vmov	r2, r3, d9
 800545a:	4914      	ldr	r1, [pc, #80]	; (80054ac <_dtoa_r+0x654>)
 800545c:	2000      	movs	r0, #0
 800545e:	f7fa ff13 	bl	8000288 <__aeabi_dsub>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fb fb37 	bl	8000adc <__aeabi_dcmplt>
 800546e:	2800      	cmp	r0, #0
 8005470:	f43f af2f 	beq.w	80052d2 <_dtoa_r+0x47a>
 8005474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005476:	1e6b      	subs	r3, r5, #1
 8005478:	930f      	str	r3, [sp, #60]	; 0x3c
 800547a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800547e:	2b30      	cmp	r3, #48	; 0x30
 8005480:	d0f8      	beq.n	8005474 <_dtoa_r+0x61c>
 8005482:	46bb      	mov	fp, r7
 8005484:	e04a      	b.n	800551c <_dtoa_r+0x6c4>
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <_dtoa_r+0x648>)
 8005488:	f7fb f8b6 	bl	80005f8 <__aeabi_dmul>
 800548c:	4680      	mov	r8, r0
 800548e:	4689      	mov	r9, r1
 8005490:	e7bd      	b.n	800540e <_dtoa_r+0x5b6>
 8005492:	bf00      	nop
 8005494:	08007050 	.word	0x08007050
 8005498:	08007028 	.word	0x08007028
 800549c:	3ff00000 	.word	0x3ff00000
 80054a0:	40240000 	.word	0x40240000
 80054a4:	401c0000 	.word	0x401c0000
 80054a8:	40140000 	.word	0x40140000
 80054ac:	3fe00000 	.word	0x3fe00000
 80054b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80054b4:	9d00      	ldr	r5, [sp, #0]
 80054b6:	4642      	mov	r2, r8
 80054b8:	464b      	mov	r3, r9
 80054ba:	4630      	mov	r0, r6
 80054bc:	4639      	mov	r1, r7
 80054be:	f7fb f9c5 	bl	800084c <__aeabi_ddiv>
 80054c2:	f7fb fb49 	bl	8000b58 <__aeabi_d2iz>
 80054c6:	9001      	str	r0, [sp, #4]
 80054c8:	f7fb f82c 	bl	8000524 <__aeabi_i2d>
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	f7fb f892 	bl	80005f8 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fa fed4 	bl	8000288 <__aeabi_dsub>
 80054e0:	9e01      	ldr	r6, [sp, #4]
 80054e2:	9f04      	ldr	r7, [sp, #16]
 80054e4:	3630      	adds	r6, #48	; 0x30
 80054e6:	f805 6b01 	strb.w	r6, [r5], #1
 80054ea:	9e00      	ldr	r6, [sp, #0]
 80054ec:	1bae      	subs	r6, r5, r6
 80054ee:	42b7      	cmp	r7, r6
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	d134      	bne.n	8005560 <_dtoa_r+0x708>
 80054f6:	f7fa fec9 	bl	800028c <__adddf3>
 80054fa:	4642      	mov	r2, r8
 80054fc:	464b      	mov	r3, r9
 80054fe:	4606      	mov	r6, r0
 8005500:	460f      	mov	r7, r1
 8005502:	f7fb fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8005506:	b9c8      	cbnz	r0, 800553c <_dtoa_r+0x6e4>
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	4630      	mov	r0, r6
 800550e:	4639      	mov	r1, r7
 8005510:	f7fb fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8005514:	b110      	cbz	r0, 800551c <_dtoa_r+0x6c4>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d40f      	bmi.n	800553c <_dtoa_r+0x6e4>
 800551c:	4651      	mov	r1, sl
 800551e:	4620      	mov	r0, r4
 8005520:	f000 fbcc 	bl	8005cbc <_Bfree>
 8005524:	2300      	movs	r3, #0
 8005526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005528:	702b      	strb	r3, [r5, #0]
 800552a:	f10b 0301 	add.w	r3, fp, #1
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005532:	2b00      	cmp	r3, #0
 8005534:	f43f ace2 	beq.w	8004efc <_dtoa_r+0xa4>
 8005538:	601d      	str	r5, [r3, #0]
 800553a:	e4df      	b.n	8004efc <_dtoa_r+0xa4>
 800553c:	465f      	mov	r7, fp
 800553e:	462b      	mov	r3, r5
 8005540:	461d      	mov	r5, r3
 8005542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005546:	2a39      	cmp	r2, #57	; 0x39
 8005548:	d106      	bne.n	8005558 <_dtoa_r+0x700>
 800554a:	9a00      	ldr	r2, [sp, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d1f7      	bne.n	8005540 <_dtoa_r+0x6e8>
 8005550:	9900      	ldr	r1, [sp, #0]
 8005552:	2230      	movs	r2, #48	; 0x30
 8005554:	3701      	adds	r7, #1
 8005556:	700a      	strb	r2, [r1, #0]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	3201      	adds	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e790      	b.n	8005482 <_dtoa_r+0x62a>
 8005560:	4ba3      	ldr	r3, [pc, #652]	; (80057f0 <_dtoa_r+0x998>)
 8005562:	2200      	movs	r2, #0
 8005564:	f7fb f848 	bl	80005f8 <__aeabi_dmul>
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	4606      	mov	r6, r0
 800556e:	460f      	mov	r7, r1
 8005570:	f7fb faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005574:	2800      	cmp	r0, #0
 8005576:	d09e      	beq.n	80054b6 <_dtoa_r+0x65e>
 8005578:	e7d0      	b.n	800551c <_dtoa_r+0x6c4>
 800557a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800557c:	2a00      	cmp	r2, #0
 800557e:	f000 80ca 	beq.w	8005716 <_dtoa_r+0x8be>
 8005582:	9a07      	ldr	r2, [sp, #28]
 8005584:	2a01      	cmp	r2, #1
 8005586:	f300 80ad 	bgt.w	80056e4 <_dtoa_r+0x88c>
 800558a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800558c:	2a00      	cmp	r2, #0
 800558e:	f000 80a5 	beq.w	80056dc <_dtoa_r+0x884>
 8005592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005596:	9e08      	ldr	r6, [sp, #32]
 8005598:	9d05      	ldr	r5, [sp, #20]
 800559a:	9a05      	ldr	r2, [sp, #20]
 800559c:	441a      	add	r2, r3
 800559e:	9205      	str	r2, [sp, #20]
 80055a0:	9a06      	ldr	r2, [sp, #24]
 80055a2:	2101      	movs	r1, #1
 80055a4:	441a      	add	r2, r3
 80055a6:	4620      	mov	r0, r4
 80055a8:	9206      	str	r2, [sp, #24]
 80055aa:	f000 fc3d 	bl	8005e28 <__i2b>
 80055ae:	4607      	mov	r7, r0
 80055b0:	b165      	cbz	r5, 80055cc <_dtoa_r+0x774>
 80055b2:	9b06      	ldr	r3, [sp, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd09      	ble.n	80055cc <_dtoa_r+0x774>
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	9a05      	ldr	r2, [sp, #20]
 80055bc:	bfa8      	it	ge
 80055be:	462b      	movge	r3, r5
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	9205      	str	r2, [sp, #20]
 80055c4:	9a06      	ldr	r2, [sp, #24]
 80055c6:	1aed      	subs	r5, r5, r3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	9306      	str	r3, [sp, #24]
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	b1f3      	cbz	r3, 800560e <_dtoa_r+0x7b6>
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80a3 	beq.w	800571e <_dtoa_r+0x8c6>
 80055d8:	2e00      	cmp	r6, #0
 80055da:	dd10      	ble.n	80055fe <_dtoa_r+0x7a6>
 80055dc:	4639      	mov	r1, r7
 80055de:	4632      	mov	r2, r6
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fce1 	bl	8005fa8 <__pow5mult>
 80055e6:	4652      	mov	r2, sl
 80055e8:	4601      	mov	r1, r0
 80055ea:	4607      	mov	r7, r0
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 fc31 	bl	8005e54 <__multiply>
 80055f2:	4651      	mov	r1, sl
 80055f4:	4680      	mov	r8, r0
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 fb60 	bl	8005cbc <_Bfree>
 80055fc:	46c2      	mov	sl, r8
 80055fe:	9b08      	ldr	r3, [sp, #32]
 8005600:	1b9a      	subs	r2, r3, r6
 8005602:	d004      	beq.n	800560e <_dtoa_r+0x7b6>
 8005604:	4651      	mov	r1, sl
 8005606:	4620      	mov	r0, r4
 8005608:	f000 fcce 	bl	8005fa8 <__pow5mult>
 800560c:	4682      	mov	sl, r0
 800560e:	2101      	movs	r1, #1
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fc09 	bl	8005e28 <__i2b>
 8005616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	4606      	mov	r6, r0
 800561c:	f340 8081 	ble.w	8005722 <_dtoa_r+0x8ca>
 8005620:	461a      	mov	r2, r3
 8005622:	4601      	mov	r1, r0
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fcbf 	bl	8005fa8 <__pow5mult>
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	2b01      	cmp	r3, #1
 800562e:	4606      	mov	r6, r0
 8005630:	dd7a      	ble.n	8005728 <_dtoa_r+0x8d0>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	6933      	ldr	r3, [r6, #16]
 8005638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800563c:	6918      	ldr	r0, [r3, #16]
 800563e:	f000 fba5 	bl	8005d8c <__hi0bits>
 8005642:	f1c0 0020 	rsb	r0, r0, #32
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	4418      	add	r0, r3
 800564a:	f010 001f 	ands.w	r0, r0, #31
 800564e:	f000 8094 	beq.w	800577a <_dtoa_r+0x922>
 8005652:	f1c0 0320 	rsb	r3, r0, #32
 8005656:	2b04      	cmp	r3, #4
 8005658:	f340 8085 	ble.w	8005766 <_dtoa_r+0x90e>
 800565c:	9b05      	ldr	r3, [sp, #20]
 800565e:	f1c0 001c 	rsb	r0, r0, #28
 8005662:	4403      	add	r3, r0
 8005664:	9305      	str	r3, [sp, #20]
 8005666:	9b06      	ldr	r3, [sp, #24]
 8005668:	4403      	add	r3, r0
 800566a:	4405      	add	r5, r0
 800566c:	9306      	str	r3, [sp, #24]
 800566e:	9b05      	ldr	r3, [sp, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dd05      	ble.n	8005680 <_dtoa_r+0x828>
 8005674:	4651      	mov	r1, sl
 8005676:	461a      	mov	r2, r3
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fcef 	bl	800605c <__lshift>
 800567e:	4682      	mov	sl, r0
 8005680:	9b06      	ldr	r3, [sp, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dd05      	ble.n	8005692 <_dtoa_r+0x83a>
 8005686:	4631      	mov	r1, r6
 8005688:	461a      	mov	r2, r3
 800568a:	4620      	mov	r0, r4
 800568c:	f000 fce6 	bl	800605c <__lshift>
 8005690:	4606      	mov	r6, r0
 8005692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005694:	2b00      	cmp	r3, #0
 8005696:	d072      	beq.n	800577e <_dtoa_r+0x926>
 8005698:	4631      	mov	r1, r6
 800569a:	4650      	mov	r0, sl
 800569c:	f000 fd4a 	bl	8006134 <__mcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	da6c      	bge.n	800577e <_dtoa_r+0x926>
 80056a4:	2300      	movs	r3, #0
 80056a6:	4651      	mov	r1, sl
 80056a8:	220a      	movs	r2, #10
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 fb28 	bl	8005d00 <__multadd>
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056b6:	4682      	mov	sl, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 81b0 	beq.w	8005a1e <_dtoa_r+0xbc6>
 80056be:	2300      	movs	r3, #0
 80056c0:	4639      	mov	r1, r7
 80056c2:	220a      	movs	r2, #10
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fb1b 	bl	8005d00 <__multadd>
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	4607      	mov	r7, r0
 80056d0:	f300 8096 	bgt.w	8005800 <_dtoa_r+0x9a8>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	dc59      	bgt.n	800578e <_dtoa_r+0x936>
 80056da:	e091      	b.n	8005800 <_dtoa_r+0x9a8>
 80056dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056e2:	e758      	b.n	8005596 <_dtoa_r+0x73e>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	1e5e      	subs	r6, r3, #1
 80056e8:	9b08      	ldr	r3, [sp, #32]
 80056ea:	42b3      	cmp	r3, r6
 80056ec:	bfbf      	itttt	lt
 80056ee:	9b08      	ldrlt	r3, [sp, #32]
 80056f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80056f2:	9608      	strlt	r6, [sp, #32]
 80056f4:	1af3      	sublt	r3, r6, r3
 80056f6:	bfb4      	ite	lt
 80056f8:	18d2      	addlt	r2, r2, r3
 80056fa:	1b9e      	subge	r6, r3, r6
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	bfbc      	itt	lt
 8005700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005702:	2600      	movlt	r6, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfb7      	itett	lt
 8005708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800570c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005710:	1a9d      	sublt	r5, r3, r2
 8005712:	2300      	movlt	r3, #0
 8005714:	e741      	b.n	800559a <_dtoa_r+0x742>
 8005716:	9e08      	ldr	r6, [sp, #32]
 8005718:	9d05      	ldr	r5, [sp, #20]
 800571a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800571c:	e748      	b.n	80055b0 <_dtoa_r+0x758>
 800571e:	9a08      	ldr	r2, [sp, #32]
 8005720:	e770      	b.n	8005604 <_dtoa_r+0x7ac>
 8005722:	9b07      	ldr	r3, [sp, #28]
 8005724:	2b01      	cmp	r3, #1
 8005726:	dc19      	bgt.n	800575c <_dtoa_r+0x904>
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	b9bb      	cbnz	r3, 800575c <_dtoa_r+0x904>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005732:	b99b      	cbnz	r3, 800575c <_dtoa_r+0x904>
 8005734:	9b03      	ldr	r3, [sp, #12]
 8005736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800573a:	0d1b      	lsrs	r3, r3, #20
 800573c:	051b      	lsls	r3, r3, #20
 800573e:	b183      	cbz	r3, 8005762 <_dtoa_r+0x90a>
 8005740:	9b05      	ldr	r3, [sp, #20]
 8005742:	3301      	adds	r3, #1
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	3301      	adds	r3, #1
 800574a:	9306      	str	r3, [sp, #24]
 800574c:	f04f 0801 	mov.w	r8, #1
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f af6f 	bne.w	8005636 <_dtoa_r+0x7de>
 8005758:	2001      	movs	r0, #1
 800575a:	e774      	b.n	8005646 <_dtoa_r+0x7ee>
 800575c:	f04f 0800 	mov.w	r8, #0
 8005760:	e7f6      	b.n	8005750 <_dtoa_r+0x8f8>
 8005762:	4698      	mov	r8, r3
 8005764:	e7f4      	b.n	8005750 <_dtoa_r+0x8f8>
 8005766:	d082      	beq.n	800566e <_dtoa_r+0x816>
 8005768:	9a05      	ldr	r2, [sp, #20]
 800576a:	331c      	adds	r3, #28
 800576c:	441a      	add	r2, r3
 800576e:	9205      	str	r2, [sp, #20]
 8005770:	9a06      	ldr	r2, [sp, #24]
 8005772:	441a      	add	r2, r3
 8005774:	441d      	add	r5, r3
 8005776:	9206      	str	r2, [sp, #24]
 8005778:	e779      	b.n	800566e <_dtoa_r+0x816>
 800577a:	4603      	mov	r3, r0
 800577c:	e7f4      	b.n	8005768 <_dtoa_r+0x910>
 800577e:	9b04      	ldr	r3, [sp, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	dc37      	bgt.n	80057f4 <_dtoa_r+0x99c>
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	2b02      	cmp	r3, #2
 8005788:	dd34      	ble.n	80057f4 <_dtoa_r+0x99c>
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	b963      	cbnz	r3, 80057ac <_dtoa_r+0x954>
 8005792:	4631      	mov	r1, r6
 8005794:	2205      	movs	r2, #5
 8005796:	4620      	mov	r0, r4
 8005798:	f000 fab2 	bl	8005d00 <__multadd>
 800579c:	4601      	mov	r1, r0
 800579e:	4606      	mov	r6, r0
 80057a0:	4650      	mov	r0, sl
 80057a2:	f000 fcc7 	bl	8006134 <__mcmp>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	f73f adbb 	bgt.w	8005322 <_dtoa_r+0x4ca>
 80057ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ae:	9d00      	ldr	r5, [sp, #0]
 80057b0:	ea6f 0b03 	mvn.w	fp, r3
 80057b4:	f04f 0800 	mov.w	r8, #0
 80057b8:	4631      	mov	r1, r6
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 fa7e 	bl	8005cbc <_Bfree>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f43f aeab 	beq.w	800551c <_dtoa_r+0x6c4>
 80057c6:	f1b8 0f00 	cmp.w	r8, #0
 80057ca:	d005      	beq.n	80057d8 <_dtoa_r+0x980>
 80057cc:	45b8      	cmp	r8, r7
 80057ce:	d003      	beq.n	80057d8 <_dtoa_r+0x980>
 80057d0:	4641      	mov	r1, r8
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fa72 	bl	8005cbc <_Bfree>
 80057d8:	4639      	mov	r1, r7
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fa6e 	bl	8005cbc <_Bfree>
 80057e0:	e69c      	b.n	800551c <_dtoa_r+0x6c4>
 80057e2:	2600      	movs	r6, #0
 80057e4:	4637      	mov	r7, r6
 80057e6:	e7e1      	b.n	80057ac <_dtoa_r+0x954>
 80057e8:	46bb      	mov	fp, r7
 80057ea:	4637      	mov	r7, r6
 80057ec:	e599      	b.n	8005322 <_dtoa_r+0x4ca>
 80057ee:	bf00      	nop
 80057f0:	40240000 	.word	0x40240000
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80c8 	beq.w	800598c <_dtoa_r+0xb34>
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	2d00      	cmp	r5, #0
 8005802:	dd05      	ble.n	8005810 <_dtoa_r+0x9b8>
 8005804:	4639      	mov	r1, r7
 8005806:	462a      	mov	r2, r5
 8005808:	4620      	mov	r0, r4
 800580a:	f000 fc27 	bl	800605c <__lshift>
 800580e:	4607      	mov	r7, r0
 8005810:	f1b8 0f00 	cmp.w	r8, #0
 8005814:	d05b      	beq.n	80058ce <_dtoa_r+0xa76>
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fa0f 	bl	8005c3c <_Balloc>
 800581e:	4605      	mov	r5, r0
 8005820:	b928      	cbnz	r0, 800582e <_dtoa_r+0x9d6>
 8005822:	4b83      	ldr	r3, [pc, #524]	; (8005a30 <_dtoa_r+0xbd8>)
 8005824:	4602      	mov	r2, r0
 8005826:	f240 21ef 	movw	r1, #751	; 0x2ef
 800582a:	f7ff bb2e 	b.w	8004e8a <_dtoa_r+0x32>
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	3202      	adds	r2, #2
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	f107 010c 	add.w	r1, r7, #12
 8005838:	300c      	adds	r0, #12
 800583a:	f000 ffab 	bl	8006794 <memcpy>
 800583e:	2201      	movs	r2, #1
 8005840:	4629      	mov	r1, r5
 8005842:	4620      	mov	r0, r4
 8005844:	f000 fc0a 	bl	800605c <__lshift>
 8005848:	9b00      	ldr	r3, [sp, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005852:	4413      	add	r3, r2
 8005854:	9308      	str	r3, [sp, #32]
 8005856:	9b02      	ldr	r3, [sp, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	46b8      	mov	r8, r7
 800585e:	9306      	str	r3, [sp, #24]
 8005860:	4607      	mov	r7, r0
 8005862:	9b04      	ldr	r3, [sp, #16]
 8005864:	4631      	mov	r1, r6
 8005866:	3b01      	subs	r3, #1
 8005868:	4650      	mov	r0, sl
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	f7ff fa6b 	bl	8004d46 <quorem>
 8005870:	4641      	mov	r1, r8
 8005872:	9002      	str	r0, [sp, #8]
 8005874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005878:	4650      	mov	r0, sl
 800587a:	f000 fc5b 	bl	8006134 <__mcmp>
 800587e:	463a      	mov	r2, r7
 8005880:	9005      	str	r0, [sp, #20]
 8005882:	4631      	mov	r1, r6
 8005884:	4620      	mov	r0, r4
 8005886:	f000 fc71 	bl	800616c <__mdiff>
 800588a:	68c2      	ldr	r2, [r0, #12]
 800588c:	4605      	mov	r5, r0
 800588e:	bb02      	cbnz	r2, 80058d2 <_dtoa_r+0xa7a>
 8005890:	4601      	mov	r1, r0
 8005892:	4650      	mov	r0, sl
 8005894:	f000 fc4e 	bl	8006134 <__mcmp>
 8005898:	4602      	mov	r2, r0
 800589a:	4629      	mov	r1, r5
 800589c:	4620      	mov	r0, r4
 800589e:	9209      	str	r2, [sp, #36]	; 0x24
 80058a0:	f000 fa0c 	bl	8005cbc <_Bfree>
 80058a4:	9b07      	ldr	r3, [sp, #28]
 80058a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a8:	9d04      	ldr	r5, [sp, #16]
 80058aa:	ea43 0102 	orr.w	r1, r3, r2
 80058ae:	9b06      	ldr	r3, [sp, #24]
 80058b0:	4319      	orrs	r1, r3
 80058b2:	d110      	bne.n	80058d6 <_dtoa_r+0xa7e>
 80058b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058b8:	d029      	beq.n	800590e <_dtoa_r+0xab6>
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dd02      	ble.n	80058c6 <_dtoa_r+0xa6e>
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	f883 9000 	strb.w	r9, [r3]
 80058cc:	e774      	b.n	80057b8 <_dtoa_r+0x960>
 80058ce:	4638      	mov	r0, r7
 80058d0:	e7ba      	b.n	8005848 <_dtoa_r+0x9f0>
 80058d2:	2201      	movs	r2, #1
 80058d4:	e7e1      	b.n	800589a <_dtoa_r+0xa42>
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	db04      	blt.n	80058e6 <_dtoa_r+0xa8e>
 80058dc:	9907      	ldr	r1, [sp, #28]
 80058de:	430b      	orrs	r3, r1
 80058e0:	9906      	ldr	r1, [sp, #24]
 80058e2:	430b      	orrs	r3, r1
 80058e4:	d120      	bne.n	8005928 <_dtoa_r+0xad0>
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	dded      	ble.n	80058c6 <_dtoa_r+0xa6e>
 80058ea:	4651      	mov	r1, sl
 80058ec:	2201      	movs	r2, #1
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fbb4 	bl	800605c <__lshift>
 80058f4:	4631      	mov	r1, r6
 80058f6:	4682      	mov	sl, r0
 80058f8:	f000 fc1c 	bl	8006134 <__mcmp>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	dc03      	bgt.n	8005908 <_dtoa_r+0xab0>
 8005900:	d1e1      	bne.n	80058c6 <_dtoa_r+0xa6e>
 8005902:	f019 0f01 	tst.w	r9, #1
 8005906:	d0de      	beq.n	80058c6 <_dtoa_r+0xa6e>
 8005908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800590c:	d1d8      	bne.n	80058c0 <_dtoa_r+0xa68>
 800590e:	9a01      	ldr	r2, [sp, #4]
 8005910:	2339      	movs	r3, #57	; 0x39
 8005912:	7013      	strb	r3, [r2, #0]
 8005914:	462b      	mov	r3, r5
 8005916:	461d      	mov	r5, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800591e:	2a39      	cmp	r2, #57	; 0x39
 8005920:	d06c      	beq.n	80059fc <_dtoa_r+0xba4>
 8005922:	3201      	adds	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e747      	b.n	80057b8 <_dtoa_r+0x960>
 8005928:	2a00      	cmp	r2, #0
 800592a:	dd07      	ble.n	800593c <_dtoa_r+0xae4>
 800592c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005930:	d0ed      	beq.n	800590e <_dtoa_r+0xab6>
 8005932:	9a01      	ldr	r2, [sp, #4]
 8005934:	f109 0301 	add.w	r3, r9, #1
 8005938:	7013      	strb	r3, [r2, #0]
 800593a:	e73d      	b.n	80057b8 <_dtoa_r+0x960>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	9a08      	ldr	r2, [sp, #32]
 8005940:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005944:	4293      	cmp	r3, r2
 8005946:	d043      	beq.n	80059d0 <_dtoa_r+0xb78>
 8005948:	4651      	mov	r1, sl
 800594a:	2300      	movs	r3, #0
 800594c:	220a      	movs	r2, #10
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f9d6 	bl	8005d00 <__multadd>
 8005954:	45b8      	cmp	r8, r7
 8005956:	4682      	mov	sl, r0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	f04f 020a 	mov.w	r2, #10
 8005960:	4641      	mov	r1, r8
 8005962:	4620      	mov	r0, r4
 8005964:	d107      	bne.n	8005976 <_dtoa_r+0xb1e>
 8005966:	f000 f9cb 	bl	8005d00 <__multadd>
 800596a:	4680      	mov	r8, r0
 800596c:	4607      	mov	r7, r0
 800596e:	9b04      	ldr	r3, [sp, #16]
 8005970:	3301      	adds	r3, #1
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	e775      	b.n	8005862 <_dtoa_r+0xa0a>
 8005976:	f000 f9c3 	bl	8005d00 <__multadd>
 800597a:	4639      	mov	r1, r7
 800597c:	4680      	mov	r8, r0
 800597e:	2300      	movs	r3, #0
 8005980:	220a      	movs	r2, #10
 8005982:	4620      	mov	r0, r4
 8005984:	f000 f9bc 	bl	8005d00 <__multadd>
 8005988:	4607      	mov	r7, r0
 800598a:	e7f0      	b.n	800596e <_dtoa_r+0xb16>
 800598c:	9b04      	ldr	r3, [sp, #16]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	9d00      	ldr	r5, [sp, #0]
 8005992:	4631      	mov	r1, r6
 8005994:	4650      	mov	r0, sl
 8005996:	f7ff f9d6 	bl	8004d46 <quorem>
 800599a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800599e:	9b00      	ldr	r3, [sp, #0]
 80059a0:	f805 9b01 	strb.w	r9, [r5], #1
 80059a4:	1aea      	subs	r2, r5, r3
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	dd07      	ble.n	80059bc <_dtoa_r+0xb64>
 80059ac:	4651      	mov	r1, sl
 80059ae:	2300      	movs	r3, #0
 80059b0:	220a      	movs	r2, #10
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f9a4 	bl	8005d00 <__multadd>
 80059b8:	4682      	mov	sl, r0
 80059ba:	e7ea      	b.n	8005992 <_dtoa_r+0xb3a>
 80059bc:	9b01      	ldr	r3, [sp, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfc8      	it	gt
 80059c2:	461d      	movgt	r5, r3
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	bfd8      	it	le
 80059c8:	2501      	movle	r5, #1
 80059ca:	441d      	add	r5, r3
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	4651      	mov	r1, sl
 80059d2:	2201      	movs	r2, #1
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fb41 	bl	800605c <__lshift>
 80059da:	4631      	mov	r1, r6
 80059dc:	4682      	mov	sl, r0
 80059de:	f000 fba9 	bl	8006134 <__mcmp>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	dc96      	bgt.n	8005914 <_dtoa_r+0xabc>
 80059e6:	d102      	bne.n	80059ee <_dtoa_r+0xb96>
 80059e8:	f019 0f01 	tst.w	r9, #1
 80059ec:	d192      	bne.n	8005914 <_dtoa_r+0xabc>
 80059ee:	462b      	mov	r3, r5
 80059f0:	461d      	mov	r5, r3
 80059f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059f6:	2a30      	cmp	r2, #48	; 0x30
 80059f8:	d0fa      	beq.n	80059f0 <_dtoa_r+0xb98>
 80059fa:	e6dd      	b.n	80057b8 <_dtoa_r+0x960>
 80059fc:	9a00      	ldr	r2, [sp, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d189      	bne.n	8005916 <_dtoa_r+0xabe>
 8005a02:	f10b 0b01 	add.w	fp, fp, #1
 8005a06:	2331      	movs	r3, #49	; 0x31
 8005a08:	e796      	b.n	8005938 <_dtoa_r+0xae0>
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <_dtoa_r+0xbdc>)
 8005a0c:	f7ff ba99 	b.w	8004f42 <_dtoa_r+0xea>
 8005a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f47f aa6d 	bne.w	8004ef2 <_dtoa_r+0x9a>
 8005a18:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <_dtoa_r+0xbe0>)
 8005a1a:	f7ff ba92 	b.w	8004f42 <_dtoa_r+0xea>
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dcb5      	bgt.n	8005990 <_dtoa_r+0xb38>
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	f73f aeb1 	bgt.w	800578e <_dtoa_r+0x936>
 8005a2c:	e7b0      	b.n	8005990 <_dtoa_r+0xb38>
 8005a2e:	bf00      	nop
 8005a30:	08006fbc 	.word	0x08006fbc
 8005a34:	08006f1c 	.word	0x08006f1c
 8005a38:	08006f40 	.word	0x08006f40

08005a3c <_free_r>:
 8005a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	d044      	beq.n	8005acc <_free_r+0x90>
 8005a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a46:	9001      	str	r0, [sp, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a4e:	bfb8      	it	lt
 8005a50:	18e4      	addlt	r4, r4, r3
 8005a52:	f000 f8e7 	bl	8005c24 <__malloc_lock>
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <_free_r+0x94>)
 8005a58:	9801      	ldr	r0, [sp, #4]
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x30>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	b003      	add	sp, #12
 8005a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a68:	f000 b8e2 	b.w	8005c30 <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x46>
 8005a70:	6825      	ldr	r5, [r4, #0]
 8005a72:	1961      	adds	r1, r4, r5
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1949      	addeq	r1, r1, r5
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x22>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x50>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x46>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1855      	adds	r5, r2, r1
 8005a90:	42a5      	cmp	r5, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x70>
 8005a94:	6824      	ldr	r4, [r4, #0]
 8005a96:	4421      	add	r1, r4
 8005a98:	1854      	adds	r4, r2, r1
 8005a9a:	42a3      	cmp	r3, r4
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x26>
 8005aa0:	681c      	ldr	r4, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	6053      	str	r3, [r2, #4]
 8005aa6:	440c      	add	r4, r1
 8005aa8:	6014      	str	r4, [r2, #0]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x26>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x78>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	6003      	str	r3, [r0, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x26>
 8005ab4:	6825      	ldr	r5, [r4, #0]
 8005ab6:	1961      	adds	r1, r4, r5
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf04      	itt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	6063      	str	r3, [r4, #4]
 8005ac2:	bf04      	itt	eq
 8005ac4:	1949      	addeq	r1, r1, r5
 8005ac6:	6021      	streq	r1, [r4, #0]
 8005ac8:	6054      	str	r4, [r2, #4]
 8005aca:	e7ca      	b.n	8005a62 <_free_r+0x26>
 8005acc:	b003      	add	sp, #12
 8005ace:	bd30      	pop	{r4, r5, pc}
 8005ad0:	20000410 	.word	0x20000410

08005ad4 <malloc>:
 8005ad4:	4b02      	ldr	r3, [pc, #8]	; (8005ae0 <malloc+0xc>)
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	f000 b823 	b.w	8005b24 <_malloc_r>
 8005ade:	bf00      	nop
 8005ae0:	20000064 	.word	0x20000064

08005ae4 <sbrk_aligned>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4e0e      	ldr	r6, [pc, #56]	; (8005b20 <sbrk_aligned+0x3c>)
 8005ae8:	460c      	mov	r4, r1
 8005aea:	6831      	ldr	r1, [r6, #0]
 8005aec:	4605      	mov	r5, r0
 8005aee:	b911      	cbnz	r1, 8005af6 <sbrk_aligned+0x12>
 8005af0:	f000 fe40 	bl	8006774 <_sbrk_r>
 8005af4:	6030      	str	r0, [r6, #0]
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fe3b 	bl	8006774 <_sbrk_r>
 8005afe:	1c43      	adds	r3, r0, #1
 8005b00:	d00a      	beq.n	8005b18 <sbrk_aligned+0x34>
 8005b02:	1cc4      	adds	r4, r0, #3
 8005b04:	f024 0403 	bic.w	r4, r4, #3
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d007      	beq.n	8005b1c <sbrk_aligned+0x38>
 8005b0c:	1a21      	subs	r1, r4, r0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fe30 	bl	8006774 <_sbrk_r>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d101      	bne.n	8005b1c <sbrk_aligned+0x38>
 8005b18:	f04f 34ff 	mov.w	r4, #4294967295
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	20000414 	.word	0x20000414

08005b24 <_malloc_r>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	1ccd      	adds	r5, r1, #3
 8005b2a:	f025 0503 	bic.w	r5, r5, #3
 8005b2e:	3508      	adds	r5, #8
 8005b30:	2d0c      	cmp	r5, #12
 8005b32:	bf38      	it	cc
 8005b34:	250c      	movcc	r5, #12
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	4607      	mov	r7, r0
 8005b3a:	db01      	blt.n	8005b40 <_malloc_r+0x1c>
 8005b3c:	42a9      	cmp	r1, r5
 8005b3e:	d905      	bls.n	8005b4c <_malloc_r+0x28>
 8005b40:	230c      	movs	r3, #12
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	2600      	movs	r6, #0
 8005b46:	4630      	mov	r0, r6
 8005b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c20 <_malloc_r+0xfc>
 8005b50:	f000 f868 	bl	8005c24 <__malloc_lock>
 8005b54:	f8d8 3000 	ldr.w	r3, [r8]
 8005b58:	461c      	mov	r4, r3
 8005b5a:	bb5c      	cbnz	r4, 8005bb4 <_malloc_r+0x90>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f7ff ffc0 	bl	8005ae4 <sbrk_aligned>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	4604      	mov	r4, r0
 8005b68:	d155      	bne.n	8005c16 <_malloc_r+0xf2>
 8005b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8005b6e:	4626      	mov	r6, r4
 8005b70:	2e00      	cmp	r6, #0
 8005b72:	d145      	bne.n	8005c00 <_malloc_r+0xdc>
 8005b74:	2c00      	cmp	r4, #0
 8005b76:	d048      	beq.n	8005c0a <_malloc_r+0xe6>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	eb04 0903 	add.w	r9, r4, r3
 8005b82:	f000 fdf7 	bl	8006774 <_sbrk_r>
 8005b86:	4581      	cmp	r9, r0
 8005b88:	d13f      	bne.n	8005c0a <_malloc_r+0xe6>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	1a6d      	subs	r5, r5, r1
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ffa7 	bl	8005ae4 <sbrk_aligned>
 8005b96:	3001      	adds	r0, #1
 8005b98:	d037      	beq.n	8005c0a <_malloc_r+0xe6>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	442b      	add	r3, r5
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d038      	beq.n	8005c1a <_malloc_r+0xf6>
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	42a2      	cmp	r2, r4
 8005bac:	d12b      	bne.n	8005c06 <_malloc_r+0xe2>
 8005bae:	2200      	movs	r2, #0
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	e00f      	b.n	8005bd4 <_malloc_r+0xb0>
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	1b52      	subs	r2, r2, r5
 8005bb8:	d41f      	bmi.n	8005bfa <_malloc_r+0xd6>
 8005bba:	2a0b      	cmp	r2, #11
 8005bbc:	d917      	bls.n	8005bee <_malloc_r+0xca>
 8005bbe:	1961      	adds	r1, r4, r5
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	6025      	str	r5, [r4, #0]
 8005bc4:	bf18      	it	ne
 8005bc6:	6059      	strne	r1, [r3, #4]
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	bf08      	it	eq
 8005bcc:	f8c8 1000 	streq.w	r1, [r8]
 8005bd0:	5162      	str	r2, [r4, r5]
 8005bd2:	604b      	str	r3, [r1, #4]
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	f104 060b 	add.w	r6, r4, #11
 8005bda:	f000 f829 	bl	8005c30 <__malloc_unlock>
 8005bde:	f026 0607 	bic.w	r6, r6, #7
 8005be2:	1d23      	adds	r3, r4, #4
 8005be4:	1af2      	subs	r2, r6, r3
 8005be6:	d0ae      	beq.n	8005b46 <_malloc_r+0x22>
 8005be8:	1b9b      	subs	r3, r3, r6
 8005bea:	50a3      	str	r3, [r4, r2]
 8005bec:	e7ab      	b.n	8005b46 <_malloc_r+0x22>
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6862      	ldr	r2, [r4, #4]
 8005bf2:	d1dd      	bne.n	8005bb0 <_malloc_r+0x8c>
 8005bf4:	f8c8 2000 	str.w	r2, [r8]
 8005bf8:	e7ec      	b.n	8005bd4 <_malloc_r+0xb0>
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	6864      	ldr	r4, [r4, #4]
 8005bfe:	e7ac      	b.n	8005b5a <_malloc_r+0x36>
 8005c00:	4634      	mov	r4, r6
 8005c02:	6876      	ldr	r6, [r6, #4]
 8005c04:	e7b4      	b.n	8005b70 <_malloc_r+0x4c>
 8005c06:	4613      	mov	r3, r2
 8005c08:	e7cc      	b.n	8005ba4 <_malloc_r+0x80>
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4638      	mov	r0, r7
 8005c10:	f000 f80e 	bl	8005c30 <__malloc_unlock>
 8005c14:	e797      	b.n	8005b46 <_malloc_r+0x22>
 8005c16:	6025      	str	r5, [r4, #0]
 8005c18:	e7dc      	b.n	8005bd4 <_malloc_r+0xb0>
 8005c1a:	605b      	str	r3, [r3, #4]
 8005c1c:	deff      	udf	#255	; 0xff
 8005c1e:	bf00      	nop
 8005c20:	20000410 	.word	0x20000410

08005c24 <__malloc_lock>:
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <__malloc_lock+0x8>)
 8005c26:	f7ff b88c 	b.w	8004d42 <__retarget_lock_acquire_recursive>
 8005c2a:	bf00      	nop
 8005c2c:	2000040c 	.word	0x2000040c

08005c30 <__malloc_unlock>:
 8005c30:	4801      	ldr	r0, [pc, #4]	; (8005c38 <__malloc_unlock+0x8>)
 8005c32:	f7ff b887 	b.w	8004d44 <__retarget_lock_release_recursive>
 8005c36:	bf00      	nop
 8005c38:	2000040c 	.word	0x2000040c

08005c3c <_Balloc>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	69c6      	ldr	r6, [r0, #28]
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	b976      	cbnz	r6, 8005c64 <_Balloc+0x28>
 8005c46:	2010      	movs	r0, #16
 8005c48:	f7ff ff44 	bl	8005ad4 <malloc>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	61e0      	str	r0, [r4, #28]
 8005c50:	b920      	cbnz	r0, 8005c5c <_Balloc+0x20>
 8005c52:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <_Balloc+0x78>)
 8005c54:	4818      	ldr	r0, [pc, #96]	; (8005cb8 <_Balloc+0x7c>)
 8005c56:	216b      	movs	r1, #107	; 0x6b
 8005c58:	f000 fdaa 	bl	80067b0 <__assert_func>
 8005c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c60:	6006      	str	r6, [r0, #0]
 8005c62:	60c6      	str	r6, [r0, #12]
 8005c64:	69e6      	ldr	r6, [r4, #28]
 8005c66:	68f3      	ldr	r3, [r6, #12]
 8005c68:	b183      	cbz	r3, 8005c8c <_Balloc+0x50>
 8005c6a:	69e3      	ldr	r3, [r4, #28]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c72:	b9b8      	cbnz	r0, 8005ca4 <_Balloc+0x68>
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f605 	lsl.w	r6, r1, r5
 8005c7a:	1d72      	adds	r2, r6, #5
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 fdb4 	bl	80067ec <_calloc_r>
 8005c84:	b160      	cbz	r0, 8005ca0 <_Balloc+0x64>
 8005c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c8a:	e00e      	b.n	8005caa <_Balloc+0x6e>
 8005c8c:	2221      	movs	r2, #33	; 0x21
 8005c8e:	2104      	movs	r1, #4
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fdab 	bl	80067ec <_calloc_r>
 8005c96:	69e3      	ldr	r3, [r4, #28]
 8005c98:	60f0      	str	r0, [r6, #12]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e4      	bne.n	8005c6a <_Balloc+0x2e>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	6802      	ldr	r2, [r0, #0]
 8005ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005caa:	2300      	movs	r3, #0
 8005cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cb0:	e7f7      	b.n	8005ca2 <_Balloc+0x66>
 8005cb2:	bf00      	nop
 8005cb4:	08006f4d 	.word	0x08006f4d
 8005cb8:	08006fcd 	.word	0x08006fcd

08005cbc <_Bfree>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	69c6      	ldr	r6, [r0, #28]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	b976      	cbnz	r6, 8005ce4 <_Bfree+0x28>
 8005cc6:	2010      	movs	r0, #16
 8005cc8:	f7ff ff04 	bl	8005ad4 <malloc>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	61e8      	str	r0, [r5, #28]
 8005cd0:	b920      	cbnz	r0, 8005cdc <_Bfree+0x20>
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <_Bfree+0x3c>)
 8005cd4:	4809      	ldr	r0, [pc, #36]	; (8005cfc <_Bfree+0x40>)
 8005cd6:	218f      	movs	r1, #143	; 0x8f
 8005cd8:	f000 fd6a 	bl	80067b0 <__assert_func>
 8005cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce0:	6006      	str	r6, [r0, #0]
 8005ce2:	60c6      	str	r6, [r0, #12]
 8005ce4:	b13c      	cbz	r4, 8005cf6 <_Bfree+0x3a>
 8005ce6:	69eb      	ldr	r3, [r5, #28]
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cf0:	6021      	str	r1, [r4, #0]
 8005cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	08006f4d 	.word	0x08006f4d
 8005cfc:	08006fcd 	.word	0x08006fcd

08005d00 <__multadd>:
 8005d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	690d      	ldr	r5, [r1, #16]
 8005d06:	4607      	mov	r7, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	461e      	mov	r6, r3
 8005d0c:	f101 0c14 	add.w	ip, r1, #20
 8005d10:	2000      	movs	r0, #0
 8005d12:	f8dc 3000 	ldr.w	r3, [ip]
 8005d16:	b299      	uxth	r1, r3
 8005d18:	fb02 6101 	mla	r1, r2, r1, r6
 8005d1c:	0c1e      	lsrs	r6, r3, #16
 8005d1e:	0c0b      	lsrs	r3, r1, #16
 8005d20:	fb02 3306 	mla	r3, r2, r6, r3
 8005d24:	b289      	uxth	r1, r1
 8005d26:	3001      	adds	r0, #1
 8005d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d2c:	4285      	cmp	r5, r0
 8005d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8005d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d36:	dcec      	bgt.n	8005d12 <__multadd+0x12>
 8005d38:	b30e      	cbz	r6, 8005d7e <__multadd+0x7e>
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	dc19      	bgt.n	8005d74 <__multadd+0x74>
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4638      	mov	r0, r7
 8005d44:	3101      	adds	r1, #1
 8005d46:	f7ff ff79 	bl	8005c3c <_Balloc>
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	b928      	cbnz	r0, 8005d5a <__multadd+0x5a>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <__multadd+0x84>)
 8005d52:	480d      	ldr	r0, [pc, #52]	; (8005d88 <__multadd+0x88>)
 8005d54:	21ba      	movs	r1, #186	; 0xba
 8005d56:	f000 fd2b 	bl	80067b0 <__assert_func>
 8005d5a:	6922      	ldr	r2, [r4, #16]
 8005d5c:	3202      	adds	r2, #2
 8005d5e:	f104 010c 	add.w	r1, r4, #12
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	300c      	adds	r0, #12
 8005d66:	f000 fd15 	bl	8006794 <memcpy>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff ffa5 	bl	8005cbc <_Bfree>
 8005d72:	4644      	mov	r4, r8
 8005d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d78:	3501      	adds	r5, #1
 8005d7a:	615e      	str	r6, [r3, #20]
 8005d7c:	6125      	str	r5, [r4, #16]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d84:	08006fbc 	.word	0x08006fbc
 8005d88:	08006fcd 	.word	0x08006fcd

08005d8c <__hi0bits>:
 8005d8c:	0c03      	lsrs	r3, r0, #16
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	b9d3      	cbnz	r3, 8005dc8 <__hi0bits+0x3c>
 8005d92:	0400      	lsls	r0, r0, #16
 8005d94:	2310      	movs	r3, #16
 8005d96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d9a:	bf04      	itt	eq
 8005d9c:	0200      	lsleq	r0, r0, #8
 8005d9e:	3308      	addeq	r3, #8
 8005da0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005da4:	bf04      	itt	eq
 8005da6:	0100      	lsleq	r0, r0, #4
 8005da8:	3304      	addeq	r3, #4
 8005daa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005dae:	bf04      	itt	eq
 8005db0:	0080      	lsleq	r0, r0, #2
 8005db2:	3302      	addeq	r3, #2
 8005db4:	2800      	cmp	r0, #0
 8005db6:	db05      	blt.n	8005dc4 <__hi0bits+0x38>
 8005db8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dbc:	f103 0301 	add.w	r3, r3, #1
 8005dc0:	bf08      	it	eq
 8005dc2:	2320      	moveq	r3, #32
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4770      	bx	lr
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e7e4      	b.n	8005d96 <__hi0bits+0xa>

08005dcc <__lo0bits>:
 8005dcc:	6803      	ldr	r3, [r0, #0]
 8005dce:	f013 0207 	ands.w	r2, r3, #7
 8005dd2:	d00c      	beq.n	8005dee <__lo0bits+0x22>
 8005dd4:	07d9      	lsls	r1, r3, #31
 8005dd6:	d422      	bmi.n	8005e1e <__lo0bits+0x52>
 8005dd8:	079a      	lsls	r2, r3, #30
 8005dda:	bf49      	itett	mi
 8005ddc:	085b      	lsrmi	r3, r3, #1
 8005dde:	089b      	lsrpl	r3, r3, #2
 8005de0:	6003      	strmi	r3, [r0, #0]
 8005de2:	2201      	movmi	r2, #1
 8005de4:	bf5c      	itt	pl
 8005de6:	6003      	strpl	r3, [r0, #0]
 8005de8:	2202      	movpl	r2, #2
 8005dea:	4610      	mov	r0, r2
 8005dec:	4770      	bx	lr
 8005dee:	b299      	uxth	r1, r3
 8005df0:	b909      	cbnz	r1, 8005df6 <__lo0bits+0x2a>
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	2210      	movs	r2, #16
 8005df6:	b2d9      	uxtb	r1, r3
 8005df8:	b909      	cbnz	r1, 8005dfe <__lo0bits+0x32>
 8005dfa:	3208      	adds	r2, #8
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	0719      	lsls	r1, r3, #28
 8005e00:	bf04      	itt	eq
 8005e02:	091b      	lsreq	r3, r3, #4
 8005e04:	3204      	addeq	r2, #4
 8005e06:	0799      	lsls	r1, r3, #30
 8005e08:	bf04      	itt	eq
 8005e0a:	089b      	lsreq	r3, r3, #2
 8005e0c:	3202      	addeq	r2, #2
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d403      	bmi.n	8005e1a <__lo0bits+0x4e>
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f102 0201 	add.w	r2, r2, #1
 8005e18:	d003      	beq.n	8005e22 <__lo0bits+0x56>
 8005e1a:	6003      	str	r3, [r0, #0]
 8005e1c:	e7e5      	b.n	8005dea <__lo0bits+0x1e>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	e7e3      	b.n	8005dea <__lo0bits+0x1e>
 8005e22:	2220      	movs	r2, #32
 8005e24:	e7e1      	b.n	8005dea <__lo0bits+0x1e>
	...

08005e28 <__i2b>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	f7ff ff05 	bl	8005c3c <_Balloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	b928      	cbnz	r0, 8005e42 <__i2b+0x1a>
 8005e36:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <__i2b+0x24>)
 8005e38:	4805      	ldr	r0, [pc, #20]	; (8005e50 <__i2b+0x28>)
 8005e3a:	f240 1145 	movw	r1, #325	; 0x145
 8005e3e:	f000 fcb7 	bl	80067b0 <__assert_func>
 8005e42:	2301      	movs	r3, #1
 8005e44:	6144      	str	r4, [r0, #20]
 8005e46:	6103      	str	r3, [r0, #16]
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08006fbc 	.word	0x08006fbc
 8005e50:	08006fcd 	.word	0x08006fcd

08005e54 <__multiply>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	4691      	mov	r9, r2
 8005e5a:	690a      	ldr	r2, [r1, #16]
 8005e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	bfb8      	it	lt
 8005e64:	460b      	movlt	r3, r1
 8005e66:	460c      	mov	r4, r1
 8005e68:	bfbc      	itt	lt
 8005e6a:	464c      	movlt	r4, r9
 8005e6c:	4699      	movlt	r9, r3
 8005e6e:	6927      	ldr	r7, [r4, #16]
 8005e70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e74:	68a3      	ldr	r3, [r4, #8]
 8005e76:	6861      	ldr	r1, [r4, #4]
 8005e78:	eb07 060a 	add.w	r6, r7, sl
 8005e7c:	42b3      	cmp	r3, r6
 8005e7e:	b085      	sub	sp, #20
 8005e80:	bfb8      	it	lt
 8005e82:	3101      	addlt	r1, #1
 8005e84:	f7ff feda 	bl	8005c3c <_Balloc>
 8005e88:	b930      	cbnz	r0, 8005e98 <__multiply+0x44>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <__multiply+0x14c>)
 8005e8e:	4845      	ldr	r0, [pc, #276]	; (8005fa4 <__multiply+0x150>)
 8005e90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005e94:	f000 fc8c 	bl	80067b0 <__assert_func>
 8005e98:	f100 0514 	add.w	r5, r0, #20
 8005e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4543      	cmp	r3, r8
 8005ea6:	d321      	bcc.n	8005eec <__multiply+0x98>
 8005ea8:	f104 0314 	add.w	r3, r4, #20
 8005eac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005eb0:	f109 0314 	add.w	r3, r9, #20
 8005eb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005eb8:	9202      	str	r2, [sp, #8]
 8005eba:	1b3a      	subs	r2, r7, r4
 8005ebc:	3a15      	subs	r2, #21
 8005ebe:	f022 0203 	bic.w	r2, r2, #3
 8005ec2:	3204      	adds	r2, #4
 8005ec4:	f104 0115 	add.w	r1, r4, #21
 8005ec8:	428f      	cmp	r7, r1
 8005eca:	bf38      	it	cc
 8005ecc:	2204      	movcc	r2, #4
 8005ece:	9201      	str	r2, [sp, #4]
 8005ed0:	9a02      	ldr	r2, [sp, #8]
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d80c      	bhi.n	8005ef2 <__multiply+0x9e>
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	dd03      	ble.n	8005ee4 <__multiply+0x90>
 8005edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05b      	beq.n	8005f9c <__multiply+0x148>
 8005ee4:	6106      	str	r6, [r0, #16]
 8005ee6:	b005      	add	sp, #20
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	f843 2b04 	str.w	r2, [r3], #4
 8005ef0:	e7d8      	b.n	8005ea4 <__multiply+0x50>
 8005ef2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ef6:	f1ba 0f00 	cmp.w	sl, #0
 8005efa:	d024      	beq.n	8005f46 <__multiply+0xf2>
 8005efc:	f104 0e14 	add.w	lr, r4, #20
 8005f00:	46a9      	mov	r9, r5
 8005f02:	f04f 0c00 	mov.w	ip, #0
 8005f06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f0a:	f8d9 1000 	ldr.w	r1, [r9]
 8005f0e:	fa1f fb82 	uxth.w	fp, r2
 8005f12:	b289      	uxth	r1, r1
 8005f14:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f20:	4461      	add	r1, ip
 8005f22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f26:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f2e:	b289      	uxth	r1, r1
 8005f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f34:	4577      	cmp	r7, lr
 8005f36:	f849 1b04 	str.w	r1, [r9], #4
 8005f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f3e:	d8e2      	bhi.n	8005f06 <__multiply+0xb2>
 8005f40:	9a01      	ldr	r2, [sp, #4]
 8005f42:	f845 c002 	str.w	ip, [r5, r2]
 8005f46:	9a03      	ldr	r2, [sp, #12]
 8005f48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	f1b9 0f00 	cmp.w	r9, #0
 8005f52:	d021      	beq.n	8005f98 <__multiply+0x144>
 8005f54:	6829      	ldr	r1, [r5, #0]
 8005f56:	f104 0c14 	add.w	ip, r4, #20
 8005f5a:	46ae      	mov	lr, r5
 8005f5c:	f04f 0a00 	mov.w	sl, #0
 8005f60:	f8bc b000 	ldrh.w	fp, [ip]
 8005f64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f68:	fb09 220b 	mla	r2, r9, fp, r2
 8005f6c:	4452      	add	r2, sl
 8005f6e:	b289      	uxth	r1, r1
 8005f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f74:	f84e 1b04 	str.w	r1, [lr], #4
 8005f78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f80:	f8be 1000 	ldrh.w	r1, [lr]
 8005f84:	fb09 110a 	mla	r1, r9, sl, r1
 8005f88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005f8c:	4567      	cmp	r7, ip
 8005f8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f92:	d8e5      	bhi.n	8005f60 <__multiply+0x10c>
 8005f94:	9a01      	ldr	r2, [sp, #4]
 8005f96:	50a9      	str	r1, [r5, r2]
 8005f98:	3504      	adds	r5, #4
 8005f9a:	e799      	b.n	8005ed0 <__multiply+0x7c>
 8005f9c:	3e01      	subs	r6, #1
 8005f9e:	e79b      	b.n	8005ed8 <__multiply+0x84>
 8005fa0:	08006fbc 	.word	0x08006fbc
 8005fa4:	08006fcd 	.word	0x08006fcd

08005fa8 <__pow5mult>:
 8005fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fac:	4615      	mov	r5, r2
 8005fae:	f012 0203 	ands.w	r2, r2, #3
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	d007      	beq.n	8005fc8 <__pow5mult+0x20>
 8005fb8:	4c25      	ldr	r4, [pc, #148]	; (8006050 <__pow5mult+0xa8>)
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fc2:	f7ff fe9d 	bl	8005d00 <__multadd>
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	10ad      	asrs	r5, r5, #2
 8005fca:	d03d      	beq.n	8006048 <__pow5mult+0xa0>
 8005fcc:	69f4      	ldr	r4, [r6, #28]
 8005fce:	b97c      	cbnz	r4, 8005ff0 <__pow5mult+0x48>
 8005fd0:	2010      	movs	r0, #16
 8005fd2:	f7ff fd7f 	bl	8005ad4 <malloc>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	61f0      	str	r0, [r6, #28]
 8005fda:	b928      	cbnz	r0, 8005fe8 <__pow5mult+0x40>
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <__pow5mult+0xac>)
 8005fde:	481e      	ldr	r0, [pc, #120]	; (8006058 <__pow5mult+0xb0>)
 8005fe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005fe4:	f000 fbe4 	bl	80067b0 <__assert_func>
 8005fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fec:	6004      	str	r4, [r0, #0]
 8005fee:	60c4      	str	r4, [r0, #12]
 8005ff0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ff8:	b94c      	cbnz	r4, 800600e <__pow5mult+0x66>
 8005ffa:	f240 2171 	movw	r1, #625	; 0x271
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7ff ff12 	bl	8005e28 <__i2b>
 8006004:	2300      	movs	r3, #0
 8006006:	f8c8 0008 	str.w	r0, [r8, #8]
 800600a:	4604      	mov	r4, r0
 800600c:	6003      	str	r3, [r0, #0]
 800600e:	f04f 0900 	mov.w	r9, #0
 8006012:	07eb      	lsls	r3, r5, #31
 8006014:	d50a      	bpl.n	800602c <__pow5mult+0x84>
 8006016:	4639      	mov	r1, r7
 8006018:	4622      	mov	r2, r4
 800601a:	4630      	mov	r0, r6
 800601c:	f7ff ff1a 	bl	8005e54 <__multiply>
 8006020:	4639      	mov	r1, r7
 8006022:	4680      	mov	r8, r0
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff fe49 	bl	8005cbc <_Bfree>
 800602a:	4647      	mov	r7, r8
 800602c:	106d      	asrs	r5, r5, #1
 800602e:	d00b      	beq.n	8006048 <__pow5mult+0xa0>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	b938      	cbnz	r0, 8006044 <__pow5mult+0x9c>
 8006034:	4622      	mov	r2, r4
 8006036:	4621      	mov	r1, r4
 8006038:	4630      	mov	r0, r6
 800603a:	f7ff ff0b 	bl	8005e54 <__multiply>
 800603e:	6020      	str	r0, [r4, #0]
 8006040:	f8c0 9000 	str.w	r9, [r0]
 8006044:	4604      	mov	r4, r0
 8006046:	e7e4      	b.n	8006012 <__pow5mult+0x6a>
 8006048:	4638      	mov	r0, r7
 800604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604e:	bf00      	nop
 8006050:	08007118 	.word	0x08007118
 8006054:	08006f4d 	.word	0x08006f4d
 8006058:	08006fcd 	.word	0x08006fcd

0800605c <__lshift>:
 800605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006060:	460c      	mov	r4, r1
 8006062:	6849      	ldr	r1, [r1, #4]
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	4607      	mov	r7, r0
 800606e:	4691      	mov	r9, r2
 8006070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006074:	f108 0601 	add.w	r6, r8, #1
 8006078:	42b3      	cmp	r3, r6
 800607a:	db0b      	blt.n	8006094 <__lshift+0x38>
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff fddd 	bl	8005c3c <_Balloc>
 8006082:	4605      	mov	r5, r0
 8006084:	b948      	cbnz	r0, 800609a <__lshift+0x3e>
 8006086:	4602      	mov	r2, r0
 8006088:	4b28      	ldr	r3, [pc, #160]	; (800612c <__lshift+0xd0>)
 800608a:	4829      	ldr	r0, [pc, #164]	; (8006130 <__lshift+0xd4>)
 800608c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006090:	f000 fb8e 	bl	80067b0 <__assert_func>
 8006094:	3101      	adds	r1, #1
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	e7ee      	b.n	8006078 <__lshift+0x1c>
 800609a:	2300      	movs	r3, #0
 800609c:	f100 0114 	add.w	r1, r0, #20
 80060a0:	f100 0210 	add.w	r2, r0, #16
 80060a4:	4618      	mov	r0, r3
 80060a6:	4553      	cmp	r3, sl
 80060a8:	db33      	blt.n	8006112 <__lshift+0xb6>
 80060aa:	6920      	ldr	r0, [r4, #16]
 80060ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060b0:	f104 0314 	add.w	r3, r4, #20
 80060b4:	f019 091f 	ands.w	r9, r9, #31
 80060b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060c0:	d02b      	beq.n	800611a <__lshift+0xbe>
 80060c2:	f1c9 0e20 	rsb	lr, r9, #32
 80060c6:	468a      	mov	sl, r1
 80060c8:	2200      	movs	r2, #0
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	fa00 f009 	lsl.w	r0, r0, r9
 80060d0:	4310      	orrs	r0, r2
 80060d2:	f84a 0b04 	str.w	r0, [sl], #4
 80060d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060da:	459c      	cmp	ip, r3
 80060dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80060e0:	d8f3      	bhi.n	80060ca <__lshift+0x6e>
 80060e2:	ebac 0304 	sub.w	r3, ip, r4
 80060e6:	3b15      	subs	r3, #21
 80060e8:	f023 0303 	bic.w	r3, r3, #3
 80060ec:	3304      	adds	r3, #4
 80060ee:	f104 0015 	add.w	r0, r4, #21
 80060f2:	4584      	cmp	ip, r0
 80060f4:	bf38      	it	cc
 80060f6:	2304      	movcc	r3, #4
 80060f8:	50ca      	str	r2, [r1, r3]
 80060fa:	b10a      	cbz	r2, 8006100 <__lshift+0xa4>
 80060fc:	f108 0602 	add.w	r6, r8, #2
 8006100:	3e01      	subs	r6, #1
 8006102:	4638      	mov	r0, r7
 8006104:	612e      	str	r6, [r5, #16]
 8006106:	4621      	mov	r1, r4
 8006108:	f7ff fdd8 	bl	8005cbc <_Bfree>
 800610c:	4628      	mov	r0, r5
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	f842 0f04 	str.w	r0, [r2, #4]!
 8006116:	3301      	adds	r3, #1
 8006118:	e7c5      	b.n	80060a6 <__lshift+0x4a>
 800611a:	3904      	subs	r1, #4
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	f841 2f04 	str.w	r2, [r1, #4]!
 8006124:	459c      	cmp	ip, r3
 8006126:	d8f9      	bhi.n	800611c <__lshift+0xc0>
 8006128:	e7ea      	b.n	8006100 <__lshift+0xa4>
 800612a:	bf00      	nop
 800612c:	08006fbc 	.word	0x08006fbc
 8006130:	08006fcd 	.word	0x08006fcd

08006134 <__mcmp>:
 8006134:	b530      	push	{r4, r5, lr}
 8006136:	6902      	ldr	r2, [r0, #16]
 8006138:	690c      	ldr	r4, [r1, #16]
 800613a:	1b12      	subs	r2, r2, r4
 800613c:	d10e      	bne.n	800615c <__mcmp+0x28>
 800613e:	f100 0314 	add.w	r3, r0, #20
 8006142:	3114      	adds	r1, #20
 8006144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800614c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006154:	42a5      	cmp	r5, r4
 8006156:	d003      	beq.n	8006160 <__mcmp+0x2c>
 8006158:	d305      	bcc.n	8006166 <__mcmp+0x32>
 800615a:	2201      	movs	r2, #1
 800615c:	4610      	mov	r0, r2
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	4283      	cmp	r3, r0
 8006162:	d3f3      	bcc.n	800614c <__mcmp+0x18>
 8006164:	e7fa      	b.n	800615c <__mcmp+0x28>
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	e7f7      	b.n	800615c <__mcmp+0x28>

0800616c <__mdiff>:
 800616c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	4606      	mov	r6, r0
 8006174:	4611      	mov	r1, r2
 8006176:	4620      	mov	r0, r4
 8006178:	4690      	mov	r8, r2
 800617a:	f7ff ffdb 	bl	8006134 <__mcmp>
 800617e:	1e05      	subs	r5, r0, #0
 8006180:	d110      	bne.n	80061a4 <__mdiff+0x38>
 8006182:	4629      	mov	r1, r5
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff fd59 	bl	8005c3c <_Balloc>
 800618a:	b930      	cbnz	r0, 800619a <__mdiff+0x2e>
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <__mdiff+0x10c>)
 800618e:	4602      	mov	r2, r0
 8006190:	f240 2137 	movw	r1, #567	; 0x237
 8006194:	4839      	ldr	r0, [pc, #228]	; (800627c <__mdiff+0x110>)
 8006196:	f000 fb0b 	bl	80067b0 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	bfa4      	itt	ge
 80061a6:	4643      	movge	r3, r8
 80061a8:	46a0      	movge	r8, r4
 80061aa:	4630      	mov	r0, r6
 80061ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061b0:	bfa6      	itte	ge
 80061b2:	461c      	movge	r4, r3
 80061b4:	2500      	movge	r5, #0
 80061b6:	2501      	movlt	r5, #1
 80061b8:	f7ff fd40 	bl	8005c3c <_Balloc>
 80061bc:	b920      	cbnz	r0, 80061c8 <__mdiff+0x5c>
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <__mdiff+0x10c>)
 80061c0:	4602      	mov	r2, r0
 80061c2:	f240 2145 	movw	r1, #581	; 0x245
 80061c6:	e7e5      	b.n	8006194 <__mdiff+0x28>
 80061c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061cc:	6926      	ldr	r6, [r4, #16]
 80061ce:	60c5      	str	r5, [r0, #12]
 80061d0:	f104 0914 	add.w	r9, r4, #20
 80061d4:	f108 0514 	add.w	r5, r8, #20
 80061d8:	f100 0e14 	add.w	lr, r0, #20
 80061dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80061e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061e4:	f108 0210 	add.w	r2, r8, #16
 80061e8:	46f2      	mov	sl, lr
 80061ea:	2100      	movs	r1, #0
 80061ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061f4:	fa11 f88b 	uxtah	r8, r1, fp
 80061f8:	b299      	uxth	r1, r3
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	eba8 0801 	sub.w	r8, r8, r1
 8006200:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006204:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006208:	fa1f f888 	uxth.w	r8, r8
 800620c:	1419      	asrs	r1, r3, #16
 800620e:	454e      	cmp	r6, r9
 8006210:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006214:	f84a 3b04 	str.w	r3, [sl], #4
 8006218:	d8e8      	bhi.n	80061ec <__mdiff+0x80>
 800621a:	1b33      	subs	r3, r6, r4
 800621c:	3b15      	subs	r3, #21
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	3304      	adds	r3, #4
 8006224:	3415      	adds	r4, #21
 8006226:	42a6      	cmp	r6, r4
 8006228:	bf38      	it	cc
 800622a:	2304      	movcc	r3, #4
 800622c:	441d      	add	r5, r3
 800622e:	4473      	add	r3, lr
 8006230:	469e      	mov	lr, r3
 8006232:	462e      	mov	r6, r5
 8006234:	4566      	cmp	r6, ip
 8006236:	d30e      	bcc.n	8006256 <__mdiff+0xea>
 8006238:	f10c 0203 	add.w	r2, ip, #3
 800623c:	1b52      	subs	r2, r2, r5
 800623e:	f022 0203 	bic.w	r2, r2, #3
 8006242:	3d03      	subs	r5, #3
 8006244:	45ac      	cmp	ip, r5
 8006246:	bf38      	it	cc
 8006248:	2200      	movcc	r2, #0
 800624a:	4413      	add	r3, r2
 800624c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006250:	b17a      	cbz	r2, 8006272 <__mdiff+0x106>
 8006252:	6107      	str	r7, [r0, #16]
 8006254:	e7a4      	b.n	80061a0 <__mdiff+0x34>
 8006256:	f856 8b04 	ldr.w	r8, [r6], #4
 800625a:	fa11 f288 	uxtah	r2, r1, r8
 800625e:	1414      	asrs	r4, r2, #16
 8006260:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006264:	b292      	uxth	r2, r2
 8006266:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800626a:	f84e 2b04 	str.w	r2, [lr], #4
 800626e:	1421      	asrs	r1, r4, #16
 8006270:	e7e0      	b.n	8006234 <__mdiff+0xc8>
 8006272:	3f01      	subs	r7, #1
 8006274:	e7ea      	b.n	800624c <__mdiff+0xe0>
 8006276:	bf00      	nop
 8006278:	08006fbc 	.word	0x08006fbc
 800627c:	08006fcd 	.word	0x08006fcd

08006280 <__d2b>:
 8006280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006284:	460f      	mov	r7, r1
 8006286:	2101      	movs	r1, #1
 8006288:	ec59 8b10 	vmov	r8, r9, d0
 800628c:	4616      	mov	r6, r2
 800628e:	f7ff fcd5 	bl	8005c3c <_Balloc>
 8006292:	4604      	mov	r4, r0
 8006294:	b930      	cbnz	r0, 80062a4 <__d2b+0x24>
 8006296:	4602      	mov	r2, r0
 8006298:	4b24      	ldr	r3, [pc, #144]	; (800632c <__d2b+0xac>)
 800629a:	4825      	ldr	r0, [pc, #148]	; (8006330 <__d2b+0xb0>)
 800629c:	f240 310f 	movw	r1, #783	; 0x30f
 80062a0:	f000 fa86 	bl	80067b0 <__assert_func>
 80062a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062ac:	bb2d      	cbnz	r5, 80062fa <__d2b+0x7a>
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	f1b8 0300 	subs.w	r3, r8, #0
 80062b4:	d026      	beq.n	8006304 <__d2b+0x84>
 80062b6:	4668      	mov	r0, sp
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	f7ff fd87 	bl	8005dcc <__lo0bits>
 80062be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80062c2:	b1e8      	cbz	r0, 8006300 <__d2b+0x80>
 80062c4:	f1c0 0320 	rsb	r3, r0, #32
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	430b      	orrs	r3, r1
 80062ce:	40c2      	lsrs	r2, r0
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	9201      	str	r2, [sp, #4]
 80062d4:	9b01      	ldr	r3, [sp, #4]
 80062d6:	61a3      	str	r3, [r4, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2202      	movne	r2, #2
 80062de:	2201      	moveq	r2, #1
 80062e0:	6122      	str	r2, [r4, #16]
 80062e2:	b1bd      	cbz	r5, 8006314 <__d2b+0x94>
 80062e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062e8:	4405      	add	r5, r0
 80062ea:	603d      	str	r5, [r7, #0]
 80062ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062f0:	6030      	str	r0, [r6, #0]
 80062f2:	4620      	mov	r0, r4
 80062f4:	b003      	add	sp, #12
 80062f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062fe:	e7d6      	b.n	80062ae <__d2b+0x2e>
 8006300:	6161      	str	r1, [r4, #20]
 8006302:	e7e7      	b.n	80062d4 <__d2b+0x54>
 8006304:	a801      	add	r0, sp, #4
 8006306:	f7ff fd61 	bl	8005dcc <__lo0bits>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	6163      	str	r3, [r4, #20]
 800630e:	3020      	adds	r0, #32
 8006310:	2201      	movs	r2, #1
 8006312:	e7e5      	b.n	80062e0 <__d2b+0x60>
 8006314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800631c:	6038      	str	r0, [r7, #0]
 800631e:	6918      	ldr	r0, [r3, #16]
 8006320:	f7ff fd34 	bl	8005d8c <__hi0bits>
 8006324:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006328:	e7e2      	b.n	80062f0 <__d2b+0x70>
 800632a:	bf00      	nop
 800632c:	08006fbc 	.word	0x08006fbc
 8006330:	08006fcd 	.word	0x08006fcd

08006334 <__ssputs_r>:
 8006334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	688e      	ldr	r6, [r1, #8]
 800633a:	461f      	mov	r7, r3
 800633c:	42be      	cmp	r6, r7
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	4682      	mov	sl, r0
 8006342:	460c      	mov	r4, r1
 8006344:	4690      	mov	r8, r2
 8006346:	d82c      	bhi.n	80063a2 <__ssputs_r+0x6e>
 8006348:	898a      	ldrh	r2, [r1, #12]
 800634a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800634e:	d026      	beq.n	800639e <__ssputs_r+0x6a>
 8006350:	6965      	ldr	r5, [r4, #20]
 8006352:	6909      	ldr	r1, [r1, #16]
 8006354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006358:	eba3 0901 	sub.w	r9, r3, r1
 800635c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006360:	1c7b      	adds	r3, r7, #1
 8006362:	444b      	add	r3, r9
 8006364:	106d      	asrs	r5, r5, #1
 8006366:	429d      	cmp	r5, r3
 8006368:	bf38      	it	cc
 800636a:	461d      	movcc	r5, r3
 800636c:	0553      	lsls	r3, r2, #21
 800636e:	d527      	bpl.n	80063c0 <__ssputs_r+0x8c>
 8006370:	4629      	mov	r1, r5
 8006372:	f7ff fbd7 	bl	8005b24 <_malloc_r>
 8006376:	4606      	mov	r6, r0
 8006378:	b360      	cbz	r0, 80063d4 <__ssputs_r+0xa0>
 800637a:	6921      	ldr	r1, [r4, #16]
 800637c:	464a      	mov	r2, r9
 800637e:	f000 fa09 	bl	8006794 <memcpy>
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	6126      	str	r6, [r4, #16]
 8006390:	6165      	str	r5, [r4, #20]
 8006392:	444e      	add	r6, r9
 8006394:	eba5 0509 	sub.w	r5, r5, r9
 8006398:	6026      	str	r6, [r4, #0]
 800639a:	60a5      	str	r5, [r4, #8]
 800639c:	463e      	mov	r6, r7
 800639e:	42be      	cmp	r6, r7
 80063a0:	d900      	bls.n	80063a4 <__ssputs_r+0x70>
 80063a2:	463e      	mov	r6, r7
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	4632      	mov	r2, r6
 80063a8:	4641      	mov	r1, r8
 80063aa:	f000 f9c9 	bl	8006740 <memmove>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	1b9b      	subs	r3, r3, r6
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	4433      	add	r3, r6
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	2000      	movs	r0, #0
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	462a      	mov	r2, r5
 80063c2:	f000 fa3b 	bl	800683c <_realloc_r>
 80063c6:	4606      	mov	r6, r0
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d1e0      	bne.n	800638e <__ssputs_r+0x5a>
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	4650      	mov	r0, sl
 80063d0:	f7ff fb34 	bl	8005a3c <_free_r>
 80063d4:	230c      	movs	r3, #12
 80063d6:	f8ca 3000 	str.w	r3, [sl]
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e0:	81a3      	strh	r3, [r4, #12]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	e7e9      	b.n	80063bc <__ssputs_r+0x88>

080063e8 <_svfiprintf_r>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	4698      	mov	r8, r3
 80063ee:	898b      	ldrh	r3, [r1, #12]
 80063f0:	061b      	lsls	r3, r3, #24
 80063f2:	b09d      	sub	sp, #116	; 0x74
 80063f4:	4607      	mov	r7, r0
 80063f6:	460d      	mov	r5, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	d50e      	bpl.n	800641a <_svfiprintf_r+0x32>
 80063fc:	690b      	ldr	r3, [r1, #16]
 80063fe:	b963      	cbnz	r3, 800641a <_svfiprintf_r+0x32>
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	f7ff fb8f 	bl	8005b24 <_malloc_r>
 8006406:	6028      	str	r0, [r5, #0]
 8006408:	6128      	str	r0, [r5, #16]
 800640a:	b920      	cbnz	r0, 8006416 <_svfiprintf_r+0x2e>
 800640c:	230c      	movs	r3, #12
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e0d0      	b.n	80065b8 <_svfiprintf_r+0x1d0>
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	616b      	str	r3, [r5, #20]
 800641a:	2300      	movs	r3, #0
 800641c:	9309      	str	r3, [sp, #36]	; 0x24
 800641e:	2320      	movs	r3, #32
 8006420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006424:	f8cd 800c 	str.w	r8, [sp, #12]
 8006428:	2330      	movs	r3, #48	; 0x30
 800642a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065d0 <_svfiprintf_r+0x1e8>
 800642e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006432:	f04f 0901 	mov.w	r9, #1
 8006436:	4623      	mov	r3, r4
 8006438:	469a      	mov	sl, r3
 800643a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643e:	b10a      	cbz	r2, 8006444 <_svfiprintf_r+0x5c>
 8006440:	2a25      	cmp	r2, #37	; 0x25
 8006442:	d1f9      	bne.n	8006438 <_svfiprintf_r+0x50>
 8006444:	ebba 0b04 	subs.w	fp, sl, r4
 8006448:	d00b      	beq.n	8006462 <_svfiprintf_r+0x7a>
 800644a:	465b      	mov	r3, fp
 800644c:	4622      	mov	r2, r4
 800644e:	4629      	mov	r1, r5
 8006450:	4638      	mov	r0, r7
 8006452:	f7ff ff6f 	bl	8006334 <__ssputs_r>
 8006456:	3001      	adds	r0, #1
 8006458:	f000 80a9 	beq.w	80065ae <_svfiprintf_r+0x1c6>
 800645c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800645e:	445a      	add	r2, fp
 8006460:	9209      	str	r2, [sp, #36]	; 0x24
 8006462:	f89a 3000 	ldrb.w	r3, [sl]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a1 	beq.w	80065ae <_svfiprintf_r+0x1c6>
 800646c:	2300      	movs	r3, #0
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006476:	f10a 0a01 	add.w	sl, sl, #1
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006482:	931a      	str	r3, [sp, #104]	; 0x68
 8006484:	4654      	mov	r4, sl
 8006486:	2205      	movs	r2, #5
 8006488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648c:	4850      	ldr	r0, [pc, #320]	; (80065d0 <_svfiprintf_r+0x1e8>)
 800648e:	f7f9 fe9f 	bl	80001d0 <memchr>
 8006492:	9a04      	ldr	r2, [sp, #16]
 8006494:	b9d8      	cbnz	r0, 80064ce <_svfiprintf_r+0xe6>
 8006496:	06d0      	lsls	r0, r2, #27
 8006498:	bf44      	itt	mi
 800649a:	2320      	movmi	r3, #32
 800649c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a0:	0711      	lsls	r1, r2, #28
 80064a2:	bf44      	itt	mi
 80064a4:	232b      	movmi	r3, #43	; 0x2b
 80064a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064aa:	f89a 3000 	ldrb.w	r3, [sl]
 80064ae:	2b2a      	cmp	r3, #42	; 0x2a
 80064b0:	d015      	beq.n	80064de <_svfiprintf_r+0xf6>
 80064b2:	9a07      	ldr	r2, [sp, #28]
 80064b4:	4654      	mov	r4, sl
 80064b6:	2000      	movs	r0, #0
 80064b8:	f04f 0c0a 	mov.w	ip, #10
 80064bc:	4621      	mov	r1, r4
 80064be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c2:	3b30      	subs	r3, #48	; 0x30
 80064c4:	2b09      	cmp	r3, #9
 80064c6:	d94d      	bls.n	8006564 <_svfiprintf_r+0x17c>
 80064c8:	b1b0      	cbz	r0, 80064f8 <_svfiprintf_r+0x110>
 80064ca:	9207      	str	r2, [sp, #28]
 80064cc:	e014      	b.n	80064f8 <_svfiprintf_r+0x110>
 80064ce:	eba0 0308 	sub.w	r3, r0, r8
 80064d2:	fa09 f303 	lsl.w	r3, r9, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	9304      	str	r3, [sp, #16]
 80064da:	46a2      	mov	sl, r4
 80064dc:	e7d2      	b.n	8006484 <_svfiprintf_r+0x9c>
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	1d19      	adds	r1, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9103      	str	r1, [sp, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bfbb      	ittet	lt
 80064ea:	425b      	neglt	r3, r3
 80064ec:	f042 0202 	orrlt.w	r2, r2, #2
 80064f0:	9307      	strge	r3, [sp, #28]
 80064f2:	9307      	strlt	r3, [sp, #28]
 80064f4:	bfb8      	it	lt
 80064f6:	9204      	strlt	r2, [sp, #16]
 80064f8:	7823      	ldrb	r3, [r4, #0]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d10c      	bne.n	8006518 <_svfiprintf_r+0x130>
 80064fe:	7863      	ldrb	r3, [r4, #1]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d134      	bne.n	800656e <_svfiprintf_r+0x186>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfb8      	it	lt
 8006510:	f04f 33ff 	movlt.w	r3, #4294967295
 8006514:	3402      	adds	r4, #2
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80065e0 <_svfiprintf_r+0x1f8>
 800651c:	7821      	ldrb	r1, [r4, #0]
 800651e:	2203      	movs	r2, #3
 8006520:	4650      	mov	r0, sl
 8006522:	f7f9 fe55 	bl	80001d0 <memchr>
 8006526:	b138      	cbz	r0, 8006538 <_svfiprintf_r+0x150>
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	eba0 000a 	sub.w	r0, r0, sl
 800652e:	2240      	movs	r2, #64	; 0x40
 8006530:	4082      	lsls	r2, r0
 8006532:	4313      	orrs	r3, r2
 8006534:	3401      	adds	r4, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653c:	4825      	ldr	r0, [pc, #148]	; (80065d4 <_svfiprintf_r+0x1ec>)
 800653e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006542:	2206      	movs	r2, #6
 8006544:	f7f9 fe44 	bl	80001d0 <memchr>
 8006548:	2800      	cmp	r0, #0
 800654a:	d038      	beq.n	80065be <_svfiprintf_r+0x1d6>
 800654c:	4b22      	ldr	r3, [pc, #136]	; (80065d8 <_svfiprintf_r+0x1f0>)
 800654e:	bb1b      	cbnz	r3, 8006598 <_svfiprintf_r+0x1b0>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	3307      	adds	r3, #7
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	3308      	adds	r3, #8
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655e:	4433      	add	r3, r6
 8006560:	9309      	str	r3, [sp, #36]	; 0x24
 8006562:	e768      	b.n	8006436 <_svfiprintf_r+0x4e>
 8006564:	fb0c 3202 	mla	r2, ip, r2, r3
 8006568:	460c      	mov	r4, r1
 800656a:	2001      	movs	r0, #1
 800656c:	e7a6      	b.n	80064bc <_svfiprintf_r+0xd4>
 800656e:	2300      	movs	r3, #0
 8006570:	3401      	adds	r4, #1
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	4619      	mov	r1, r3
 8006576:	f04f 0c0a 	mov.w	ip, #10
 800657a:	4620      	mov	r0, r4
 800657c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006580:	3a30      	subs	r2, #48	; 0x30
 8006582:	2a09      	cmp	r2, #9
 8006584:	d903      	bls.n	800658e <_svfiprintf_r+0x1a6>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0c6      	beq.n	8006518 <_svfiprintf_r+0x130>
 800658a:	9105      	str	r1, [sp, #20]
 800658c:	e7c4      	b.n	8006518 <_svfiprintf_r+0x130>
 800658e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006592:	4604      	mov	r4, r0
 8006594:	2301      	movs	r3, #1
 8006596:	e7f0      	b.n	800657a <_svfiprintf_r+0x192>
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <_svfiprintf_r+0x1f4>)
 80065a0:	a904      	add	r1, sp, #16
 80065a2:	4638      	mov	r0, r7
 80065a4:	f7fd fe64 	bl	8004270 <_printf_float>
 80065a8:	1c42      	adds	r2, r0, #1
 80065aa:	4606      	mov	r6, r0
 80065ac:	d1d6      	bne.n	800655c <_svfiprintf_r+0x174>
 80065ae:	89ab      	ldrh	r3, [r5, #12]
 80065b0:	065b      	lsls	r3, r3, #25
 80065b2:	f53f af2d 	bmi.w	8006410 <_svfiprintf_r+0x28>
 80065b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065b8:	b01d      	add	sp, #116	; 0x74
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	ab03      	add	r3, sp, #12
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	462a      	mov	r2, r5
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <_svfiprintf_r+0x1f4>)
 80065c6:	a904      	add	r1, sp, #16
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7fe f8f5 	bl	80047b8 <_printf_i>
 80065ce:	e7eb      	b.n	80065a8 <_svfiprintf_r+0x1c0>
 80065d0:	08007124 	.word	0x08007124
 80065d4:	0800712e 	.word	0x0800712e
 80065d8:	08004271 	.word	0x08004271
 80065dc:	08006335 	.word	0x08006335
 80065e0:	0800712a 	.word	0x0800712a

080065e4 <__sflush_r>:
 80065e4:	898a      	ldrh	r2, [r1, #12]
 80065e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ea:	4605      	mov	r5, r0
 80065ec:	0710      	lsls	r0, r2, #28
 80065ee:	460c      	mov	r4, r1
 80065f0:	d458      	bmi.n	80066a4 <__sflush_r+0xc0>
 80065f2:	684b      	ldr	r3, [r1, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dc05      	bgt.n	8006604 <__sflush_r+0x20>
 80065f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dc02      	bgt.n	8006604 <__sflush_r+0x20>
 80065fe:	2000      	movs	r0, #0
 8006600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006606:	2e00      	cmp	r6, #0
 8006608:	d0f9      	beq.n	80065fe <__sflush_r+0x1a>
 800660a:	2300      	movs	r3, #0
 800660c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006610:	682f      	ldr	r7, [r5, #0]
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	d032      	beq.n	800667e <__sflush_r+0x9a>
 8006618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	075a      	lsls	r2, r3, #29
 800661e:	d505      	bpl.n	800662c <__sflush_r+0x48>
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	1ac0      	subs	r0, r0, r3
 8006624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006626:	b10b      	cbz	r3, 800662c <__sflush_r+0x48>
 8006628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800662a:	1ac0      	subs	r0, r0, r3
 800662c:	2300      	movs	r3, #0
 800662e:	4602      	mov	r2, r0
 8006630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006632:	6a21      	ldr	r1, [r4, #32]
 8006634:	4628      	mov	r0, r5
 8006636:	47b0      	blx	r6
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	d106      	bne.n	800664c <__sflush_r+0x68>
 800663e:	6829      	ldr	r1, [r5, #0]
 8006640:	291d      	cmp	r1, #29
 8006642:	d82b      	bhi.n	800669c <__sflush_r+0xb8>
 8006644:	4a29      	ldr	r2, [pc, #164]	; (80066ec <__sflush_r+0x108>)
 8006646:	410a      	asrs	r2, r1
 8006648:	07d6      	lsls	r6, r2, #31
 800664a:	d427      	bmi.n	800669c <__sflush_r+0xb8>
 800664c:	2200      	movs	r2, #0
 800664e:	6062      	str	r2, [r4, #4]
 8006650:	04d9      	lsls	r1, r3, #19
 8006652:	6922      	ldr	r2, [r4, #16]
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	d504      	bpl.n	8006662 <__sflush_r+0x7e>
 8006658:	1c42      	adds	r2, r0, #1
 800665a:	d101      	bne.n	8006660 <__sflush_r+0x7c>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b903      	cbnz	r3, 8006662 <__sflush_r+0x7e>
 8006660:	6560      	str	r0, [r4, #84]	; 0x54
 8006662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006664:	602f      	str	r7, [r5, #0]
 8006666:	2900      	cmp	r1, #0
 8006668:	d0c9      	beq.n	80065fe <__sflush_r+0x1a>
 800666a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800666e:	4299      	cmp	r1, r3
 8006670:	d002      	beq.n	8006678 <__sflush_r+0x94>
 8006672:	4628      	mov	r0, r5
 8006674:	f7ff f9e2 	bl	8005a3c <_free_r>
 8006678:	2000      	movs	r0, #0
 800667a:	6360      	str	r0, [r4, #52]	; 0x34
 800667c:	e7c0      	b.n	8006600 <__sflush_r+0x1c>
 800667e:	2301      	movs	r3, #1
 8006680:	4628      	mov	r0, r5
 8006682:	47b0      	blx	r6
 8006684:	1c41      	adds	r1, r0, #1
 8006686:	d1c8      	bne.n	800661a <__sflush_r+0x36>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0c5      	beq.n	800661a <__sflush_r+0x36>
 800668e:	2b1d      	cmp	r3, #29
 8006690:	d001      	beq.n	8006696 <__sflush_r+0xb2>
 8006692:	2b16      	cmp	r3, #22
 8006694:	d101      	bne.n	800669a <__sflush_r+0xb6>
 8006696:	602f      	str	r7, [r5, #0]
 8006698:	e7b1      	b.n	80065fe <__sflush_r+0x1a>
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	e7ad      	b.n	8006600 <__sflush_r+0x1c>
 80066a4:	690f      	ldr	r7, [r1, #16]
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	d0a9      	beq.n	80065fe <__sflush_r+0x1a>
 80066aa:	0793      	lsls	r3, r2, #30
 80066ac:	680e      	ldr	r6, [r1, #0]
 80066ae:	bf08      	it	eq
 80066b0:	694b      	ldreq	r3, [r1, #20]
 80066b2:	600f      	str	r7, [r1, #0]
 80066b4:	bf18      	it	ne
 80066b6:	2300      	movne	r3, #0
 80066b8:	eba6 0807 	sub.w	r8, r6, r7
 80066bc:	608b      	str	r3, [r1, #8]
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	dd9c      	ble.n	80065fe <__sflush_r+0x1a>
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066c8:	4643      	mov	r3, r8
 80066ca:	463a      	mov	r2, r7
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b0      	blx	r6
 80066d0:	2800      	cmp	r0, #0
 80066d2:	dc06      	bgt.n	80066e2 <__sflush_r+0xfe>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e78e      	b.n	8006600 <__sflush_r+0x1c>
 80066e2:	4407      	add	r7, r0
 80066e4:	eba8 0800 	sub.w	r8, r8, r0
 80066e8:	e7e9      	b.n	80066be <__sflush_r+0xda>
 80066ea:	bf00      	nop
 80066ec:	dfbffffe 	.word	0xdfbffffe

080066f0 <_fflush_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	b913      	cbnz	r3, 8006700 <_fflush_r+0x10>
 80066fa:	2500      	movs	r5, #0
 80066fc:	4628      	mov	r0, r5
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	b118      	cbz	r0, 800670a <_fflush_r+0x1a>
 8006702:	6a03      	ldr	r3, [r0, #32]
 8006704:	b90b      	cbnz	r3, 800670a <_fflush_r+0x1a>
 8006706:	f7fe fa05 	bl	8004b14 <__sinit>
 800670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f3      	beq.n	80066fa <_fflush_r+0xa>
 8006712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006714:	07d0      	lsls	r0, r2, #31
 8006716:	d404      	bmi.n	8006722 <_fflush_r+0x32>
 8006718:	0599      	lsls	r1, r3, #22
 800671a:	d402      	bmi.n	8006722 <_fflush_r+0x32>
 800671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671e:	f7fe fb10 	bl	8004d42 <__retarget_lock_acquire_recursive>
 8006722:	4628      	mov	r0, r5
 8006724:	4621      	mov	r1, r4
 8006726:	f7ff ff5d 	bl	80065e4 <__sflush_r>
 800672a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800672c:	07da      	lsls	r2, r3, #31
 800672e:	4605      	mov	r5, r0
 8006730:	d4e4      	bmi.n	80066fc <_fflush_r+0xc>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	059b      	lsls	r3, r3, #22
 8006736:	d4e1      	bmi.n	80066fc <_fflush_r+0xc>
 8006738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800673a:	f7fe fb03 	bl	8004d44 <__retarget_lock_release_recursive>
 800673e:	e7dd      	b.n	80066fc <_fflush_r+0xc>

08006740 <memmove>:
 8006740:	4288      	cmp	r0, r1
 8006742:	b510      	push	{r4, lr}
 8006744:	eb01 0402 	add.w	r4, r1, r2
 8006748:	d902      	bls.n	8006750 <memmove+0x10>
 800674a:	4284      	cmp	r4, r0
 800674c:	4623      	mov	r3, r4
 800674e:	d807      	bhi.n	8006760 <memmove+0x20>
 8006750:	1e43      	subs	r3, r0, #1
 8006752:	42a1      	cmp	r1, r4
 8006754:	d008      	beq.n	8006768 <memmove+0x28>
 8006756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800675a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800675e:	e7f8      	b.n	8006752 <memmove+0x12>
 8006760:	4402      	add	r2, r0
 8006762:	4601      	mov	r1, r0
 8006764:	428a      	cmp	r2, r1
 8006766:	d100      	bne.n	800676a <memmove+0x2a>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800676e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006772:	e7f7      	b.n	8006764 <memmove+0x24>

08006774 <_sbrk_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_sbrk_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fb f88c 	bl	800189c <_sbrk>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_sbrk_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_sbrk_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000408 	.word	0x20000408

08006794 <memcpy>:
 8006794:	440a      	add	r2, r1
 8006796:	4291      	cmp	r1, r2
 8006798:	f100 33ff 	add.w	r3, r0, #4294967295
 800679c:	d100      	bne.n	80067a0 <memcpy+0xc>
 800679e:	4770      	bx	lr
 80067a0:	b510      	push	{r4, lr}
 80067a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067aa:	4291      	cmp	r1, r2
 80067ac:	d1f9      	bne.n	80067a2 <memcpy+0xe>
 80067ae:	bd10      	pop	{r4, pc}

080067b0 <__assert_func>:
 80067b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067b2:	4614      	mov	r4, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <__assert_func+0x2c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4605      	mov	r5, r0
 80067bc:	68d8      	ldr	r0, [r3, #12]
 80067be:	b14c      	cbz	r4, 80067d4 <__assert_func+0x24>
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <__assert_func+0x30>)
 80067c2:	9100      	str	r1, [sp, #0]
 80067c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067c8:	4906      	ldr	r1, [pc, #24]	; (80067e4 <__assert_func+0x34>)
 80067ca:	462b      	mov	r3, r5
 80067cc:	f000 f872 	bl	80068b4 <fiprintf>
 80067d0:	f000 f882 	bl	80068d8 <abort>
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <__assert_func+0x38>)
 80067d6:	461c      	mov	r4, r3
 80067d8:	e7f3      	b.n	80067c2 <__assert_func+0x12>
 80067da:	bf00      	nop
 80067dc:	20000064 	.word	0x20000064
 80067e0:	0800713f 	.word	0x0800713f
 80067e4:	0800714c 	.word	0x0800714c
 80067e8:	0800717a 	.word	0x0800717a

080067ec <_calloc_r>:
 80067ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ee:	fba1 2402 	umull	r2, r4, r1, r2
 80067f2:	b94c      	cbnz	r4, 8006808 <_calloc_r+0x1c>
 80067f4:	4611      	mov	r1, r2
 80067f6:	9201      	str	r2, [sp, #4]
 80067f8:	f7ff f994 	bl	8005b24 <_malloc_r>
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	4605      	mov	r5, r0
 8006800:	b930      	cbnz	r0, 8006810 <_calloc_r+0x24>
 8006802:	4628      	mov	r0, r5
 8006804:	b003      	add	sp, #12
 8006806:	bd30      	pop	{r4, r5, pc}
 8006808:	220c      	movs	r2, #12
 800680a:	6002      	str	r2, [r0, #0]
 800680c:	2500      	movs	r5, #0
 800680e:	e7f8      	b.n	8006802 <_calloc_r+0x16>
 8006810:	4621      	mov	r1, r4
 8006812:	f7fe fa18 	bl	8004c46 <memset>
 8006816:	e7f4      	b.n	8006802 <_calloc_r+0x16>

08006818 <__ascii_mbtowc>:
 8006818:	b082      	sub	sp, #8
 800681a:	b901      	cbnz	r1, 800681e <__ascii_mbtowc+0x6>
 800681c:	a901      	add	r1, sp, #4
 800681e:	b142      	cbz	r2, 8006832 <__ascii_mbtowc+0x1a>
 8006820:	b14b      	cbz	r3, 8006836 <__ascii_mbtowc+0x1e>
 8006822:	7813      	ldrb	r3, [r2, #0]
 8006824:	600b      	str	r3, [r1, #0]
 8006826:	7812      	ldrb	r2, [r2, #0]
 8006828:	1e10      	subs	r0, r2, #0
 800682a:	bf18      	it	ne
 800682c:	2001      	movne	r0, #1
 800682e:	b002      	add	sp, #8
 8006830:	4770      	bx	lr
 8006832:	4610      	mov	r0, r2
 8006834:	e7fb      	b.n	800682e <__ascii_mbtowc+0x16>
 8006836:	f06f 0001 	mvn.w	r0, #1
 800683a:	e7f8      	b.n	800682e <__ascii_mbtowc+0x16>

0800683c <_realloc_r>:
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	4680      	mov	r8, r0
 8006842:	4614      	mov	r4, r2
 8006844:	460e      	mov	r6, r1
 8006846:	b921      	cbnz	r1, 8006852 <_realloc_r+0x16>
 8006848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	4611      	mov	r1, r2
 800684e:	f7ff b969 	b.w	8005b24 <_malloc_r>
 8006852:	b92a      	cbnz	r2, 8006860 <_realloc_r+0x24>
 8006854:	f7ff f8f2 	bl	8005a3c <_free_r>
 8006858:	4625      	mov	r5, r4
 800685a:	4628      	mov	r0, r5
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006860:	f000 f841 	bl	80068e6 <_malloc_usable_size_r>
 8006864:	4284      	cmp	r4, r0
 8006866:	4607      	mov	r7, r0
 8006868:	d802      	bhi.n	8006870 <_realloc_r+0x34>
 800686a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800686e:	d812      	bhi.n	8006896 <_realloc_r+0x5a>
 8006870:	4621      	mov	r1, r4
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff f956 	bl	8005b24 <_malloc_r>
 8006878:	4605      	mov	r5, r0
 800687a:	2800      	cmp	r0, #0
 800687c:	d0ed      	beq.n	800685a <_realloc_r+0x1e>
 800687e:	42bc      	cmp	r4, r7
 8006880:	4622      	mov	r2, r4
 8006882:	4631      	mov	r1, r6
 8006884:	bf28      	it	cs
 8006886:	463a      	movcs	r2, r7
 8006888:	f7ff ff84 	bl	8006794 <memcpy>
 800688c:	4631      	mov	r1, r6
 800688e:	4640      	mov	r0, r8
 8006890:	f7ff f8d4 	bl	8005a3c <_free_r>
 8006894:	e7e1      	b.n	800685a <_realloc_r+0x1e>
 8006896:	4635      	mov	r5, r6
 8006898:	e7df      	b.n	800685a <_realloc_r+0x1e>

0800689a <__ascii_wctomb>:
 800689a:	b149      	cbz	r1, 80068b0 <__ascii_wctomb+0x16>
 800689c:	2aff      	cmp	r2, #255	; 0xff
 800689e:	bf85      	ittet	hi
 80068a0:	238a      	movhi	r3, #138	; 0x8a
 80068a2:	6003      	strhi	r3, [r0, #0]
 80068a4:	700a      	strbls	r2, [r1, #0]
 80068a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80068aa:	bf98      	it	ls
 80068ac:	2001      	movls	r0, #1
 80068ae:	4770      	bx	lr
 80068b0:	4608      	mov	r0, r1
 80068b2:	4770      	bx	lr

080068b4 <fiprintf>:
 80068b4:	b40e      	push	{r1, r2, r3}
 80068b6:	b503      	push	{r0, r1, lr}
 80068b8:	4601      	mov	r1, r0
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <fiprintf+0x20>)
 80068be:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c2:	6800      	ldr	r0, [r0, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f000 f83f 	bl	8006948 <_vfiprintf_r>
 80068ca:	b002      	add	sp, #8
 80068cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d0:	b003      	add	sp, #12
 80068d2:	4770      	bx	lr
 80068d4:	20000064 	.word	0x20000064

080068d8 <abort>:
 80068d8:	b508      	push	{r3, lr}
 80068da:	2006      	movs	r0, #6
 80068dc:	f000 fa0c 	bl	8006cf8 <raise>
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7fa ff63 	bl	80017ac <_exit>

080068e6 <_malloc_usable_size_r>:
 80068e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ea:	1f18      	subs	r0, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bfbc      	itt	lt
 80068f0:	580b      	ldrlt	r3, [r1, r0]
 80068f2:	18c0      	addlt	r0, r0, r3
 80068f4:	4770      	bx	lr

080068f6 <__sfputc_r>:
 80068f6:	6893      	ldr	r3, [r2, #8]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	b410      	push	{r4}
 80068fe:	6093      	str	r3, [r2, #8]
 8006900:	da08      	bge.n	8006914 <__sfputc_r+0x1e>
 8006902:	6994      	ldr	r4, [r2, #24]
 8006904:	42a3      	cmp	r3, r4
 8006906:	db01      	blt.n	800690c <__sfputc_r+0x16>
 8006908:	290a      	cmp	r1, #10
 800690a:	d103      	bne.n	8006914 <__sfputc_r+0x1e>
 800690c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006910:	f000 b934 	b.w	8006b7c <__swbuf_r>
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	1c58      	adds	r0, r3, #1
 8006918:	6010      	str	r0, [r2, #0]
 800691a:	7019      	strb	r1, [r3, #0]
 800691c:	4608      	mov	r0, r1
 800691e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006922:	4770      	bx	lr

08006924 <__sfputs_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	4614      	mov	r4, r2
 800692c:	18d5      	adds	r5, r2, r3
 800692e:	42ac      	cmp	r4, r5
 8006930:	d101      	bne.n	8006936 <__sfputs_r+0x12>
 8006932:	2000      	movs	r0, #0
 8006934:	e007      	b.n	8006946 <__sfputs_r+0x22>
 8006936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693a:	463a      	mov	r2, r7
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff ffda 	bl	80068f6 <__sfputc_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d1f3      	bne.n	800692e <__sfputs_r+0xa>
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006948 <_vfiprintf_r>:
 8006948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	460d      	mov	r5, r1
 800694e:	b09d      	sub	sp, #116	; 0x74
 8006950:	4614      	mov	r4, r2
 8006952:	4698      	mov	r8, r3
 8006954:	4606      	mov	r6, r0
 8006956:	b118      	cbz	r0, 8006960 <_vfiprintf_r+0x18>
 8006958:	6a03      	ldr	r3, [r0, #32]
 800695a:	b90b      	cbnz	r3, 8006960 <_vfiprintf_r+0x18>
 800695c:	f7fe f8da 	bl	8004b14 <__sinit>
 8006960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006962:	07d9      	lsls	r1, r3, #31
 8006964:	d405      	bmi.n	8006972 <_vfiprintf_r+0x2a>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	059a      	lsls	r2, r3, #22
 800696a:	d402      	bmi.n	8006972 <_vfiprintf_r+0x2a>
 800696c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800696e:	f7fe f9e8 	bl	8004d42 <__retarget_lock_acquire_recursive>
 8006972:	89ab      	ldrh	r3, [r5, #12]
 8006974:	071b      	lsls	r3, r3, #28
 8006976:	d501      	bpl.n	800697c <_vfiprintf_r+0x34>
 8006978:	692b      	ldr	r3, [r5, #16]
 800697a:	b99b      	cbnz	r3, 80069a4 <_vfiprintf_r+0x5c>
 800697c:	4629      	mov	r1, r5
 800697e:	4630      	mov	r0, r6
 8006980:	f000 f93a 	bl	8006bf8 <__swsetup_r>
 8006984:	b170      	cbz	r0, 80069a4 <_vfiprintf_r+0x5c>
 8006986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006988:	07dc      	lsls	r4, r3, #31
 800698a:	d504      	bpl.n	8006996 <_vfiprintf_r+0x4e>
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b01d      	add	sp, #116	; 0x74
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	0598      	lsls	r0, r3, #22
 800699a:	d4f7      	bmi.n	800698c <_vfiprintf_r+0x44>
 800699c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800699e:	f7fe f9d1 	bl	8004d44 <__retarget_lock_release_recursive>
 80069a2:	e7f3      	b.n	800698c <_vfiprintf_r+0x44>
 80069a4:	2300      	movs	r3, #0
 80069a6:	9309      	str	r3, [sp, #36]	; 0x24
 80069a8:	2320      	movs	r3, #32
 80069aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b2:	2330      	movs	r3, #48	; 0x30
 80069b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006b68 <_vfiprintf_r+0x220>
 80069b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069bc:	f04f 0901 	mov.w	r9, #1
 80069c0:	4623      	mov	r3, r4
 80069c2:	469a      	mov	sl, r3
 80069c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069c8:	b10a      	cbz	r2, 80069ce <_vfiprintf_r+0x86>
 80069ca:	2a25      	cmp	r2, #37	; 0x25
 80069cc:	d1f9      	bne.n	80069c2 <_vfiprintf_r+0x7a>
 80069ce:	ebba 0b04 	subs.w	fp, sl, r4
 80069d2:	d00b      	beq.n	80069ec <_vfiprintf_r+0xa4>
 80069d4:	465b      	mov	r3, fp
 80069d6:	4622      	mov	r2, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff ffa2 	bl	8006924 <__sfputs_r>
 80069e0:	3001      	adds	r0, #1
 80069e2:	f000 80a9 	beq.w	8006b38 <_vfiprintf_r+0x1f0>
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	445a      	add	r2, fp
 80069ea:	9209      	str	r2, [sp, #36]	; 0x24
 80069ec:	f89a 3000 	ldrb.w	r3, [sl]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80a1 	beq.w	8006b38 <_vfiprintf_r+0x1f0>
 80069f6:	2300      	movs	r3, #0
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295
 80069fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a00:	f10a 0a01 	add.w	sl, sl, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	9307      	str	r3, [sp, #28]
 8006a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a0e:	4654      	mov	r4, sl
 8006a10:	2205      	movs	r2, #5
 8006a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a16:	4854      	ldr	r0, [pc, #336]	; (8006b68 <_vfiprintf_r+0x220>)
 8006a18:	f7f9 fbda 	bl	80001d0 <memchr>
 8006a1c:	9a04      	ldr	r2, [sp, #16]
 8006a1e:	b9d8      	cbnz	r0, 8006a58 <_vfiprintf_r+0x110>
 8006a20:	06d1      	lsls	r1, r2, #27
 8006a22:	bf44      	itt	mi
 8006a24:	2320      	movmi	r3, #32
 8006a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a2a:	0713      	lsls	r3, r2, #28
 8006a2c:	bf44      	itt	mi
 8006a2e:	232b      	movmi	r3, #43	; 0x2b
 8006a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a34:	f89a 3000 	ldrb.w	r3, [sl]
 8006a38:	2b2a      	cmp	r3, #42	; 0x2a
 8006a3a:	d015      	beq.n	8006a68 <_vfiprintf_r+0x120>
 8006a3c:	9a07      	ldr	r2, [sp, #28]
 8006a3e:	4654      	mov	r4, sl
 8006a40:	2000      	movs	r0, #0
 8006a42:	f04f 0c0a 	mov.w	ip, #10
 8006a46:	4621      	mov	r1, r4
 8006a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a4c:	3b30      	subs	r3, #48	; 0x30
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d94d      	bls.n	8006aee <_vfiprintf_r+0x1a6>
 8006a52:	b1b0      	cbz	r0, 8006a82 <_vfiprintf_r+0x13a>
 8006a54:	9207      	str	r2, [sp, #28]
 8006a56:	e014      	b.n	8006a82 <_vfiprintf_r+0x13a>
 8006a58:	eba0 0308 	sub.w	r3, r0, r8
 8006a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a60:	4313      	orrs	r3, r2
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	46a2      	mov	sl, r4
 8006a66:	e7d2      	b.n	8006a0e <_vfiprintf_r+0xc6>
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	1d19      	adds	r1, r3, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	9103      	str	r1, [sp, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	bfbb      	ittet	lt
 8006a74:	425b      	neglt	r3, r3
 8006a76:	f042 0202 	orrlt.w	r2, r2, #2
 8006a7a:	9307      	strge	r3, [sp, #28]
 8006a7c:	9307      	strlt	r3, [sp, #28]
 8006a7e:	bfb8      	it	lt
 8006a80:	9204      	strlt	r2, [sp, #16]
 8006a82:	7823      	ldrb	r3, [r4, #0]
 8006a84:	2b2e      	cmp	r3, #46	; 0x2e
 8006a86:	d10c      	bne.n	8006aa2 <_vfiprintf_r+0x15a>
 8006a88:	7863      	ldrb	r3, [r4, #1]
 8006a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a8c:	d134      	bne.n	8006af8 <_vfiprintf_r+0x1b0>
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	9203      	str	r2, [sp, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb8      	it	lt
 8006a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a9e:	3402      	adds	r4, #2
 8006aa0:	9305      	str	r3, [sp, #20]
 8006aa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b78 <_vfiprintf_r+0x230>
 8006aa6:	7821      	ldrb	r1, [r4, #0]
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	4650      	mov	r0, sl
 8006aac:	f7f9 fb90 	bl	80001d0 <memchr>
 8006ab0:	b138      	cbz	r0, 8006ac2 <_vfiprintf_r+0x17a>
 8006ab2:	9b04      	ldr	r3, [sp, #16]
 8006ab4:	eba0 000a 	sub.w	r0, r0, sl
 8006ab8:	2240      	movs	r2, #64	; 0x40
 8006aba:	4082      	lsls	r2, r0
 8006abc:	4313      	orrs	r3, r2
 8006abe:	3401      	adds	r4, #1
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac6:	4829      	ldr	r0, [pc, #164]	; (8006b6c <_vfiprintf_r+0x224>)
 8006ac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006acc:	2206      	movs	r2, #6
 8006ace:	f7f9 fb7f 	bl	80001d0 <memchr>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d03f      	beq.n	8006b56 <_vfiprintf_r+0x20e>
 8006ad6:	4b26      	ldr	r3, [pc, #152]	; (8006b70 <_vfiprintf_r+0x228>)
 8006ad8:	bb1b      	cbnz	r3, 8006b22 <_vfiprintf_r+0x1da>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	3307      	adds	r3, #7
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	9303      	str	r3, [sp, #12]
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	443b      	add	r3, r7
 8006aea:	9309      	str	r3, [sp, #36]	; 0x24
 8006aec:	e768      	b.n	80069c0 <_vfiprintf_r+0x78>
 8006aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af2:	460c      	mov	r4, r1
 8006af4:	2001      	movs	r0, #1
 8006af6:	e7a6      	b.n	8006a46 <_vfiprintf_r+0xfe>
 8006af8:	2300      	movs	r3, #0
 8006afa:	3401      	adds	r4, #1
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	4619      	mov	r1, r3
 8006b00:	f04f 0c0a 	mov.w	ip, #10
 8006b04:	4620      	mov	r0, r4
 8006b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b0a:	3a30      	subs	r2, #48	; 0x30
 8006b0c:	2a09      	cmp	r2, #9
 8006b0e:	d903      	bls.n	8006b18 <_vfiprintf_r+0x1d0>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0c6      	beq.n	8006aa2 <_vfiprintf_r+0x15a>
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	e7c4      	b.n	8006aa2 <_vfiprintf_r+0x15a>
 8006b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e7f0      	b.n	8006b04 <_vfiprintf_r+0x1bc>
 8006b22:	ab03      	add	r3, sp, #12
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	462a      	mov	r2, r5
 8006b28:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <_vfiprintf_r+0x22c>)
 8006b2a:	a904      	add	r1, sp, #16
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7fd fb9f 	bl	8004270 <_printf_float>
 8006b32:	4607      	mov	r7, r0
 8006b34:	1c78      	adds	r0, r7, #1
 8006b36:	d1d6      	bne.n	8006ae6 <_vfiprintf_r+0x19e>
 8006b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b3a:	07d9      	lsls	r1, r3, #31
 8006b3c:	d405      	bmi.n	8006b4a <_vfiprintf_r+0x202>
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	059a      	lsls	r2, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_vfiprintf_r+0x202>
 8006b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b46:	f7fe f8fd 	bl	8004d44 <__retarget_lock_release_recursive>
 8006b4a:	89ab      	ldrh	r3, [r5, #12]
 8006b4c:	065b      	lsls	r3, r3, #25
 8006b4e:	f53f af1d 	bmi.w	800698c <_vfiprintf_r+0x44>
 8006b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b54:	e71c      	b.n	8006990 <_vfiprintf_r+0x48>
 8006b56:	ab03      	add	r3, sp, #12
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <_vfiprintf_r+0x22c>)
 8006b5e:	a904      	add	r1, sp, #16
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7fd fe29 	bl	80047b8 <_printf_i>
 8006b66:	e7e4      	b.n	8006b32 <_vfiprintf_r+0x1ea>
 8006b68:	08007124 	.word	0x08007124
 8006b6c:	0800712e 	.word	0x0800712e
 8006b70:	08004271 	.word	0x08004271
 8006b74:	08006925 	.word	0x08006925
 8006b78:	0800712a 	.word	0x0800712a

08006b7c <__swbuf_r>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	4614      	mov	r4, r2
 8006b82:	4605      	mov	r5, r0
 8006b84:	b118      	cbz	r0, 8006b8e <__swbuf_r+0x12>
 8006b86:	6a03      	ldr	r3, [r0, #32]
 8006b88:	b90b      	cbnz	r3, 8006b8e <__swbuf_r+0x12>
 8006b8a:	f7fd ffc3 	bl	8004b14 <__sinit>
 8006b8e:	69a3      	ldr	r3, [r4, #24]
 8006b90:	60a3      	str	r3, [r4, #8]
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	071a      	lsls	r2, r3, #28
 8006b96:	d525      	bpl.n	8006be4 <__swbuf_r+0x68>
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	b31b      	cbz	r3, 8006be4 <__swbuf_r+0x68>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	6922      	ldr	r2, [r4, #16]
 8006ba0:	1a98      	subs	r0, r3, r2
 8006ba2:	6963      	ldr	r3, [r4, #20]
 8006ba4:	b2f6      	uxtb	r6, r6
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	4637      	mov	r7, r6
 8006baa:	dc04      	bgt.n	8006bb6 <__swbuf_r+0x3a>
 8006bac:	4621      	mov	r1, r4
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7ff fd9e 	bl	80066f0 <_fflush_r>
 8006bb4:	b9e0      	cbnz	r0, 8006bf0 <__swbuf_r+0x74>
 8006bb6:	68a3      	ldr	r3, [r4, #8]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	60a3      	str	r3, [r4, #8]
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	701e      	strb	r6, [r3, #0]
 8006bc4:	6962      	ldr	r2, [r4, #20]
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d004      	beq.n	8006bd6 <__swbuf_r+0x5a>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	07db      	lsls	r3, r3, #31
 8006bd0:	d506      	bpl.n	8006be0 <__swbuf_r+0x64>
 8006bd2:	2e0a      	cmp	r6, #10
 8006bd4:	d104      	bne.n	8006be0 <__swbuf_r+0x64>
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7ff fd89 	bl	80066f0 <_fflush_r>
 8006bde:	b938      	cbnz	r0, 8006bf0 <__swbuf_r+0x74>
 8006be0:	4638      	mov	r0, r7
 8006be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be4:	4621      	mov	r1, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f806 	bl	8006bf8 <__swsetup_r>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d0d5      	beq.n	8006b9c <__swbuf_r+0x20>
 8006bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf4:	e7f4      	b.n	8006be0 <__swbuf_r+0x64>
	...

08006bf8 <__swsetup_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <__swsetup_r+0xac>)
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	460c      	mov	r4, r1
 8006c02:	b118      	cbz	r0, 8006c0c <__swsetup_r+0x14>
 8006c04:	6a03      	ldr	r3, [r0, #32]
 8006c06:	b90b      	cbnz	r3, 8006c0c <__swsetup_r+0x14>
 8006c08:	f7fd ff84 	bl	8004b14 <__sinit>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c12:	0718      	lsls	r0, r3, #28
 8006c14:	d422      	bmi.n	8006c5c <__swsetup_r+0x64>
 8006c16:	06d9      	lsls	r1, r3, #27
 8006c18:	d407      	bmi.n	8006c2a <__swsetup_r+0x32>
 8006c1a:	2309      	movs	r3, #9
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	e034      	b.n	8006c94 <__swsetup_r+0x9c>
 8006c2a:	0758      	lsls	r0, r3, #29
 8006c2c:	d512      	bpl.n	8006c54 <__swsetup_r+0x5c>
 8006c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c30:	b141      	cbz	r1, 8006c44 <__swsetup_r+0x4c>
 8006c32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c36:	4299      	cmp	r1, r3
 8006c38:	d002      	beq.n	8006c40 <__swsetup_r+0x48>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7fe fefe 	bl	8005a3c <_free_r>
 8006c40:	2300      	movs	r3, #0
 8006c42:	6363      	str	r3, [r4, #52]	; 0x34
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0308 	orr.w	r3, r3, #8
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	b94b      	cbnz	r3, 8006c74 <__swsetup_r+0x7c>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6a:	d003      	beq.n	8006c74 <__swsetup_r+0x7c>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f884 	bl	8006d7c <__smakebuf_r>
 8006c74:	89a0      	ldrh	r0, [r4, #12]
 8006c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7a:	f010 0301 	ands.w	r3, r0, #1
 8006c7e:	d00a      	beq.n	8006c96 <__swsetup_r+0x9e>
 8006c80:	2300      	movs	r3, #0
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	6963      	ldr	r3, [r4, #20]
 8006c86:	425b      	negs	r3, r3
 8006c88:	61a3      	str	r3, [r4, #24]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	b943      	cbnz	r3, 8006ca0 <__swsetup_r+0xa8>
 8006c8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c92:	d1c4      	bne.n	8006c1e <__swsetup_r+0x26>
 8006c94:	bd38      	pop	{r3, r4, r5, pc}
 8006c96:	0781      	lsls	r1, r0, #30
 8006c98:	bf58      	it	pl
 8006c9a:	6963      	ldrpl	r3, [r4, #20]
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	e7f4      	b.n	8006c8a <__swsetup_r+0x92>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e7f7      	b.n	8006c94 <__swsetup_r+0x9c>
 8006ca4:	20000064 	.word	0x20000064

08006ca8 <_raise_r>:
 8006ca8:	291f      	cmp	r1, #31
 8006caa:	b538      	push	{r3, r4, r5, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	d904      	bls.n	8006cbc <_raise_r+0x14>
 8006cb2:	2316      	movs	r3, #22
 8006cb4:	6003      	str	r3, [r0, #0]
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cbe:	b112      	cbz	r2, 8006cc6 <_raise_r+0x1e>
 8006cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cc4:	b94b      	cbnz	r3, 8006cda <_raise_r+0x32>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f830 	bl	8006d2c <_getpid_r>
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4601      	mov	r1, r0
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd6:	f000 b817 	b.w	8006d08 <_kill_r>
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d00a      	beq.n	8006cf4 <_raise_r+0x4c>
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	d103      	bne.n	8006cea <_raise_r+0x42>
 8006ce2:	2316      	movs	r3, #22
 8006ce4:	6003      	str	r3, [r0, #0]
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e7e7      	b.n	8006cba <_raise_r+0x12>
 8006cea:	2400      	movs	r4, #0
 8006cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	4798      	blx	r3
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7e0      	b.n	8006cba <_raise_r+0x12>

08006cf8 <raise>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <raise+0xc>)
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f7ff bfd3 	b.w	8006ca8 <_raise_r>
 8006d02:	bf00      	nop
 8006d04:	20000064 	.word	0x20000064

08006d08 <_kill_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4d07      	ldr	r5, [pc, #28]	; (8006d28 <_kill_r+0x20>)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	602b      	str	r3, [r5, #0]
 8006d16:	f7fa fd39 	bl	800178c <_kill>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	d102      	bne.n	8006d24 <_kill_r+0x1c>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	b103      	cbz	r3, 8006d24 <_kill_r+0x1c>
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20000408 	.word	0x20000408

08006d2c <_getpid_r>:
 8006d2c:	f7fa bd26 	b.w	800177c <_getpid>

08006d30 <__swhatbuf_r>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	460c      	mov	r4, r1
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	b096      	sub	sp, #88	; 0x58
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	461e      	mov	r6, r3
 8006d40:	da0d      	bge.n	8006d5e <__swhatbuf_r+0x2e>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d48:	f04f 0100 	mov.w	r1, #0
 8006d4c:	bf0c      	ite	eq
 8006d4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d52:	2340      	movne	r3, #64	; 0x40
 8006d54:	2000      	movs	r0, #0
 8006d56:	6031      	str	r1, [r6, #0]
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	b016      	add	sp, #88	; 0x58
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
 8006d5e:	466a      	mov	r2, sp
 8006d60:	f000 f848 	bl	8006df4 <_fstat_r>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	dbec      	blt.n	8006d42 <__swhatbuf_r+0x12>
 8006d68:	9901      	ldr	r1, [sp, #4]
 8006d6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d72:	4259      	negs	r1, r3
 8006d74:	4159      	adcs	r1, r3
 8006d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7a:	e7eb      	b.n	8006d54 <__swhatbuf_r+0x24>

08006d7c <__smakebuf_r>:
 8006d7c:	898b      	ldrh	r3, [r1, #12]
 8006d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d80:	079d      	lsls	r5, r3, #30
 8006d82:	4606      	mov	r6, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	d507      	bpl.n	8006d98 <__smakebuf_r+0x1c>
 8006d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	2301      	movs	r3, #1
 8006d92:	6163      	str	r3, [r4, #20]
 8006d94:	b002      	add	sp, #8
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	ab01      	add	r3, sp, #4
 8006d9a:	466a      	mov	r2, sp
 8006d9c:	f7ff ffc8 	bl	8006d30 <__swhatbuf_r>
 8006da0:	9900      	ldr	r1, [sp, #0]
 8006da2:	4605      	mov	r5, r0
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7fe febd 	bl	8005b24 <_malloc_r>
 8006daa:	b948      	cbnz	r0, 8006dc0 <__smakebuf_r+0x44>
 8006dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d4ef      	bmi.n	8006d94 <__smakebuf_r+0x18>
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	e7e3      	b.n	8006d88 <__smakebuf_r+0xc>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	6020      	str	r0, [r4, #0]
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	9b00      	ldr	r3, [sp, #0]
 8006dcc:	6163      	str	r3, [r4, #20]
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	6120      	str	r0, [r4, #16]
 8006dd2:	b15b      	cbz	r3, 8006dec <__smakebuf_r+0x70>
 8006dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 f81d 	bl	8006e18 <_isatty_r>
 8006dde:	b128      	cbz	r0, 8006dec <__smakebuf_r+0x70>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	431d      	orrs	r5, r3
 8006df0:	81a5      	strh	r5, [r4, #12]
 8006df2:	e7cf      	b.n	8006d94 <__smakebuf_r+0x18>

08006df4 <_fstat_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	; (8006e14 <_fstat_r+0x20>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	f7fa fd22 	bl	800184a <_fstat>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d102      	bne.n	8006e10 <_fstat_r+0x1c>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b103      	cbz	r3, 8006e10 <_fstat_r+0x1c>
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	20000408 	.word	0x20000408

08006e18 <_isatty_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	; (8006e34 <_isatty_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7fa fd21 	bl	800186a <_isatty>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_isatty_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_isatty_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20000408 	.word	0x20000408

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
