
WFE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080058c8  080058c8  000158c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c64  08005c64  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c6c  08005c6c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08005c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000001b8  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d6d  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000193e  00000000  00000000  00028fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021df8  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1fc  00000000  00000000  0004ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cceea  00000000  00000000  00057064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000585  00000000  00000000  00123f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e28  00000000  00000000  001244d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001272fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b0 	.word	0x080058b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080058b0 	.word	0x080058b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <SysTick_Handler>:
extern UART_HandleTypeDef huart2;



void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ea8:	f000 faa4 	bl	80013f4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000eac:	f000 fbf3 	bl	8001696 <HAL_SYSTICK_IRQHandler>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f000 ff4f 	bl	8001d5c <HAL_UART_IRQHandler>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000208 	.word	0x20000208

08000ec8 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fe1d 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <main>:
UART_HandleTypeDef huart2;

extern uint8_t some_data [] ;

int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
	char msg[50];

	HAL_Init();
 8000ede:	f000 fa37 	bl	8001350 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);  //using HSI

	GPIO_Init();
 8000ee2:	f000 f891 	bl	8001008 <GPIO_Init>

	UART2_Init();
 8000ee6:	f000 f855 	bl	8000f94 <UART2_Init>

	GPIO_Analog_Config();
 8000eea:	f000 f879 	bl	8000fe0 <GPIO_Analog_Config>
	//HAL_PWR_EnableSleepOnExit();

	while(1)
	{

	  if(HAL_UART_Transmit(&huart2, (uint8_t*) some_data, strlen((char*) some_data), HAL_MAX_DELAY) != HAL_OK)
 8000eee:	4823      	ldr	r0, [pc, #140]	; (8000f7c <main+0xa4>)
 8000ef0:	f7ff f9be 	bl	8000270 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <main+0xa4>)
 8000efe:	4820      	ldr	r0, [pc, #128]	; (8000f80 <main+0xa8>)
 8000f00:	f000 fea0 	bl	8001c44 <HAL_UART_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <main+0x36>
	  	{
	  		Error_Handler();
 8000f0a:	f000 f83f 	bl	8000f8c <Error_Handler>
	  	}

	  memset(msg,0,sizeof(msg));
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2232      	movs	r2, #50	; 0x32
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fbd2 	bl	80036be <memset>
	  sprintf(msg, "Going to sleep \r\n");
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4919      	ldr	r1, [pc, #100]	; (8000f84 <main+0xac>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fb6a 	bl	80035f8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char*) msg), HAL_MAX_DELAY);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f9a2 	bl	8000270 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	4812      	ldr	r0, [pc, #72]	; (8000f80 <main+0xa8>)
 8000f38:	f000 fe84 	bl	8001c44 <HAL_UART_Transmit>

	  HAL_SuspendTick(); //Disble systick otherwise the Event Reg will always be set due to
 8000f3c:	f000 fa7a 	bl	8001434 <HAL_SuspendTick>
	  	  	  	  	  	 // Systick Interrupts

	  __SEV();
 8000f40:	bf40      	sev

	  __WFE();  //go to sleep after executing this
 8000f42:	bf20      	wfe

	  __WFE();  //go to sleep after executing this
 8000f44:	bf20      	wfe

	   //resume here on WAKEUP

	  HAL_ResumeTick(); //enable the Systick
 8000f46:	f000 fa85 	bl	8001454 <HAL_ResumeTick>
	  memset(msg,0,sizeof(msg));
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2232      	movs	r2, #50	; 0x32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fbb4 	bl	80036be <memset>


	  sprintf(msg, "Woke up! \r\n");
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	490b      	ldr	r1, [pc, #44]	; (8000f88 <main+0xb0>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fb4c 	bl	80035f8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen((char*) msg), HAL_MAX_DELAY) ;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f984 	bl	8000270 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	1d39      	adds	r1, r7, #4
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <main+0xa8>)
 8000f74:	f000 fe66 	bl	8001c44 <HAL_UART_Transmit>
	  if(HAL_UART_Transmit(&huart2, (uint8_t*) some_data, strlen((char*) some_data), HAL_MAX_DELAY) != HAL_OK)
 8000f78:	e7b9      	b.n	8000eee <main+0x16>
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000208 	.word	0x20000208
 8000f84:	080058c8 	.word	0x080058c8
 8000f88:	080058dc 	.word	0x080058dc

08000f8c <Error_Handler>:
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

}
void Error_Handler()
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	while(1);
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x4>
	...

08000f94 <UART2_Init>:
}

void UART2_Init()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <UART2_Init+0x44>)
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <UART2_Init+0x48>)
 8000f9c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <UART2_Init+0x44>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <UART2_Init+0x44>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <UART2_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <UART2_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <UART2_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <UART2_Init+0x44>)
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <UART2_Init+0x44>)
 8000fc6:	f000 fded 	bl	8001ba4 <HAL_UART_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <UART2_Init+0x40>
	{
		//There is a problem
		Error_Handler();
 8000fd0:	f7ff ffdc 	bl	8000f8c <Error_Handler>
	}

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000208 	.word	0x20000208
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <GPIO_Analog_Config>:

void GPIO_Analog_Config()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioa_an;

	gpioa_an.Pin =  GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 |
 8000fe6:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8000fea:	607b      	str	r3, [r7, #4]
				   GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
				   GPIO_PIN_14 | GPIO_PIN_15;

	gpioa_an.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIOA, &gpioa_an);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <GPIO_Analog_Config+0x24>)
 8000ff6:	f000 fbed 	bl	80017d4 <HAL_GPIO_Init>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020000 	.word	0x40020000

08001008 <GPIO_Init>:

void GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <GPIO_Init+0x44>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <GPIO_Init+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <GPIO_Init+0x44>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
	//__HAL_RCC_GPIOD_CLK_ENABLE();

	//for input user button in first board
	GPIO_InitTypeDef GPIO_BTN;
	GPIO_BTN.Pin = GPIO_PIN_0;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
	GPIO_BTN.Mode = GPIO_MODE_EVT_FALLING; // instead of an int, an event will be generated and
 800102e:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8001032:	60bb      	str	r3, [r7, #8]
										   // event reg will be set. For falling edge.
	GPIO_BTN.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &GPIO_BTN);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <GPIO_Init+0x48>)
 800103e:	f000 fbc9 	bl	80017d4 <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0); //  commented b/c no interrupt
	//HAL_NVIC_EnableIRQ(EXTI0_IRQn); //commented to disable interrupts in order to execute WFE

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	// UART  code shifted to main because this callback won't be called now
	// as the inrpt wont be generated
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_MspInit>:


extern TIM_HandleTypeDef htimer2;

 void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	 // Processor specific low level inits

	 //1. Set up the priority grouping of the arm cortex m4 processor
	 HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 facf 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

	 //2. Enable the system exceptions
	 SCB->SHCSR |= 0x7 << 16;
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_MspInit+0x40>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_MspInit+0x40>)
 800107c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001080:	6253      	str	r3, [r2, #36]	; 0x24

	 //3. Set up the priority for the system exceptions.
	 HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0); //for mem manage fault
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	f06f 000b 	mvn.w	r0, #11
 800108a:	f000 face 	bl	800162a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0); //for bus fault
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	f06f 000a 	mvn.w	r0, #10
 8001096:	f000 fac8 	bl	800162a <HAL_NVIC_SetPriority>
	 HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0); //for usage fault
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	f06f 0009 	mvn.w	r0, #9
 80010a2:	f000 fac2 	bl	800162a <HAL_NVIC_SetPriority>

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	 //configure the low level inits

	 //1. enable the clock for the usart2
	 __HAL_RCC_USART2_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a20      	ldr	r2, [pc, #128]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010de:	6613      	str	r3, [r2, #96]	; 0x60

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
	 //2. do the pin muxing config.
	 GPIO_InitTypeDef gpio_uart;

	 gpio_uart.Pin = GPIO_PIN_2;	//gpio uart tx
 80010fc:	2304      	movs	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate = GPIO_AF7_USART2;
 800110c:	2307      	movs	r3, #7
 800110e:	627b      	str	r3, [r7, #36]	; 0x24

	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <HAL_UART_MspInit+0x98>)
 8001118:	f000 fb5c 	bl	80017d4 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; 	//gpio uart Rx
 800111c:	2308      	movs	r3, #8
 800111e:	617b      	str	r3, [r7, #20]

	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <HAL_UART_MspInit+0x98>)
 8001128:	f000 fb54 	bl	80017d4 <HAL_GPIO_Init>


	 //3, enable the irq and set up the priority (NVIC settings) (to be used if polling mode isnt used)
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112c:	2026      	movs	r0, #38	; 0x26
 800112e:	f000 fa98 	bl	8001662 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	2026      	movs	r0, #38	; 0x26
 8001138:	f000 fa77 	bl	800162a <HAL_NVIC_SetPriority>
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_kill>:

int _kill(int pid, int sig)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001166:	f002 fafd 	bl	8003764 <__errno>
 800116a:	4603      	mov	r3, r0
 800116c:	2216      	movs	r2, #22
 800116e:	601a      	str	r2, [r3, #0]
  return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_exit>:

void _exit (int status)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffe7 	bl	800115c <_kill>
  while (1) {}    /* Make sure we hang here */
 800118e:	e7fe      	b.n	800118e <_exit+0x12>

08001190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	e00a      	b.n	80011b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a2:	f3af 8000 	nop.w
 80011a6:	4601      	mov	r1, r0
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	dbf0      	blt.n	80011a2 <_read+0x12>
  }

  return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e009      	b.n	80011f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf1      	blt.n	80011dc <_write+0x12>
  }
  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	605a      	str	r2, [r3, #4]
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f002 fa62 	bl	8003764 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	20000250 	.word	0x20000250
 80012d4:	200003a8 	.word	0x200003a8

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f002 fa21 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fdd3 	bl	8000ed8 <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001340:	08005c74 	.word	0x08005c74
  ldr r2, =_sbss
 8001344:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001348:	200003a4 	.word	0x200003a4

0800134c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f94b 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fe72 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f963 	bl	800167e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f92b 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000018 	.word	0x20000018
 80013ec:	20000020 	.word	0x20000020
 80013f0:	2000001c 	.word	0x2000001c

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000020 	.word	0x20000020
 8001418:	20000254 	.word	0x20000254

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000254 	.word	0x20000254

08001434 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_SuspendTick+0x1c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_SuspendTick+0x1c>)
 800143e:	f023 0302 	bic.w	r3, r3, #2
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_ResumeTick+0x1c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_ResumeTick+0x1c>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800169a:	f000 f802 	bl	80016a2 <HAL_SYSTICK_Callback>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016be:	f7ff fead 	bl	800141c <HAL_GetTick>
 80016c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d008      	beq.n	80016e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e052      	b.n	8001788 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0216 	bic.w	r2, r2, #22
 80016f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_DMA_Abort+0x62>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001732:	e013      	b.n	800175c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001734:	f7ff fe72 	bl	800141c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b05      	cmp	r3, #5
 8001740:	d90c      	bls.n	800175c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e015      	b.n	8001788 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176e:	223f      	movs	r2, #63	; 0x3f
 8001770:	409a      	lsls	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d004      	beq.n	80017ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00c      	b.n	80017c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2205      	movs	r2, #5
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e16b      	b.n	8001ac8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 815a 	bne.w	8001ac2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80b4 	beq.w	8001ac2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a5f      	ldr	r2, [pc, #380]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_GPIO_Init+0x30c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a5b      	ldr	r2, [pc, #364]	; (8001ae4 <HAL_GPIO_Init+0x310>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x314>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02b      	beq.n	80019fa <HAL_GPIO_Init+0x226>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a51      	ldr	r2, [pc, #324]	; (8001aec <HAL_GPIO_Init+0x318>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d025      	beq.n	80019f6 <HAL_GPIO_Init+0x222>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_GPIO_Init+0x31c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <HAL_GPIO_Init+0x21e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x320>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x21a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x324>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x216>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x328>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x212>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x32c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x330>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x20a>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00e      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019de:	2308      	movs	r3, #8
 80019e0:	e00c      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00a      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019e6:	2305      	movs	r3, #5
 80019e8:	e008      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e004      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x228>
 80019fa:	2300      	movs	r3, #0
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f002 0203 	and.w	r2, r2, #3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4093      	lsls	r3, r2
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a0c:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <HAL_GPIO_Init+0x310>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	f67f ae90 	bls.w	80017f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40013800 	.word	0x40013800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40021400 	.word	0x40021400
 8001b00:	40021800 	.word	0x40021800
 8001b04:	40021c00 	.word	0x40021c00
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fa92 	bl	8001054 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000018 	.word	0x20000018

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	080058e8 	.word	0x080058e8

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	080058e8 	.word	0x080058e8

08001ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e042      	b.n	8001c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fa70 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fd69 	bl	80026c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d175      	bne.n	8001d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_UART_Transmit+0x2c>
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e06e      	b.n	8001d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2221      	movs	r2, #33	; 0x21
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c82:	f7ff fbcb 	bl	800141c <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	88fa      	ldrh	r2, [r7, #6]
 8001c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9c:	d108      	bne.n	8001cb0 <HAL_UART_Transmit+0x6c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	e003      	b.n	8001cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cb8:	e02e      	b.n	8001d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fb05 	bl	80022d4 <UART_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e03a      	b.n	8001d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10b      	bne.n	8001cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	e007      	b.n	8001d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1cb      	bne.n	8001cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fad1 	bl	80022d4 <UART_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e006      	b.n	8001d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0ba      	sub	sp, #232	; 0xe8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x66>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fbc2 	bl	8002544 <UART_Receive_IT>
      return;
 8001dc0:	e25b      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80de 	beq.w	8001f88 <HAL_UART_IRQHandler+0x22c>
 8001dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80d1 	beq.w	8001f88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_UART_IRQHandler+0xae>
 8001df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_UART_IRQHandler+0xd2>
 8001e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f043 0202 	orr.w	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_UART_IRQHandler+0xf6>
 8001e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d011      	beq.n	8001e82 <HAL_UART_IRQHandler+0x126>
 8001e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0208 	orr.w	r2, r3, #8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 81f2 	beq.w	8002270 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_UART_IRQHandler+0x14e>
 8001e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fb4d 	bl	8002544 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_UART_IRQHandler+0x17a>
 8001ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04f      	beq.n	8001f76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa55 	bl	8002386 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d141      	bne.n	8001f6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3314      	adds	r3, #20
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3314      	adds	r3, #20
 8001f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f26:	e841 2300 	strex	r3, r2, [r1]
 8001f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1d9      	bne.n	8001eea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d013      	beq.n	8001f66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <HAL_UART_IRQHandler+0x3e0>)
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fc20 	bl	8001790 <HAL_DMA_Abort_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f60:	4610      	mov	r0, r2
 8001f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f64:	e00e      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f99e 	bl	80022a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f6c:	e00a      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f99a 	bl	80022a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f74:	e006      	b.n	8001f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f996 	bl	80022a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f82:	e175      	b.n	8002270 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	bf00      	nop
    return;
 8001f86:	e173      	b.n	8002270 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 814f 	bne.w	8002230 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8148 	beq.w	8002230 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8141 	beq.w	8002230 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	f040 80b6 	bne.w	8002140 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8145 	beq.w	8002274 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	f080 813e 	bcs.w	8002274 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800200a:	f000 8088 	beq.w	800211e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800202c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800203a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800203e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800204a:	e841 2300 	strex	r3, r2, [r1]
 800204e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1d9      	bne.n	800200e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3314      	adds	r3, #20
 8002060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	e853 3f00 	ldrex	r3, [r3]
 8002068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800206a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800207e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800208a:	e841 2300 	strex	r3, r2, [r1]
 800208e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e1      	bne.n	800205a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3314      	adds	r3, #20
 800209c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3314      	adds	r3, #20
 80020b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e3      	bne.n	8002096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	e853 3f00 	ldrex	r3, [r3]
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ee:	f023 0310 	bic.w	r3, r3, #16
 80020f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	330c      	adds	r3, #12
 80020fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002100:	65ba      	str	r2, [r7, #88]	; 0x58
 8002102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002108:	e841 2300 	strex	r3, r2, [r1]
 800210c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e3      	bne.n	80020dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fac9 	bl	80016b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800212c:	b29b      	uxth	r3, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f8c1 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800213a:	e09b      	b.n	8002274 <HAL_UART_IRQHandler+0x518>
 800213c:	0800244d 	.word	0x0800244d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002148:	b29b      	uxth	r3, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 808e 	beq.w	8002278 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800215c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8089 	beq.w	8002278 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800217c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800218a:	647a      	str	r2, [r7, #68]	; 0x44
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e3      	bne.n	8002166 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3314      	adds	r3, #20
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	623b      	str	r3, [r7, #32]
   return(result);
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021c2:	633a      	str	r2, [r7, #48]	; 0x30
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ca:	e841 2300 	strex	r3, r2, [r1]
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1e3      	bne.n	800219e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0310 	bic.w	r3, r3, #16
 80021fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002208:	61fa      	str	r2, [r7, #28]
 800220a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	e841 2300 	strex	r3, r2, [r1]
 8002214:	617b      	str	r3, [r7, #20]
   return(result);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e3      	bne.n	80021e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f847 	bl	80022bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800222e:	e023      	b.n	8002278 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_UART_IRQHandler+0x4f4>
 800223c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f913 	bl	8002474 <UART_Transmit_IT>
    return;
 800224e:	e014      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <HAL_UART_IRQHandler+0x51e>
 800225c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f953 	bl	8002514 <UART_EndTransmit_IT>
    return;
 800226e:	e004      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
    return;
 8002270:	bf00      	nop
 8002272:	e002      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
      return;
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <HAL_UART_IRQHandler+0x51e>
      return;
 8002278:	bf00      	nop
  }
}
 800227a:	37e8      	adds	r7, #232	; 0xe8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e4:	e03b      	b.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d037      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ee:	f7ff f895 	bl	800141c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d302      	bcc.n	8002304 <UART_WaitOnFlagUntilTimeout+0x30>
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e03a      	b.n	800237e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d023      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d020      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d01d      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b08      	cmp	r3, #8
 800232e:	d116      	bne.n	800235e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f81d 	bl	8002386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2208      	movs	r2, #8
 8002350:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4013      	ands	r3, r2
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	429a      	cmp	r2, r3
 800237a:	d0b4      	beq.n	80022e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002386:	b480      	push	{r7}
 8002388:	b095      	sub	sp, #84	; 0x54
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ae:	643a      	str	r2, [r7, #64]	; 0x40
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e5      	bne.n	800238e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3314      	adds	r3, #20
 80023c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d119      	bne.n	8002432 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	60bb      	str	r3, [r7, #8]
   return(result);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f023 0310 	bic.w	r3, r3, #16
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800241e:	61ba      	str	r2, [r7, #24]
 8002420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	613b      	str	r3, [r7, #16]
   return(result);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e5      	bne.n	80023fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002440:	bf00      	nop
 8002442:	3754      	adds	r7, #84	; 0x54
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ff1e 	bl	80022a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b21      	cmp	r3, #33	; 0x21
 8002486:	d13e      	bne.n	8002506 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002490:	d114      	bne.n	80024bc <UART_Transmit_IT+0x48>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d110      	bne.n	80024bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e008      	b.n	80024ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	1c59      	adds	r1, r3, #1
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6211      	str	r1, [r2, #32]
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4619      	mov	r1, r3
 80024dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002500:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fea3 	bl	8002280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b22      	cmp	r3, #34	; 0x22
 8002556:	f040 80ae 	bne.w	80026b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d117      	bne.n	8002594 <UART_Receive_IT+0x50>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d113      	bne.n	8002594 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	b29a      	uxth	r2, r3
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
 8002592:	e026      	b.n	80025e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d007      	beq.n	80025b8 <UART_Receive_IT+0x74>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <UART_Receive_IT+0x82>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d106      	bne.n	80025c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e008      	b.n	80025d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4619      	mov	r1, r3
 80025f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d15d      	bne.n	80026b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0220 	bic.w	r2, r2, #32
 8002604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	2b01      	cmp	r3, #1
 800263a:	d135      	bne.n	80026a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	e853 3f00 	ldrex	r3, [r3]
 8002650:	613b      	str	r3, [r7, #16]
   return(result);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f023 0310 	bic.w	r3, r3, #16
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	623a      	str	r2, [r7, #32]
 8002664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002666:	69f9      	ldr	r1, [r7, #28]
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	e841 2300 	strex	r3, r2, [r1]
 800266e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1e5      	bne.n	8002642 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b10      	cmp	r3, #16
 8002682:	d10a      	bne.n	800269a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fe0b 	bl	80022bc <HAL_UARTEx_RxEventCallback>
 80026a6:	e002      	b.n	80026ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fdf3 	bl	8002294 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e002      	b.n	80026b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3730      	adds	r7, #48	; 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c4:	b0c0      	sub	sp, #256	; 0x100
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	ea40 0301 	orr.w	r3, r0, r1
 80026e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	431a      	orrs	r2, r3
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002718:	f021 010c 	bic.w	r1, r1, #12
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002726:	430b      	orrs	r3, r1
 8002728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	6999      	ldr	r1, [r3, #24]
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	ea40 0301 	orr.w	r3, r0, r1
 8002746:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b8f      	ldr	r3, [pc, #572]	; (800298c <UART_SetConfig+0x2cc>)
 8002750:	429a      	cmp	r2, r3
 8002752:	d005      	beq.n	8002760 <UART_SetConfig+0xa0>
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <UART_SetConfig+0x2d0>)
 800275c:	429a      	cmp	r2, r3
 800275e:	d104      	bne.n	800276a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002760:	f7ff fa0c 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8002764:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002768:	e003      	b.n	8002772 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276a:	f7ff f9f3 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800276e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277c:	f040 810c 	bne.w	8002998 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800278a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800278e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002792:	4622      	mov	r2, r4
 8002794:	462b      	mov	r3, r5
 8002796:	1891      	adds	r1, r2, r2
 8002798:	65b9      	str	r1, [r7, #88]	; 0x58
 800279a:	415b      	adcs	r3, r3
 800279c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027a2:	4621      	mov	r1, r4
 80027a4:	eb12 0801 	adds.w	r8, r2, r1
 80027a8:	4629      	mov	r1, r5
 80027aa:	eb43 0901 	adc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027d0:	462b      	mov	r3, r5
 80027d2:	eb49 0303 	adc.w	r3, r9, r3
 80027d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027ee:	460b      	mov	r3, r1
 80027f0:	18db      	adds	r3, r3, r3
 80027f2:	653b      	str	r3, [r7, #80]	; 0x50
 80027f4:	4613      	mov	r3, r2
 80027f6:	eb42 0303 	adc.w	r3, r2, r3
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
 80027fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002800:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002804:	f7fe f9d0 	bl	8000ba8 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <UART_SetConfig+0x2d4>)
 800280e:	fba3 2302 	umull	r2, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	011c      	lsls	r4, r3, #4
 8002816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002820:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002824:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	1891      	adds	r1, r2, r2
 800282e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002830:	415b      	adcs	r3, r3
 8002832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002834:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002838:	4641      	mov	r1, r8
 800283a:	eb12 0a01 	adds.w	sl, r2, r1
 800283e:	4649      	mov	r1, r9
 8002840:	eb43 0b01 	adc.w	fp, r3, r1
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002850:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002858:	4692      	mov	sl, r2
 800285a:	469b      	mov	fp, r3
 800285c:	4643      	mov	r3, r8
 800285e:	eb1a 0303 	adds.w	r3, sl, r3
 8002862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002866:	464b      	mov	r3, r9
 8002868:	eb4b 0303 	adc.w	r3, fp, r3
 800286c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800287c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002880:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002884:	460b      	mov	r3, r1
 8002886:	18db      	adds	r3, r3, r3
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
 800288a:	4613      	mov	r3, r2
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
 8002892:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002896:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800289a:	f7fe f985 	bl	8000ba8 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <UART_SetConfig+0x2d4>)
 80028a6:	fba3 2301 	umull	r2, r3, r3, r1
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2264      	movs	r2, #100	; 0x64
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	1acb      	subs	r3, r1, r3
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <UART_SetConfig+0x2d4>)
 80028bc:	fba3 2302 	umull	r2, r3, r3, r2
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028c8:	441c      	add	r4, r3
 80028ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	1891      	adds	r1, r2, r2
 80028e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e4:	415b      	adcs	r3, r3
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028ec:	4641      	mov	r1, r8
 80028ee:	1851      	adds	r1, r2, r1
 80028f0:	6339      	str	r1, [r7, #48]	; 0x30
 80028f2:	4649      	mov	r1, r9
 80028f4:	414b      	adcs	r3, r1
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002904:	4659      	mov	r1, fp
 8002906:	00cb      	lsls	r3, r1, #3
 8002908:	4651      	mov	r1, sl
 800290a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290e:	4651      	mov	r1, sl
 8002910:	00ca      	lsls	r2, r1, #3
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4603      	mov	r3, r0
 8002918:	4642      	mov	r2, r8
 800291a:	189b      	adds	r3, r3, r2
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002920:	464b      	mov	r3, r9
 8002922:	460a      	mov	r2, r1
 8002924:	eb42 0303 	adc.w	r3, r2, r3
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002938:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800293c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002940:	460b      	mov	r3, r1
 8002942:	18db      	adds	r3, r3, r3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	4613      	mov	r3, r2
 8002948:	eb42 0303 	adc.w	r3, r2, r3
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002952:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002956:	f7fe f927 	bl	8000ba8 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <UART_SetConfig+0x2d4>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	2164      	movs	r1, #100	; 0x64
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	3332      	adds	r3, #50	; 0x32
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <UART_SetConfig+0x2d4>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4422      	add	r2, r4
 8002986:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002988:	e106      	b.n	8002b98 <UART_SetConfig+0x4d8>
 800298a:	bf00      	nop
 800298c:	40011000 	.word	0x40011000
 8002990:	40011400 	.word	0x40011400
 8002994:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029aa:	4642      	mov	r2, r8
 80029ac:	464b      	mov	r3, r9
 80029ae:	1891      	adds	r1, r2, r2
 80029b0:	6239      	str	r1, [r7, #32]
 80029b2:	415b      	adcs	r3, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ba:	4641      	mov	r1, r8
 80029bc:	1854      	adds	r4, r2, r1
 80029be:	4649      	mov	r1, r9
 80029c0:	eb43 0501 	adc.w	r5, r3, r1
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	18e3      	adds	r3, r4, r3
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e0:	464b      	mov	r3, r9
 80029e2:	eb45 0303 	adc.w	r3, r5, r3
 80029e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a06:	4629      	mov	r1, r5
 8002a08:	008b      	lsls	r3, r1, #2
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a10:	4621      	mov	r1, r4
 8002a12:	008a      	lsls	r2, r1, #2
 8002a14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a18:	f7fe f8c6 	bl	8000ba8 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <UART_SetConfig+0x4e4>)
 8002a22:	fba3 2302 	umull	r2, r3, r3, r2
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	011c      	lsls	r4, r3, #4
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	1891      	adds	r1, r2, r2
 8002a42:	61b9      	str	r1, [r7, #24]
 8002a44:	415b      	adcs	r3, r3
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	1851      	adds	r1, r2, r1
 8002a50:	6139      	str	r1, [r7, #16]
 8002a52:	4649      	mov	r1, r9
 8002a54:	414b      	adcs	r3, r1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a64:	4659      	mov	r1, fp
 8002a66:	00cb      	lsls	r3, r1, #3
 8002a68:	4651      	mov	r1, sl
 8002a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a6e:	4651      	mov	r1, sl
 8002a70:	00ca      	lsls	r2, r1, #3
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	4642      	mov	r2, r8
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a80:	464b      	mov	r3, r9
 8002a82:	460a      	mov	r2, r1
 8002a84:	eb42 0303 	adc.w	r3, r2, r3
 8002a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	008b      	lsls	r3, r1, #2
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aae:	4641      	mov	r1, r8
 8002ab0:	008a      	lsls	r2, r1, #2
 8002ab2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ab6:	f7fe f877 	bl	8000ba8 <__aeabi_uldivmod>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <UART_SetConfig+0x4e4>)
 8002ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2264      	movs	r2, #100	; 0x64
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	1acb      	subs	r3, r1, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <UART_SetConfig+0x4e4>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	441c      	add	r4, r3
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	673b      	str	r3, [r7, #112]	; 0x70
 8002aea:	677a      	str	r2, [r7, #116]	; 0x74
 8002aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	1891      	adds	r1, r2, r2
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	415b      	adcs	r3, r3
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b00:	4641      	mov	r1, r8
 8002b02:	1851      	adds	r1, r2, r1
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	4649      	mov	r1, r9
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b18:	4659      	mov	r1, fp
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b22:	4651      	mov	r1, sl
 8002b24:	00ca      	lsls	r2, r1, #3
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b32:	464b      	mov	r3, r9
 8002b34:	460a      	mov	r2, r1
 8002b36:	eb42 0303 	adc.w	r3, r2, r3
 8002b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
 8002b46:	667a      	str	r2, [r7, #100]	; 0x64
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b54:	4649      	mov	r1, r9
 8002b56:	008b      	lsls	r3, r1, #2
 8002b58:	4641      	mov	r1, r8
 8002b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b5e:	4641      	mov	r1, r8
 8002b60:	008a      	lsls	r2, r1, #2
 8002b62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b66:	f7fe f81f 	bl	8000ba8 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <UART_SetConfig+0x4e4>)
 8002b70:	fba3 1302 	umull	r1, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	2164      	movs	r1, #100	; 0x64
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	3332      	adds	r3, #50	; 0x32
 8002b82:	4a08      	ldr	r2, [pc, #32]	; (8002ba4 <UART_SetConfig+0x4e4>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4422      	add	r2, r4
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba4:	51eb851f 	.word	0x51eb851f

08002ba8 <__cvt>:
 8002ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	ec55 4b10 	vmov	r4, r5, d0
 8002bb0:	2d00      	cmp	r5, #0
 8002bb2:	460e      	mov	r6, r1
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	bfbb      	ittet	lt
 8002bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002bbe:	461d      	movlt	r5, r3
 8002bc0:	2300      	movge	r3, #0
 8002bc2:	232d      	movlt	r3, #45	; 0x2d
 8002bc4:	700b      	strb	r3, [r1, #0]
 8002bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002bcc:	4691      	mov	r9, r2
 8002bce:	f023 0820 	bic.w	r8, r3, #32
 8002bd2:	bfbc      	itt	lt
 8002bd4:	4622      	movlt	r2, r4
 8002bd6:	4614      	movlt	r4, r2
 8002bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bdc:	d005      	beq.n	8002bea <__cvt+0x42>
 8002bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002be2:	d100      	bne.n	8002be6 <__cvt+0x3e>
 8002be4:	3601      	adds	r6, #1
 8002be6:	2102      	movs	r1, #2
 8002be8:	e000      	b.n	8002bec <__cvt+0x44>
 8002bea:	2103      	movs	r1, #3
 8002bec:	ab03      	add	r3, sp, #12
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	ab02      	add	r3, sp, #8
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	ec45 4b10 	vmov	d0, r4, r5
 8002bf8:	4653      	mov	r3, sl
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	f000 fe68 	bl	80038d0 <_dtoa_r>
 8002c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c04:	4607      	mov	r7, r0
 8002c06:	d102      	bne.n	8002c0e <__cvt+0x66>
 8002c08:	f019 0f01 	tst.w	r9, #1
 8002c0c:	d022      	beq.n	8002c54 <__cvt+0xac>
 8002c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c12:	eb07 0906 	add.w	r9, r7, r6
 8002c16:	d110      	bne.n	8002c3a <__cvt+0x92>
 8002c18:	783b      	ldrb	r3, [r7, #0]
 8002c1a:	2b30      	cmp	r3, #48	; 0x30
 8002c1c:	d10a      	bne.n	8002c34 <__cvt+0x8c>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2300      	movs	r3, #0
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c2a:	b918      	cbnz	r0, 8002c34 <__cvt+0x8c>
 8002c2c:	f1c6 0601 	rsb	r6, r6, #1
 8002c30:	f8ca 6000 	str.w	r6, [sl]
 8002c34:	f8da 3000 	ldr.w	r3, [sl]
 8002c38:	4499      	add	r9, r3
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c46:	b108      	cbz	r0, 8002c4c <__cvt+0xa4>
 8002c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8002c4c:	2230      	movs	r2, #48	; 0x30
 8002c4e:	9b03      	ldr	r3, [sp, #12]
 8002c50:	454b      	cmp	r3, r9
 8002c52:	d307      	bcc.n	8002c64 <__cvt+0xbc>
 8002c54:	9b03      	ldr	r3, [sp, #12]
 8002c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c58:	1bdb      	subs	r3, r3, r7
 8002c5a:	4638      	mov	r0, r7
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	b004      	add	sp, #16
 8002c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	9103      	str	r1, [sp, #12]
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e7f0      	b.n	8002c4e <__cvt+0xa6>

08002c6c <__exponent>:
 8002c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2900      	cmp	r1, #0
 8002c72:	bfb8      	it	lt
 8002c74:	4249      	neglt	r1, r1
 8002c76:	f803 2b02 	strb.w	r2, [r3], #2
 8002c7a:	bfb4      	ite	lt
 8002c7c:	222d      	movlt	r2, #45	; 0x2d
 8002c7e:	222b      	movge	r2, #43	; 0x2b
 8002c80:	2909      	cmp	r1, #9
 8002c82:	7042      	strb	r2, [r0, #1]
 8002c84:	dd2a      	ble.n	8002cdc <__exponent+0x70>
 8002c86:	f10d 0207 	add.w	r2, sp, #7
 8002c8a:	4617      	mov	r7, r2
 8002c8c:	260a      	movs	r6, #10
 8002c8e:	4694      	mov	ip, r2
 8002c90:	fb91 f5f6 	sdiv	r5, r1, r6
 8002c94:	fb06 1415 	mls	r4, r6, r5, r1
 8002c98:	3430      	adds	r4, #48	; 0x30
 8002c9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	2c63      	cmp	r4, #99	; 0x63
 8002ca2:	f102 32ff 	add.w	r2, r2, #4294967295
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	dcf1      	bgt.n	8002c8e <__exponent+0x22>
 8002caa:	3130      	adds	r1, #48	; 0x30
 8002cac:	f1ac 0402 	sub.w	r4, ip, #2
 8002cb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002cb4:	1c41      	adds	r1, r0, #1
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	42ba      	cmp	r2, r7
 8002cba:	d30a      	bcc.n	8002cd2 <__exponent+0x66>
 8002cbc:	f10d 0209 	add.w	r2, sp, #9
 8002cc0:	eba2 020c 	sub.w	r2, r2, ip
 8002cc4:	42bc      	cmp	r4, r7
 8002cc6:	bf88      	it	hi
 8002cc8:	2200      	movhi	r2, #0
 8002cca:	4413      	add	r3, r2
 8002ccc:	1a18      	subs	r0, r3, r0
 8002cce:	b003      	add	sp, #12
 8002cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002cd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002cda:	e7ed      	b.n	8002cb8 <__exponent+0x4c>
 8002cdc:	2330      	movs	r3, #48	; 0x30
 8002cde:	3130      	adds	r1, #48	; 0x30
 8002ce0:	7083      	strb	r3, [r0, #2]
 8002ce2:	70c1      	strb	r1, [r0, #3]
 8002ce4:	1d03      	adds	r3, r0, #4
 8002ce6:	e7f1      	b.n	8002ccc <__exponent+0x60>

08002ce8 <_printf_float>:
 8002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cec:	ed2d 8b02 	vpush	{d8}
 8002cf0:	b08d      	sub	sp, #52	; 0x34
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002cf8:	4616      	mov	r6, r2
 8002cfa:	461f      	mov	r7, r3
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	f000 fce7 	bl	80036d0 <_localeconv_r>
 8002d02:	f8d0 a000 	ldr.w	sl, [r0]
 8002d06:	4650      	mov	r0, sl
 8002d08:	f7fd fab2 	bl	8000270 <strlen>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	9305      	str	r3, [sp, #20]
 8002d14:	f8d8 3000 	ldr.w	r3, [r8]
 8002d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002d1c:	3307      	adds	r3, #7
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	f103 0208 	add.w	r2, r3, #8
 8002d26:	f8c8 2000 	str.w	r2, [r8]
 8002d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002d32:	9307      	str	r3, [sp, #28]
 8002d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d38:	ee08 0a10 	vmov	s16, r0
 8002d3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d44:	4b9e      	ldr	r3, [pc, #632]	; (8002fc0 <_printf_float+0x2d8>)
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4a:	f7fd feef 	bl	8000b2c <__aeabi_dcmpun>
 8002d4e:	bb88      	cbnz	r0, 8002db4 <_printf_float+0xcc>
 8002d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <_printf_float+0x2d8>)
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5a:	f7fd fec9 	bl	8000af0 <__aeabi_dcmple>
 8002d5e:	bb48      	cbnz	r0, 8002db4 <_printf_float+0xcc>
 8002d60:	2200      	movs	r2, #0
 8002d62:	2300      	movs	r3, #0
 8002d64:	4640      	mov	r0, r8
 8002d66:	4649      	mov	r1, r9
 8002d68:	f7fd feb8 	bl	8000adc <__aeabi_dcmplt>
 8002d6c:	b110      	cbz	r0, 8002d74 <_printf_float+0x8c>
 8002d6e:	232d      	movs	r3, #45	; 0x2d
 8002d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d74:	4a93      	ldr	r2, [pc, #588]	; (8002fc4 <_printf_float+0x2dc>)
 8002d76:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <_printf_float+0x2e0>)
 8002d78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002d7c:	bf94      	ite	ls
 8002d7e:	4690      	movls	r8, r2
 8002d80:	4698      	movhi	r8, r3
 8002d82:	2303      	movs	r3, #3
 8002d84:	6123      	str	r3, [r4, #16]
 8002d86:	9b05      	ldr	r3, [sp, #20]
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	f04f 0900 	mov.w	r9, #0
 8002d92:	9700      	str	r7, [sp, #0]
 8002d94:	4633      	mov	r3, r6
 8002d96:	aa0b      	add	r2, sp, #44	; 0x2c
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f9da 	bl	8003154 <_printf_common>
 8002da0:	3001      	adds	r0, #1
 8002da2:	f040 8090 	bne.w	8002ec6 <_printf_float+0x1de>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	b00d      	add	sp, #52	; 0x34
 8002dac:	ecbd 8b02 	vpop	{d8}
 8002db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	4640      	mov	r0, r8
 8002dba:	4649      	mov	r1, r9
 8002dbc:	f7fd feb6 	bl	8000b2c <__aeabi_dcmpun>
 8002dc0:	b140      	cbz	r0, 8002dd4 <_printf_float+0xec>
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bfbc      	itt	lt
 8002dc8:	232d      	movlt	r3, #45	; 0x2d
 8002dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <_printf_float+0x2e4>)
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <_printf_float+0x2e8>)
 8002dd2:	e7d1      	b.n	8002d78 <_printf_float+0x90>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002dda:	9206      	str	r2, [sp, #24]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	d13f      	bne.n	8002e60 <_printf_float+0x178>
 8002de0:	2306      	movs	r3, #6
 8002de2:	6063      	str	r3, [r4, #4]
 8002de4:	9b05      	ldr	r3, [sp, #20]
 8002de6:	6861      	ldr	r1, [r4, #4]
 8002de8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dec:	2300      	movs	r3, #0
 8002dee:	9303      	str	r3, [sp, #12]
 8002df0:	ab0a      	add	r3, sp, #40	; 0x28
 8002df2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002df6:	ab09      	add	r3, sp, #36	; 0x24
 8002df8:	ec49 8b10 	vmov	d0, r8, r9
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6022      	str	r2, [r4, #0]
 8002e00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002e04:	4628      	mov	r0, r5
 8002e06:	f7ff fecf 	bl	8002ba8 <__cvt>
 8002e0a:	9b06      	ldr	r3, [sp, #24]
 8002e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e0e:	2b47      	cmp	r3, #71	; 0x47
 8002e10:	4680      	mov	r8, r0
 8002e12:	d108      	bne.n	8002e26 <_printf_float+0x13e>
 8002e14:	1cc8      	adds	r0, r1, #3
 8002e16:	db02      	blt.n	8002e1e <_printf_float+0x136>
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	4299      	cmp	r1, r3
 8002e1c:	dd41      	ble.n	8002ea2 <_printf_float+0x1ba>
 8002e1e:	f1ab 0302 	sub.w	r3, fp, #2
 8002e22:	fa5f fb83 	uxtb.w	fp, r3
 8002e26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e2a:	d820      	bhi.n	8002e6e <_printf_float+0x186>
 8002e2c:	3901      	subs	r1, #1
 8002e2e:	465a      	mov	r2, fp
 8002e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e34:	9109      	str	r1, [sp, #36]	; 0x24
 8002e36:	f7ff ff19 	bl	8002c6c <__exponent>
 8002e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e3c:	1813      	adds	r3, r2, r0
 8002e3e:	2a01      	cmp	r2, #1
 8002e40:	4681      	mov	r9, r0
 8002e42:	6123      	str	r3, [r4, #16]
 8002e44:	dc02      	bgt.n	8002e4c <_printf_float+0x164>
 8002e46:	6822      	ldr	r2, [r4, #0]
 8002e48:	07d2      	lsls	r2, r2, #31
 8002e4a:	d501      	bpl.n	8002e50 <_printf_float+0x168>
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	6123      	str	r3, [r4, #16]
 8002e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d09c      	beq.n	8002d92 <_printf_float+0xaa>
 8002e58:	232d      	movs	r3, #45	; 0x2d
 8002e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e5e:	e798      	b.n	8002d92 <_printf_float+0xaa>
 8002e60:	9a06      	ldr	r2, [sp, #24]
 8002e62:	2a47      	cmp	r2, #71	; 0x47
 8002e64:	d1be      	bne.n	8002de4 <_printf_float+0xfc>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1bc      	bne.n	8002de4 <_printf_float+0xfc>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e7b9      	b.n	8002de2 <_printf_float+0xfa>
 8002e6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002e72:	d118      	bne.n	8002ea6 <_printf_float+0x1be>
 8002e74:	2900      	cmp	r1, #0
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	dd0b      	ble.n	8002e92 <_printf_float+0x1aa>
 8002e7a:	6121      	str	r1, [r4, #16]
 8002e7c:	b913      	cbnz	r3, 8002e84 <_printf_float+0x19c>
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	07d0      	lsls	r0, r2, #31
 8002e82:	d502      	bpl.n	8002e8a <_printf_float+0x1a2>
 8002e84:	3301      	adds	r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e8c:	f04f 0900 	mov.w	r9, #0
 8002e90:	e7de      	b.n	8002e50 <_printf_float+0x168>
 8002e92:	b913      	cbnz	r3, 8002e9a <_printf_float+0x1b2>
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	07d2      	lsls	r2, r2, #31
 8002e98:	d501      	bpl.n	8002e9e <_printf_float+0x1b6>
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	e7f4      	b.n	8002e88 <_printf_float+0x1a0>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e7f2      	b.n	8002e88 <_printf_float+0x1a0>
 8002ea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	db05      	blt.n	8002eb8 <_printf_float+0x1d0>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	6121      	str	r1, [r4, #16]
 8002eb0:	07d8      	lsls	r0, r3, #31
 8002eb2:	d5ea      	bpl.n	8002e8a <_printf_float+0x1a2>
 8002eb4:	1c4b      	adds	r3, r1, #1
 8002eb6:	e7e7      	b.n	8002e88 <_printf_float+0x1a0>
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	bfd4      	ite	le
 8002ebc:	f1c1 0202 	rsble	r2, r1, #2
 8002ec0:	2201      	movgt	r2, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	e7e0      	b.n	8002e88 <_printf_float+0x1a0>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	055a      	lsls	r2, r3, #21
 8002eca:	d407      	bmi.n	8002edc <_printf_float+0x1f4>
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	4642      	mov	r2, r8
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	47b8      	blx	r7
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	d12c      	bne.n	8002f34 <_printf_float+0x24c>
 8002eda:	e764      	b.n	8002da6 <_printf_float+0xbe>
 8002edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002ee0:	f240 80e0 	bls.w	80030a4 <_printf_float+0x3bc>
 8002ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2300      	movs	r3, #0
 8002eec:	f7fd fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d034      	beq.n	8002f5e <_printf_float+0x276>
 8002ef4:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <_printf_float+0x2ec>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	4631      	mov	r1, r6
 8002efa:	4628      	mov	r0, r5
 8002efc:	47b8      	blx	r7
 8002efe:	3001      	adds	r0, #1
 8002f00:	f43f af51 	beq.w	8002da6 <_printf_float+0xbe>
 8002f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	db02      	blt.n	8002f12 <_printf_float+0x22a>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	07d8      	lsls	r0, r3, #31
 8002f10:	d510      	bpl.n	8002f34 <_printf_float+0x24c>
 8002f12:	ee18 3a10 	vmov	r3, s16
 8002f16:	4652      	mov	r2, sl
 8002f18:	4631      	mov	r1, r6
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	47b8      	blx	r7
 8002f1e:	3001      	adds	r0, #1
 8002f20:	f43f af41 	beq.w	8002da6 <_printf_float+0xbe>
 8002f24:	f04f 0800 	mov.w	r8, #0
 8002f28:	f104 091a 	add.w	r9, r4, #26
 8002f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4543      	cmp	r3, r8
 8002f32:	dc09      	bgt.n	8002f48 <_printf_float+0x260>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	079b      	lsls	r3, r3, #30
 8002f38:	f100 8107 	bmi.w	800314a <_printf_float+0x462>
 8002f3c:	68e0      	ldr	r0, [r4, #12]
 8002f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f40:	4298      	cmp	r0, r3
 8002f42:	bfb8      	it	lt
 8002f44:	4618      	movlt	r0, r3
 8002f46:	e730      	b.n	8002daa <_printf_float+0xc2>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	464a      	mov	r2, r9
 8002f4c:	4631      	mov	r1, r6
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47b8      	blx	r7
 8002f52:	3001      	adds	r0, #1
 8002f54:	f43f af27 	beq.w	8002da6 <_printf_float+0xbe>
 8002f58:	f108 0801 	add.w	r8, r8, #1
 8002f5c:	e7e6      	b.n	8002f2c <_printf_float+0x244>
 8002f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	dc39      	bgt.n	8002fd8 <_printf_float+0x2f0>
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <_printf_float+0x2ec>)
 8002f66:	2301      	movs	r3, #1
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	47b8      	blx	r7
 8002f6e:	3001      	adds	r0, #1
 8002f70:	f43f af19 	beq.w	8002da6 <_printf_float+0xbe>
 8002f74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <_printf_float+0x29a>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	07d9      	lsls	r1, r3, #31
 8002f80:	d5d8      	bpl.n	8002f34 <_printf_float+0x24c>
 8002f82:	ee18 3a10 	vmov	r3, s16
 8002f86:	4652      	mov	r2, sl
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	47b8      	blx	r7
 8002f8e:	3001      	adds	r0, #1
 8002f90:	f43f af09 	beq.w	8002da6 <_printf_float+0xbe>
 8002f94:	f04f 0900 	mov.w	r9, #0
 8002f98:	f104 0a1a 	add.w	sl, r4, #26
 8002f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9e:	425b      	negs	r3, r3
 8002fa0:	454b      	cmp	r3, r9
 8002fa2:	dc01      	bgt.n	8002fa8 <_printf_float+0x2c0>
 8002fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fa6:	e792      	b.n	8002ece <_printf_float+0x1e6>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4652      	mov	r2, sl
 8002fac:	4631      	mov	r1, r6
 8002fae:	4628      	mov	r0, r5
 8002fb0:	47b8      	blx	r7
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	f43f aef7 	beq.w	8002da6 <_printf_float+0xbe>
 8002fb8:	f109 0901 	add.w	r9, r9, #1
 8002fbc:	e7ee      	b.n	8002f9c <_printf_float+0x2b4>
 8002fbe:	bf00      	nop
 8002fc0:	7fefffff 	.word	0x7fefffff
 8002fc4:	080058f0 	.word	0x080058f0
 8002fc8:	080058f4 	.word	0x080058f4
 8002fcc:	080058f8 	.word	0x080058f8
 8002fd0:	080058fc 	.word	0x080058fc
 8002fd4:	08005900 	.word	0x08005900
 8002fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bfa8      	it	ge
 8002fe0:	461a      	movge	r2, r3
 8002fe2:	2a00      	cmp	r2, #0
 8002fe4:	4691      	mov	r9, r2
 8002fe6:	dc37      	bgt.n	8003058 <_printf_float+0x370>
 8002fe8:	f04f 0b00 	mov.w	fp, #0
 8002fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ff0:	f104 021a 	add.w	r2, r4, #26
 8002ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ff6:	9305      	str	r3, [sp, #20]
 8002ff8:	eba3 0309 	sub.w	r3, r3, r9
 8002ffc:	455b      	cmp	r3, fp
 8002ffe:	dc33      	bgt.n	8003068 <_printf_float+0x380>
 8003000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003004:	429a      	cmp	r2, r3
 8003006:	db3b      	blt.n	8003080 <_printf_float+0x398>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	07da      	lsls	r2, r3, #31
 800300c:	d438      	bmi.n	8003080 <_printf_float+0x398>
 800300e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003012:	eba2 0903 	sub.w	r9, r2, r3
 8003016:	9b05      	ldr	r3, [sp, #20]
 8003018:	1ad2      	subs	r2, r2, r3
 800301a:	4591      	cmp	r9, r2
 800301c:	bfa8      	it	ge
 800301e:	4691      	movge	r9, r2
 8003020:	f1b9 0f00 	cmp.w	r9, #0
 8003024:	dc35      	bgt.n	8003092 <_printf_float+0x3aa>
 8003026:	f04f 0800 	mov.w	r8, #0
 800302a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800302e:	f104 0a1a 	add.w	sl, r4, #26
 8003032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	eba3 0309 	sub.w	r3, r3, r9
 800303c:	4543      	cmp	r3, r8
 800303e:	f77f af79 	ble.w	8002f34 <_printf_float+0x24c>
 8003042:	2301      	movs	r3, #1
 8003044:	4652      	mov	r2, sl
 8003046:	4631      	mov	r1, r6
 8003048:	4628      	mov	r0, r5
 800304a:	47b8      	blx	r7
 800304c:	3001      	adds	r0, #1
 800304e:	f43f aeaa 	beq.w	8002da6 <_printf_float+0xbe>
 8003052:	f108 0801 	add.w	r8, r8, #1
 8003056:	e7ec      	b.n	8003032 <_printf_float+0x34a>
 8003058:	4613      	mov	r3, r2
 800305a:	4631      	mov	r1, r6
 800305c:	4642      	mov	r2, r8
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	d1c0      	bne.n	8002fe8 <_printf_float+0x300>
 8003066:	e69e      	b.n	8002da6 <_printf_float+0xbe>
 8003068:	2301      	movs	r3, #1
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	9205      	str	r2, [sp, #20]
 8003070:	47b8      	blx	r7
 8003072:	3001      	adds	r0, #1
 8003074:	f43f ae97 	beq.w	8002da6 <_printf_float+0xbe>
 8003078:	9a05      	ldr	r2, [sp, #20]
 800307a:	f10b 0b01 	add.w	fp, fp, #1
 800307e:	e7b9      	b.n	8002ff4 <_printf_float+0x30c>
 8003080:	ee18 3a10 	vmov	r3, s16
 8003084:	4652      	mov	r2, sl
 8003086:	4631      	mov	r1, r6
 8003088:	4628      	mov	r0, r5
 800308a:	47b8      	blx	r7
 800308c:	3001      	adds	r0, #1
 800308e:	d1be      	bne.n	800300e <_printf_float+0x326>
 8003090:	e689      	b.n	8002da6 <_printf_float+0xbe>
 8003092:	9a05      	ldr	r2, [sp, #20]
 8003094:	464b      	mov	r3, r9
 8003096:	4442      	add	r2, r8
 8003098:	4631      	mov	r1, r6
 800309a:	4628      	mov	r0, r5
 800309c:	47b8      	blx	r7
 800309e:	3001      	adds	r0, #1
 80030a0:	d1c1      	bne.n	8003026 <_printf_float+0x33e>
 80030a2:	e680      	b.n	8002da6 <_printf_float+0xbe>
 80030a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030a6:	2a01      	cmp	r2, #1
 80030a8:	dc01      	bgt.n	80030ae <_printf_float+0x3c6>
 80030aa:	07db      	lsls	r3, r3, #31
 80030ac:	d53a      	bpl.n	8003124 <_printf_float+0x43c>
 80030ae:	2301      	movs	r3, #1
 80030b0:	4642      	mov	r2, r8
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f ae74 	beq.w	8002da6 <_printf_float+0xbe>
 80030be:	ee18 3a10 	vmov	r3, s16
 80030c2:	4652      	mov	r2, sl
 80030c4:	4631      	mov	r1, r6
 80030c6:	4628      	mov	r0, r5
 80030c8:	47b8      	blx	r7
 80030ca:	3001      	adds	r0, #1
 80030cc:	f43f ae6b 	beq.w	8002da6 <_printf_float+0xbe>
 80030d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030d4:	2200      	movs	r2, #0
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80030dc:	f7fd fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80030e0:	b9d8      	cbnz	r0, 800311a <_printf_float+0x432>
 80030e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80030e6:	f108 0201 	add.w	r2, r8, #1
 80030ea:	4631      	mov	r1, r6
 80030ec:	4628      	mov	r0, r5
 80030ee:	47b8      	blx	r7
 80030f0:	3001      	adds	r0, #1
 80030f2:	d10e      	bne.n	8003112 <_printf_float+0x42a>
 80030f4:	e657      	b.n	8002da6 <_printf_float+0xbe>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4652      	mov	r2, sl
 80030fa:	4631      	mov	r1, r6
 80030fc:	4628      	mov	r0, r5
 80030fe:	47b8      	blx	r7
 8003100:	3001      	adds	r0, #1
 8003102:	f43f ae50 	beq.w	8002da6 <_printf_float+0xbe>
 8003106:	f108 0801 	add.w	r8, r8, #1
 800310a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	4543      	cmp	r3, r8
 8003110:	dcf1      	bgt.n	80030f6 <_printf_float+0x40e>
 8003112:	464b      	mov	r3, r9
 8003114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003118:	e6da      	b.n	8002ed0 <_printf_float+0x1e8>
 800311a:	f04f 0800 	mov.w	r8, #0
 800311e:	f104 0a1a 	add.w	sl, r4, #26
 8003122:	e7f2      	b.n	800310a <_printf_float+0x422>
 8003124:	2301      	movs	r3, #1
 8003126:	4642      	mov	r2, r8
 8003128:	e7df      	b.n	80030ea <_printf_float+0x402>
 800312a:	2301      	movs	r3, #1
 800312c:	464a      	mov	r2, r9
 800312e:	4631      	mov	r1, r6
 8003130:	4628      	mov	r0, r5
 8003132:	47b8      	blx	r7
 8003134:	3001      	adds	r0, #1
 8003136:	f43f ae36 	beq.w	8002da6 <_printf_float+0xbe>
 800313a:	f108 0801 	add.w	r8, r8, #1
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003142:	1a5b      	subs	r3, r3, r1
 8003144:	4543      	cmp	r3, r8
 8003146:	dcf0      	bgt.n	800312a <_printf_float+0x442>
 8003148:	e6f8      	b.n	8002f3c <_printf_float+0x254>
 800314a:	f04f 0800 	mov.w	r8, #0
 800314e:	f104 0919 	add.w	r9, r4, #25
 8003152:	e7f4      	b.n	800313e <_printf_float+0x456>

08003154 <_printf_common>:
 8003154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	4616      	mov	r6, r2
 800315a:	4699      	mov	r9, r3
 800315c:	688a      	ldr	r2, [r1, #8]
 800315e:	690b      	ldr	r3, [r1, #16]
 8003160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003164:	4293      	cmp	r3, r2
 8003166:	bfb8      	it	lt
 8003168:	4613      	movlt	r3, r2
 800316a:	6033      	str	r3, [r6, #0]
 800316c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003170:	4607      	mov	r7, r0
 8003172:	460c      	mov	r4, r1
 8003174:	b10a      	cbz	r2, 800317a <_printf_common+0x26>
 8003176:	3301      	adds	r3, #1
 8003178:	6033      	str	r3, [r6, #0]
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	0699      	lsls	r1, r3, #26
 800317e:	bf42      	ittt	mi
 8003180:	6833      	ldrmi	r3, [r6, #0]
 8003182:	3302      	addmi	r3, #2
 8003184:	6033      	strmi	r3, [r6, #0]
 8003186:	6825      	ldr	r5, [r4, #0]
 8003188:	f015 0506 	ands.w	r5, r5, #6
 800318c:	d106      	bne.n	800319c <_printf_common+0x48>
 800318e:	f104 0a19 	add.w	sl, r4, #25
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	6832      	ldr	r2, [r6, #0]
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	42ab      	cmp	r3, r5
 800319a:	dc26      	bgt.n	80031ea <_printf_common+0x96>
 800319c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031a0:	1e13      	subs	r3, r2, #0
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	bf18      	it	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	0692      	lsls	r2, r2, #26
 80031aa:	d42b      	bmi.n	8003204 <_printf_common+0xb0>
 80031ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031b0:	4649      	mov	r1, r9
 80031b2:	4638      	mov	r0, r7
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d01e      	beq.n	80031f8 <_printf_common+0xa4>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	6922      	ldr	r2, [r4, #16]
 80031be:	f003 0306 	and.w	r3, r3, #6
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf02      	ittt	eq
 80031c6:	68e5      	ldreq	r5, [r4, #12]
 80031c8:	6833      	ldreq	r3, [r6, #0]
 80031ca:	1aed      	subeq	r5, r5, r3
 80031cc:	68a3      	ldr	r3, [r4, #8]
 80031ce:	bf0c      	ite	eq
 80031d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031d4:	2500      	movne	r5, #0
 80031d6:	4293      	cmp	r3, r2
 80031d8:	bfc4      	itt	gt
 80031da:	1a9b      	subgt	r3, r3, r2
 80031dc:	18ed      	addgt	r5, r5, r3
 80031de:	2600      	movs	r6, #0
 80031e0:	341a      	adds	r4, #26
 80031e2:	42b5      	cmp	r5, r6
 80031e4:	d11a      	bne.n	800321c <_printf_common+0xc8>
 80031e6:	2000      	movs	r0, #0
 80031e8:	e008      	b.n	80031fc <_printf_common+0xa8>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4652      	mov	r2, sl
 80031ee:	4649      	mov	r1, r9
 80031f0:	4638      	mov	r0, r7
 80031f2:	47c0      	blx	r8
 80031f4:	3001      	adds	r0, #1
 80031f6:	d103      	bne.n	8003200 <_printf_common+0xac>
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003200:	3501      	adds	r5, #1
 8003202:	e7c6      	b.n	8003192 <_printf_common+0x3e>
 8003204:	18e1      	adds	r1, r4, r3
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	2030      	movs	r0, #48	; 0x30
 800320a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800320e:	4422      	add	r2, r4
 8003210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003218:	3302      	adds	r3, #2
 800321a:	e7c7      	b.n	80031ac <_printf_common+0x58>
 800321c:	2301      	movs	r3, #1
 800321e:	4622      	mov	r2, r4
 8003220:	4649      	mov	r1, r9
 8003222:	4638      	mov	r0, r7
 8003224:	47c0      	blx	r8
 8003226:	3001      	adds	r0, #1
 8003228:	d0e6      	beq.n	80031f8 <_printf_common+0xa4>
 800322a:	3601      	adds	r6, #1
 800322c:	e7d9      	b.n	80031e2 <_printf_common+0x8e>
	...

08003230 <_printf_i>:
 8003230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003234:	7e0f      	ldrb	r7, [r1, #24]
 8003236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003238:	2f78      	cmp	r7, #120	; 0x78
 800323a:	4691      	mov	r9, r2
 800323c:	4680      	mov	r8, r0
 800323e:	460c      	mov	r4, r1
 8003240:	469a      	mov	sl, r3
 8003242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003246:	d807      	bhi.n	8003258 <_printf_i+0x28>
 8003248:	2f62      	cmp	r7, #98	; 0x62
 800324a:	d80a      	bhi.n	8003262 <_printf_i+0x32>
 800324c:	2f00      	cmp	r7, #0
 800324e:	f000 80d4 	beq.w	80033fa <_printf_i+0x1ca>
 8003252:	2f58      	cmp	r7, #88	; 0x58
 8003254:	f000 80c0 	beq.w	80033d8 <_printf_i+0x1a8>
 8003258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800325c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003260:	e03a      	b.n	80032d8 <_printf_i+0xa8>
 8003262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003266:	2b15      	cmp	r3, #21
 8003268:	d8f6      	bhi.n	8003258 <_printf_i+0x28>
 800326a:	a101      	add	r1, pc, #4	; (adr r1, 8003270 <_printf_i+0x40>)
 800326c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003270:	080032c9 	.word	0x080032c9
 8003274:	080032dd 	.word	0x080032dd
 8003278:	08003259 	.word	0x08003259
 800327c:	08003259 	.word	0x08003259
 8003280:	08003259 	.word	0x08003259
 8003284:	08003259 	.word	0x08003259
 8003288:	080032dd 	.word	0x080032dd
 800328c:	08003259 	.word	0x08003259
 8003290:	08003259 	.word	0x08003259
 8003294:	08003259 	.word	0x08003259
 8003298:	08003259 	.word	0x08003259
 800329c:	080033e1 	.word	0x080033e1
 80032a0:	08003309 	.word	0x08003309
 80032a4:	0800339b 	.word	0x0800339b
 80032a8:	08003259 	.word	0x08003259
 80032ac:	08003259 	.word	0x08003259
 80032b0:	08003403 	.word	0x08003403
 80032b4:	08003259 	.word	0x08003259
 80032b8:	08003309 	.word	0x08003309
 80032bc:	08003259 	.word	0x08003259
 80032c0:	08003259 	.word	0x08003259
 80032c4:	080033a3 	.word	0x080033a3
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	602a      	str	r2, [r5, #0]
 80032d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032d8:	2301      	movs	r3, #1
 80032da:	e09f      	b.n	800341c <_printf_i+0x1ec>
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	0607      	lsls	r7, r0, #24
 80032e2:	f103 0104 	add.w	r1, r3, #4
 80032e6:	6029      	str	r1, [r5, #0]
 80032e8:	d501      	bpl.n	80032ee <_printf_i+0xbe>
 80032ea:	681e      	ldr	r6, [r3, #0]
 80032ec:	e003      	b.n	80032f6 <_printf_i+0xc6>
 80032ee:	0646      	lsls	r6, r0, #25
 80032f0:	d5fb      	bpl.n	80032ea <_printf_i+0xba>
 80032f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	da03      	bge.n	8003302 <_printf_i+0xd2>
 80032fa:	232d      	movs	r3, #45	; 0x2d
 80032fc:	4276      	negs	r6, r6
 80032fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003302:	485a      	ldr	r0, [pc, #360]	; (800346c <_printf_i+0x23c>)
 8003304:	230a      	movs	r3, #10
 8003306:	e012      	b.n	800332e <_printf_i+0xfe>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	1d19      	adds	r1, r3, #4
 800330e:	6029      	str	r1, [r5, #0]
 8003310:	0605      	lsls	r5, r0, #24
 8003312:	d501      	bpl.n	8003318 <_printf_i+0xe8>
 8003314:	681e      	ldr	r6, [r3, #0]
 8003316:	e002      	b.n	800331e <_printf_i+0xee>
 8003318:	0641      	lsls	r1, r0, #25
 800331a:	d5fb      	bpl.n	8003314 <_printf_i+0xe4>
 800331c:	881e      	ldrh	r6, [r3, #0]
 800331e:	4853      	ldr	r0, [pc, #332]	; (800346c <_printf_i+0x23c>)
 8003320:	2f6f      	cmp	r7, #111	; 0x6f
 8003322:	bf0c      	ite	eq
 8003324:	2308      	moveq	r3, #8
 8003326:	230a      	movne	r3, #10
 8003328:	2100      	movs	r1, #0
 800332a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800332e:	6865      	ldr	r5, [r4, #4]
 8003330:	60a5      	str	r5, [r4, #8]
 8003332:	2d00      	cmp	r5, #0
 8003334:	bfa2      	ittt	ge
 8003336:	6821      	ldrge	r1, [r4, #0]
 8003338:	f021 0104 	bicge.w	r1, r1, #4
 800333c:	6021      	strge	r1, [r4, #0]
 800333e:	b90e      	cbnz	r6, 8003344 <_printf_i+0x114>
 8003340:	2d00      	cmp	r5, #0
 8003342:	d04b      	beq.n	80033dc <_printf_i+0x1ac>
 8003344:	4615      	mov	r5, r2
 8003346:	fbb6 f1f3 	udiv	r1, r6, r3
 800334a:	fb03 6711 	mls	r7, r3, r1, r6
 800334e:	5dc7      	ldrb	r7, [r0, r7]
 8003350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003354:	4637      	mov	r7, r6
 8003356:	42bb      	cmp	r3, r7
 8003358:	460e      	mov	r6, r1
 800335a:	d9f4      	bls.n	8003346 <_printf_i+0x116>
 800335c:	2b08      	cmp	r3, #8
 800335e:	d10b      	bne.n	8003378 <_printf_i+0x148>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	07de      	lsls	r6, r3, #31
 8003364:	d508      	bpl.n	8003378 <_printf_i+0x148>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	6861      	ldr	r1, [r4, #4]
 800336a:	4299      	cmp	r1, r3
 800336c:	bfde      	ittt	le
 800336e:	2330      	movle	r3, #48	; 0x30
 8003370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003378:	1b52      	subs	r2, r2, r5
 800337a:	6122      	str	r2, [r4, #16]
 800337c:	f8cd a000 	str.w	sl, [sp]
 8003380:	464b      	mov	r3, r9
 8003382:	aa03      	add	r2, sp, #12
 8003384:	4621      	mov	r1, r4
 8003386:	4640      	mov	r0, r8
 8003388:	f7ff fee4 	bl	8003154 <_printf_common>
 800338c:	3001      	adds	r0, #1
 800338e:	d14a      	bne.n	8003426 <_printf_i+0x1f6>
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	b004      	add	sp, #16
 8003396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	4833      	ldr	r0, [pc, #204]	; (8003470 <_printf_i+0x240>)
 80033a4:	2778      	movs	r7, #120	; 0x78
 80033a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	6829      	ldr	r1, [r5, #0]
 80033ae:	061f      	lsls	r7, r3, #24
 80033b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80033b4:	d402      	bmi.n	80033bc <_printf_i+0x18c>
 80033b6:	065f      	lsls	r7, r3, #25
 80033b8:	bf48      	it	mi
 80033ba:	b2b6      	uxthmi	r6, r6
 80033bc:	07df      	lsls	r7, r3, #31
 80033be:	bf48      	it	mi
 80033c0:	f043 0320 	orrmi.w	r3, r3, #32
 80033c4:	6029      	str	r1, [r5, #0]
 80033c6:	bf48      	it	mi
 80033c8:	6023      	strmi	r3, [r4, #0]
 80033ca:	b91e      	cbnz	r6, 80033d4 <_printf_i+0x1a4>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	2310      	movs	r3, #16
 80033d6:	e7a7      	b.n	8003328 <_printf_i+0xf8>
 80033d8:	4824      	ldr	r0, [pc, #144]	; (800346c <_printf_i+0x23c>)
 80033da:	e7e4      	b.n	80033a6 <_printf_i+0x176>
 80033dc:	4615      	mov	r5, r2
 80033de:	e7bd      	b.n	800335c <_printf_i+0x12c>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	6826      	ldr	r6, [r4, #0]
 80033e4:	6961      	ldr	r1, [r4, #20]
 80033e6:	1d18      	adds	r0, r3, #4
 80033e8:	6028      	str	r0, [r5, #0]
 80033ea:	0635      	lsls	r5, r6, #24
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	d501      	bpl.n	80033f4 <_printf_i+0x1c4>
 80033f0:	6019      	str	r1, [r3, #0]
 80033f2:	e002      	b.n	80033fa <_printf_i+0x1ca>
 80033f4:	0670      	lsls	r0, r6, #25
 80033f6:	d5fb      	bpl.n	80033f0 <_printf_i+0x1c0>
 80033f8:	8019      	strh	r1, [r3, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	6123      	str	r3, [r4, #16]
 80033fe:	4615      	mov	r5, r2
 8003400:	e7bc      	b.n	800337c <_printf_i+0x14c>
 8003402:	682b      	ldr	r3, [r5, #0]
 8003404:	1d1a      	adds	r2, r3, #4
 8003406:	602a      	str	r2, [r5, #0]
 8003408:	681d      	ldr	r5, [r3, #0]
 800340a:	6862      	ldr	r2, [r4, #4]
 800340c:	2100      	movs	r1, #0
 800340e:	4628      	mov	r0, r5
 8003410:	f7fc fede 	bl	80001d0 <memchr>
 8003414:	b108      	cbz	r0, 800341a <_printf_i+0x1ea>
 8003416:	1b40      	subs	r0, r0, r5
 8003418:	6060      	str	r0, [r4, #4]
 800341a:	6863      	ldr	r3, [r4, #4]
 800341c:	6123      	str	r3, [r4, #16]
 800341e:	2300      	movs	r3, #0
 8003420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003424:	e7aa      	b.n	800337c <_printf_i+0x14c>
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	462a      	mov	r2, r5
 800342a:	4649      	mov	r1, r9
 800342c:	4640      	mov	r0, r8
 800342e:	47d0      	blx	sl
 8003430:	3001      	adds	r0, #1
 8003432:	d0ad      	beq.n	8003390 <_printf_i+0x160>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	079b      	lsls	r3, r3, #30
 8003438:	d413      	bmi.n	8003462 <_printf_i+0x232>
 800343a:	68e0      	ldr	r0, [r4, #12]
 800343c:	9b03      	ldr	r3, [sp, #12]
 800343e:	4298      	cmp	r0, r3
 8003440:	bfb8      	it	lt
 8003442:	4618      	movlt	r0, r3
 8003444:	e7a6      	b.n	8003394 <_printf_i+0x164>
 8003446:	2301      	movs	r3, #1
 8003448:	4632      	mov	r2, r6
 800344a:	4649      	mov	r1, r9
 800344c:	4640      	mov	r0, r8
 800344e:	47d0      	blx	sl
 8003450:	3001      	adds	r0, #1
 8003452:	d09d      	beq.n	8003390 <_printf_i+0x160>
 8003454:	3501      	adds	r5, #1
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	9903      	ldr	r1, [sp, #12]
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	42ab      	cmp	r3, r5
 800345e:	dcf2      	bgt.n	8003446 <_printf_i+0x216>
 8003460:	e7eb      	b.n	800343a <_printf_i+0x20a>
 8003462:	2500      	movs	r5, #0
 8003464:	f104 0619 	add.w	r6, r4, #25
 8003468:	e7f5      	b.n	8003456 <_printf_i+0x226>
 800346a:	bf00      	nop
 800346c:	08005902 	.word	0x08005902
 8003470:	08005913 	.word	0x08005913

08003474 <std>:
 8003474:	2300      	movs	r3, #0
 8003476:	b510      	push	{r4, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	e9c0 3300 	strd	r3, r3, [r0]
 800347e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	8181      	strh	r1, [r0, #12]
 8003486:	6643      	str	r3, [r0, #100]	; 0x64
 8003488:	81c2      	strh	r2, [r0, #14]
 800348a:	6183      	str	r3, [r0, #24]
 800348c:	4619      	mov	r1, r3
 800348e:	2208      	movs	r2, #8
 8003490:	305c      	adds	r0, #92	; 0x5c
 8003492:	f000 f914 	bl	80036be <memset>
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <std+0x58>)
 8003498:	6263      	str	r3, [r4, #36]	; 0x24
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <std+0x5c>)
 800349c:	62a3      	str	r3, [r4, #40]	; 0x28
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <std+0x60>)
 80034a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <std+0x64>)
 80034a4:	6323      	str	r3, [r4, #48]	; 0x30
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <std+0x68>)
 80034a8:	6224      	str	r4, [r4, #32]
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d006      	beq.n	80034bc <std+0x48>
 80034ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034b2:	4294      	cmp	r4, r2
 80034b4:	d002      	beq.n	80034bc <std+0x48>
 80034b6:	33d0      	adds	r3, #208	; 0xd0
 80034b8:	429c      	cmp	r4, r3
 80034ba:	d105      	bne.n	80034c8 <std+0x54>
 80034bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c4:	f000 b978 	b.w	80037b8 <__retarget_lock_init_recursive>
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	bf00      	nop
 80034cc:	08003639 	.word	0x08003639
 80034d0:	0800365b 	.word	0x0800365b
 80034d4:	08003693 	.word	0x08003693
 80034d8:	080036b7 	.word	0x080036b7
 80034dc:	20000258 	.word	0x20000258

080034e0 <stdio_exit_handler>:
 80034e0:	4a02      	ldr	r2, [pc, #8]	; (80034ec <stdio_exit_handler+0xc>)
 80034e2:	4903      	ldr	r1, [pc, #12]	; (80034f0 <stdio_exit_handler+0x10>)
 80034e4:	4803      	ldr	r0, [pc, #12]	; (80034f4 <stdio_exit_handler+0x14>)
 80034e6:	f000 b869 	b.w	80035bc <_fwalk_sglue>
 80034ea:	bf00      	nop
 80034ec:	20000024 	.word	0x20000024
 80034f0:	08005169 	.word	0x08005169
 80034f4:	20000030 	.word	0x20000030

080034f8 <cleanup_stdio>:
 80034f8:	6841      	ldr	r1, [r0, #4]
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <cleanup_stdio+0x34>)
 80034fc:	4299      	cmp	r1, r3
 80034fe:	b510      	push	{r4, lr}
 8003500:	4604      	mov	r4, r0
 8003502:	d001      	beq.n	8003508 <cleanup_stdio+0x10>
 8003504:	f001 fe30 	bl	8005168 <_fflush_r>
 8003508:	68a1      	ldr	r1, [r4, #8]
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <cleanup_stdio+0x38>)
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <cleanup_stdio+0x1e>
 8003510:	4620      	mov	r0, r4
 8003512:	f001 fe29 	bl	8005168 <_fflush_r>
 8003516:	68e1      	ldr	r1, [r4, #12]
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <cleanup_stdio+0x3c>)
 800351a:	4299      	cmp	r1, r3
 800351c:	d004      	beq.n	8003528 <cleanup_stdio+0x30>
 800351e:	4620      	mov	r0, r4
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003524:	f001 be20 	b.w	8005168 <_fflush_r>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	20000258 	.word	0x20000258
 8003530:	200002c0 	.word	0x200002c0
 8003534:	20000328 	.word	0x20000328

08003538 <global_stdio_init.part.0>:
 8003538:	b510      	push	{r4, lr}
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <global_stdio_init.part.0+0x30>)
 800353c:	4c0b      	ldr	r4, [pc, #44]	; (800356c <global_stdio_init.part.0+0x34>)
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <global_stdio_init.part.0+0x38>)
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	4620      	mov	r0, r4
 8003544:	2200      	movs	r2, #0
 8003546:	2104      	movs	r1, #4
 8003548:	f7ff ff94 	bl	8003474 <std>
 800354c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003550:	2201      	movs	r2, #1
 8003552:	2109      	movs	r1, #9
 8003554:	f7ff ff8e 	bl	8003474 <std>
 8003558:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800355c:	2202      	movs	r2, #2
 800355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003562:	2112      	movs	r1, #18
 8003564:	f7ff bf86 	b.w	8003474 <std>
 8003568:	20000390 	.word	0x20000390
 800356c:	20000258 	.word	0x20000258
 8003570:	080034e1 	.word	0x080034e1

08003574 <__sfp_lock_acquire>:
 8003574:	4801      	ldr	r0, [pc, #4]	; (800357c <__sfp_lock_acquire+0x8>)
 8003576:	f000 b920 	b.w	80037ba <__retarget_lock_acquire_recursive>
 800357a:	bf00      	nop
 800357c:	20000399 	.word	0x20000399

08003580 <__sfp_lock_release>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__sfp_lock_release+0x8>)
 8003582:	f000 b91b 	b.w	80037bc <__retarget_lock_release_recursive>
 8003586:	bf00      	nop
 8003588:	20000399 	.word	0x20000399

0800358c <__sinit>:
 800358c:	b510      	push	{r4, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	f7ff fff0 	bl	8003574 <__sfp_lock_acquire>
 8003594:	6a23      	ldr	r3, [r4, #32]
 8003596:	b11b      	cbz	r3, 80035a0 <__sinit+0x14>
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800359c:	f7ff bff0 	b.w	8003580 <__sfp_lock_release>
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <__sinit+0x28>)
 80035a2:	6223      	str	r3, [r4, #32]
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__sinit+0x2c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f5      	bne.n	8003598 <__sinit+0xc>
 80035ac:	f7ff ffc4 	bl	8003538 <global_stdio_init.part.0>
 80035b0:	e7f2      	b.n	8003598 <__sinit+0xc>
 80035b2:	bf00      	nop
 80035b4:	080034f9 	.word	0x080034f9
 80035b8:	20000390 	.word	0x20000390

080035bc <_fwalk_sglue>:
 80035bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c0:	4607      	mov	r7, r0
 80035c2:	4688      	mov	r8, r1
 80035c4:	4614      	mov	r4, r2
 80035c6:	2600      	movs	r6, #0
 80035c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035cc:	f1b9 0901 	subs.w	r9, r9, #1
 80035d0:	d505      	bpl.n	80035de <_fwalk_sglue+0x22>
 80035d2:	6824      	ldr	r4, [r4, #0]
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d1f7      	bne.n	80035c8 <_fwalk_sglue+0xc>
 80035d8:	4630      	mov	r0, r6
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d907      	bls.n	80035f4 <_fwalk_sglue+0x38>
 80035e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035e8:	3301      	adds	r3, #1
 80035ea:	d003      	beq.n	80035f4 <_fwalk_sglue+0x38>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	4306      	orrs	r6, r0
 80035f4:	3568      	adds	r5, #104	; 0x68
 80035f6:	e7e9      	b.n	80035cc <_fwalk_sglue+0x10>

080035f8 <siprintf>:
 80035f8:	b40e      	push	{r1, r2, r3}
 80035fa:	b500      	push	{lr}
 80035fc:	b09c      	sub	sp, #112	; 0x70
 80035fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003600:	9002      	str	r0, [sp, #8]
 8003602:	9006      	str	r0, [sp, #24]
 8003604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003608:	4809      	ldr	r0, [pc, #36]	; (8003630 <siprintf+0x38>)
 800360a:	9107      	str	r1, [sp, #28]
 800360c:	9104      	str	r1, [sp, #16]
 800360e:	4909      	ldr	r1, [pc, #36]	; (8003634 <siprintf+0x3c>)
 8003610:	f853 2b04 	ldr.w	r2, [r3], #4
 8003614:	9105      	str	r1, [sp, #20]
 8003616:	6800      	ldr	r0, [r0, #0]
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	a902      	add	r1, sp, #8
 800361c:	f001 fc20 	bl	8004e60 <_svfiprintf_r>
 8003620:	9b02      	ldr	r3, [sp, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	b01c      	add	sp, #112	; 0x70
 8003628:	f85d eb04 	ldr.w	lr, [sp], #4
 800362c:	b003      	add	sp, #12
 800362e:	4770      	bx	lr
 8003630:	2000007c 	.word	0x2000007c
 8003634:	ffff0208 	.word	0xffff0208

08003638 <__sread>:
 8003638:	b510      	push	{r4, lr}
 800363a:	460c      	mov	r4, r1
 800363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003640:	f000 f86c 	bl	800371c <_read_r>
 8003644:	2800      	cmp	r0, #0
 8003646:	bfab      	itete	ge
 8003648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800364a:	89a3      	ldrhlt	r3, [r4, #12]
 800364c:	181b      	addge	r3, r3, r0
 800364e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003652:	bfac      	ite	ge
 8003654:	6563      	strge	r3, [r4, #84]	; 0x54
 8003656:	81a3      	strhlt	r3, [r4, #12]
 8003658:	bd10      	pop	{r4, pc}

0800365a <__swrite>:
 800365a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	461f      	mov	r7, r3
 8003660:	898b      	ldrh	r3, [r1, #12]
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	4605      	mov	r5, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4616      	mov	r6, r2
 800366a:	d505      	bpl.n	8003678 <__swrite+0x1e>
 800366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003670:	2302      	movs	r3, #2
 8003672:	2200      	movs	r2, #0
 8003674:	f000 f840 	bl	80036f8 <_lseek_r>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800367e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	4632      	mov	r2, r6
 8003686:	463b      	mov	r3, r7
 8003688:	4628      	mov	r0, r5
 800368a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800368e:	f000 b857 	b.w	8003740 <_write_r>

08003692 <__sseek>:
 8003692:	b510      	push	{r4, lr}
 8003694:	460c      	mov	r4, r1
 8003696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369a:	f000 f82d 	bl	80036f8 <_lseek_r>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	bf15      	itete	ne
 80036a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036ae:	81a3      	strheq	r3, [r4, #12]
 80036b0:	bf18      	it	ne
 80036b2:	81a3      	strhne	r3, [r4, #12]
 80036b4:	bd10      	pop	{r4, pc}

080036b6 <__sclose>:
 80036b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ba:	f000 b80d 	b.w	80036d8 <_close_r>

080036be <memset>:
 80036be:	4402      	add	r2, r0
 80036c0:	4603      	mov	r3, r0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d100      	bne.n	80036c8 <memset+0xa>
 80036c6:	4770      	bx	lr
 80036c8:	f803 1b01 	strb.w	r1, [r3], #1
 80036cc:	e7f9      	b.n	80036c2 <memset+0x4>
	...

080036d0 <_localeconv_r>:
 80036d0:	4800      	ldr	r0, [pc, #0]	; (80036d4 <_localeconv_r+0x4>)
 80036d2:	4770      	bx	lr
 80036d4:	20000170 	.word	0x20000170

080036d8 <_close_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d06      	ldr	r5, [pc, #24]	; (80036f4 <_close_r+0x1c>)
 80036dc:	2300      	movs	r3, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd fd8d 	bl	8001202 <_close>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_close_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_close_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000394 	.word	0x20000394

080036f8 <_lseek_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4d07      	ldr	r5, [pc, #28]	; (8003718 <_lseek_r+0x20>)
 80036fc:	4604      	mov	r4, r0
 80036fe:	4608      	mov	r0, r1
 8003700:	4611      	mov	r1, r2
 8003702:	2200      	movs	r2, #0
 8003704:	602a      	str	r2, [r5, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7fd fda2 	bl	8001250 <_lseek>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_lseek_r+0x1e>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_lseek_r+0x1e>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000394 	.word	0x20000394

0800371c <_read_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4d07      	ldr	r5, [pc, #28]	; (800373c <_read_r+0x20>)
 8003720:	4604      	mov	r4, r0
 8003722:	4608      	mov	r0, r1
 8003724:	4611      	mov	r1, r2
 8003726:	2200      	movs	r2, #0
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fd fd30 	bl	8001190 <_read>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_read_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_read_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000394 	.word	0x20000394

08003740 <_write_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4d07      	ldr	r5, [pc, #28]	; (8003760 <_write_r+0x20>)
 8003744:	4604      	mov	r4, r0
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	2200      	movs	r2, #0
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fd fd3b 	bl	80011ca <_write>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_write_r+0x1e>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_write_r+0x1e>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000394 	.word	0x20000394

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	2000007c 	.word	0x2000007c

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4d0d      	ldr	r5, [pc, #52]	; (80037a8 <__libc_init_array+0x38>)
 8003774:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	2600      	movs	r6, #0
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	4d0b      	ldr	r5, [pc, #44]	; (80037b0 <__libc_init_array+0x40>)
 8003782:	4c0c      	ldr	r4, [pc, #48]	; (80037b4 <__libc_init_array+0x44>)
 8003784:	f002 f894 	bl	80058b0 <_init>
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	2600      	movs	r6, #0
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08005c6c 	.word	0x08005c6c
 80037ac:	08005c6c 	.word	0x08005c6c
 80037b0:	08005c6c 	.word	0x08005c6c
 80037b4:	08005c70 	.word	0x08005c70

080037b8 <__retarget_lock_init_recursive>:
 80037b8:	4770      	bx	lr

080037ba <__retarget_lock_acquire_recursive>:
 80037ba:	4770      	bx	lr

080037bc <__retarget_lock_release_recursive>:
 80037bc:	4770      	bx	lr

080037be <quorem>:
 80037be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c2:	6903      	ldr	r3, [r0, #16]
 80037c4:	690c      	ldr	r4, [r1, #16]
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	4607      	mov	r7, r0
 80037ca:	db7e      	blt.n	80038ca <quorem+0x10c>
 80037cc:	3c01      	subs	r4, #1
 80037ce:	f101 0814 	add.w	r8, r1, #20
 80037d2:	f100 0514 	add.w	r5, r0, #20
 80037d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037e4:	3301      	adds	r3, #1
 80037e6:	429a      	cmp	r2, r3
 80037e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80037ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80037f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80037f4:	d331      	bcc.n	800385a <quorem+0x9c>
 80037f6:	f04f 0e00 	mov.w	lr, #0
 80037fa:	4640      	mov	r0, r8
 80037fc:	46ac      	mov	ip, r5
 80037fe:	46f2      	mov	sl, lr
 8003800:	f850 2b04 	ldr.w	r2, [r0], #4
 8003804:	b293      	uxth	r3, r2
 8003806:	fb06 e303 	mla	r3, r6, r3, lr
 800380a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800380e:	0c1a      	lsrs	r2, r3, #16
 8003810:	b29b      	uxth	r3, r3
 8003812:	ebaa 0303 	sub.w	r3, sl, r3
 8003816:	f8dc a000 	ldr.w	sl, [ip]
 800381a:	fa13 f38a 	uxtah	r3, r3, sl
 800381e:	fb06 220e 	mla	r2, r6, lr, r2
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	9b00      	ldr	r3, [sp, #0]
 8003826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800382a:	b292      	uxth	r2, r2
 800382c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003834:	f8bd 3000 	ldrh.w	r3, [sp]
 8003838:	4581      	cmp	r9, r0
 800383a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800383e:	f84c 3b04 	str.w	r3, [ip], #4
 8003842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003846:	d2db      	bcs.n	8003800 <quorem+0x42>
 8003848:	f855 300b 	ldr.w	r3, [r5, fp]
 800384c:	b92b      	cbnz	r3, 800385a <quorem+0x9c>
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	3b04      	subs	r3, #4
 8003852:	429d      	cmp	r5, r3
 8003854:	461a      	mov	r2, r3
 8003856:	d32c      	bcc.n	80038b2 <quorem+0xf4>
 8003858:	613c      	str	r4, [r7, #16]
 800385a:	4638      	mov	r0, r7
 800385c:	f001 f9a6 	bl	8004bac <__mcmp>
 8003860:	2800      	cmp	r0, #0
 8003862:	db22      	blt.n	80038aa <quorem+0xec>
 8003864:	3601      	adds	r6, #1
 8003866:	4629      	mov	r1, r5
 8003868:	2000      	movs	r0, #0
 800386a:	f858 2b04 	ldr.w	r2, [r8], #4
 800386e:	f8d1 c000 	ldr.w	ip, [r1]
 8003872:	b293      	uxth	r3, r2
 8003874:	1ac3      	subs	r3, r0, r3
 8003876:	0c12      	lsrs	r2, r2, #16
 8003878:	fa13 f38c 	uxtah	r3, r3, ip
 800387c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003884:	b29b      	uxth	r3, r3
 8003886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800388a:	45c1      	cmp	r9, r8
 800388c:	f841 3b04 	str.w	r3, [r1], #4
 8003890:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003894:	d2e9      	bcs.n	800386a <quorem+0xac>
 8003896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800389a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800389e:	b922      	cbnz	r2, 80038aa <quorem+0xec>
 80038a0:	3b04      	subs	r3, #4
 80038a2:	429d      	cmp	r5, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	d30a      	bcc.n	80038be <quorem+0x100>
 80038a8:	613c      	str	r4, [r7, #16]
 80038aa:	4630      	mov	r0, r6
 80038ac:	b003      	add	sp, #12
 80038ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	3b04      	subs	r3, #4
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d1ce      	bne.n	8003858 <quorem+0x9a>
 80038ba:	3c01      	subs	r4, #1
 80038bc:	e7c9      	b.n	8003852 <quorem+0x94>
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	3b04      	subs	r3, #4
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d1f0      	bne.n	80038a8 <quorem+0xea>
 80038c6:	3c01      	subs	r4, #1
 80038c8:	e7eb      	b.n	80038a2 <quorem+0xe4>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e7ee      	b.n	80038ac <quorem+0xee>
	...

080038d0 <_dtoa_r>:
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	ed2d 8b04 	vpush	{d8-d9}
 80038d8:	69c5      	ldr	r5, [r0, #28]
 80038da:	b093      	sub	sp, #76	; 0x4c
 80038dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80038e0:	ec57 6b10 	vmov	r6, r7, d0
 80038e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80038e8:	9107      	str	r1, [sp, #28]
 80038ea:	4604      	mov	r4, r0
 80038ec:	920a      	str	r2, [sp, #40]	; 0x28
 80038ee:	930d      	str	r3, [sp, #52]	; 0x34
 80038f0:	b975      	cbnz	r5, 8003910 <_dtoa_r+0x40>
 80038f2:	2010      	movs	r0, #16
 80038f4:	f000 fe2a 	bl	800454c <malloc>
 80038f8:	4602      	mov	r2, r0
 80038fa:	61e0      	str	r0, [r4, #28]
 80038fc:	b920      	cbnz	r0, 8003908 <_dtoa_r+0x38>
 80038fe:	4bae      	ldr	r3, [pc, #696]	; (8003bb8 <_dtoa_r+0x2e8>)
 8003900:	21ef      	movs	r1, #239	; 0xef
 8003902:	48ae      	ldr	r0, [pc, #696]	; (8003bbc <_dtoa_r+0x2ec>)
 8003904:	f001 fc90 	bl	8005228 <__assert_func>
 8003908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800390c:	6005      	str	r5, [r0, #0]
 800390e:	60c5      	str	r5, [r0, #12]
 8003910:	69e3      	ldr	r3, [r4, #28]
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	b151      	cbz	r1, 800392c <_dtoa_r+0x5c>
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	604a      	str	r2, [r1, #4]
 800391a:	2301      	movs	r3, #1
 800391c:	4093      	lsls	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
 8003920:	4620      	mov	r0, r4
 8003922:	f000 ff07 	bl	8004734 <_Bfree>
 8003926:	69e3      	ldr	r3, [r4, #28]
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	1e3b      	subs	r3, r7, #0
 800392e:	bfbb      	ittet	lt
 8003930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003934:	9303      	strlt	r3, [sp, #12]
 8003936:	2300      	movge	r3, #0
 8003938:	2201      	movlt	r2, #1
 800393a:	bfac      	ite	ge
 800393c:	f8c8 3000 	strge.w	r3, [r8]
 8003940:	f8c8 2000 	strlt.w	r2, [r8]
 8003944:	4b9e      	ldr	r3, [pc, #632]	; (8003bc0 <_dtoa_r+0x2f0>)
 8003946:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800394a:	ea33 0308 	bics.w	r3, r3, r8
 800394e:	d11b      	bne.n	8003988 <_dtoa_r+0xb8>
 8003950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003952:	f242 730f 	movw	r3, #9999	; 0x270f
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800395c:	4333      	orrs	r3, r6
 800395e:	f000 8593 	beq.w	8004488 <_dtoa_r+0xbb8>
 8003962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003964:	b963      	cbnz	r3, 8003980 <_dtoa_r+0xb0>
 8003966:	4b97      	ldr	r3, [pc, #604]	; (8003bc4 <_dtoa_r+0x2f4>)
 8003968:	e027      	b.n	80039ba <_dtoa_r+0xea>
 800396a:	4b97      	ldr	r3, [pc, #604]	; (8003bc8 <_dtoa_r+0x2f8>)
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	9800      	ldr	r0, [sp, #0]
 8003976:	b013      	add	sp, #76	; 0x4c
 8003978:	ecbd 8b04 	vpop	{d8-d9}
 800397c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003980:	4b90      	ldr	r3, [pc, #576]	; (8003bc4 <_dtoa_r+0x2f4>)
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	3303      	adds	r3, #3
 8003986:	e7f3      	b.n	8003970 <_dtoa_r+0xa0>
 8003988:	ed9d 7b02 	vldr	d7, [sp, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	ec51 0b17 	vmov	r0, r1, d7
 8003992:	eeb0 8a47 	vmov.f32	s16, s14
 8003996:	eef0 8a67 	vmov.f32	s17, s15
 800399a:	2300      	movs	r3, #0
 800399c:	f7fd f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80039a0:	4681      	mov	r9, r0
 80039a2:	b160      	cbz	r0, 80039be <_dtoa_r+0xee>
 80039a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039a6:	2301      	movs	r3, #1
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8568 	beq.w	8004482 <_dtoa_r+0xbb2>
 80039b2:	4b86      	ldr	r3, [pc, #536]	; (8003bcc <_dtoa_r+0x2fc>)
 80039b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	e7da      	b.n	8003974 <_dtoa_r+0xa4>
 80039be:	aa10      	add	r2, sp, #64	; 0x40
 80039c0:	a911      	add	r1, sp, #68	; 0x44
 80039c2:	4620      	mov	r0, r4
 80039c4:	eeb0 0a48 	vmov.f32	s0, s16
 80039c8:	eef0 0a68 	vmov.f32	s1, s17
 80039cc:	f001 f994 	bl	8004cf8 <__d2b>
 80039d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80039d4:	4682      	mov	sl, r0
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	d07f      	beq.n	8003ada <_dtoa_r+0x20a>
 80039da:	ee18 3a90 	vmov	r3, s17
 80039de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80039e6:	ec51 0b18 	vmov	r0, r1, d8
 80039ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80039ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80039f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80039f6:	4619      	mov	r1, r3
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <_dtoa_r+0x300>)
 80039fc:	f7fc fc44 	bl	8000288 <__aeabi_dsub>
 8003a00:	a367      	add	r3, pc, #412	; (adr r3, 8003ba0 <_dtoa_r+0x2d0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fdf7 	bl	80005f8 <__aeabi_dmul>
 8003a0a:	a367      	add	r3, pc, #412	; (adr r3, 8003ba8 <_dtoa_r+0x2d8>)
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fc3c 	bl	800028c <__adddf3>
 8003a14:	4606      	mov	r6, r0
 8003a16:	4628      	mov	r0, r5
 8003a18:	460f      	mov	r7, r1
 8003a1a:	f7fc fd83 	bl	8000524 <__aeabi_i2d>
 8003a1e:	a364      	add	r3, pc, #400	; (adr r3, 8003bb0 <_dtoa_r+0x2e0>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fde8 	bl	80005f8 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	4639      	mov	r1, r7
 8003a30:	f7fc fc2c 	bl	800028c <__adddf3>
 8003a34:	4606      	mov	r6, r0
 8003a36:	460f      	mov	r7, r1
 8003a38:	f7fd f88e 	bl	8000b58 <__aeabi_d2iz>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4683      	mov	fp, r0
 8003a40:	2300      	movs	r3, #0
 8003a42:	4630      	mov	r0, r6
 8003a44:	4639      	mov	r1, r7
 8003a46:	f7fd f849 	bl	8000adc <__aeabi_dcmplt>
 8003a4a:	b148      	cbz	r0, 8003a60 <_dtoa_r+0x190>
 8003a4c:	4658      	mov	r0, fp
 8003a4e:	f7fc fd69 	bl	8000524 <__aeabi_i2d>
 8003a52:	4632      	mov	r2, r6
 8003a54:	463b      	mov	r3, r7
 8003a56:	f7fd f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a5a:	b908      	cbnz	r0, 8003a60 <_dtoa_r+0x190>
 8003a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a60:	f1bb 0f16 	cmp.w	fp, #22
 8003a64:	d857      	bhi.n	8003b16 <_dtoa_r+0x246>
 8003a66:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <_dtoa_r+0x304>)
 8003a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	ec51 0b18 	vmov	r0, r1, d8
 8003a74:	f7fd f832 	bl	8000adc <__aeabi_dcmplt>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d04e      	beq.n	8003b1a <_dtoa_r+0x24a>
 8003a7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a80:	2300      	movs	r3, #0
 8003a82:	930c      	str	r3, [sp, #48]	; 0x30
 8003a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a86:	1b5b      	subs	r3, r3, r5
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	bf45      	ittet	mi
 8003a8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003a90:	9305      	strmi	r3, [sp, #20]
 8003a92:	2300      	movpl	r3, #0
 8003a94:	2300      	movmi	r3, #0
 8003a96:	9206      	str	r2, [sp, #24]
 8003a98:	bf54      	ite	pl
 8003a9a:	9305      	strpl	r3, [sp, #20]
 8003a9c:	9306      	strmi	r3, [sp, #24]
 8003a9e:	f1bb 0f00 	cmp.w	fp, #0
 8003aa2:	db3c      	blt.n	8003b1e <_dtoa_r+0x24e>
 8003aa4:	9b06      	ldr	r3, [sp, #24]
 8003aa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003aaa:	445b      	add	r3, fp
 8003aac:	9306      	str	r3, [sp, #24]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9308      	str	r3, [sp, #32]
 8003ab2:	9b07      	ldr	r3, [sp, #28]
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d868      	bhi.n	8003b8a <_dtoa_r+0x2ba>
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	bfc4      	itt	gt
 8003abc:	3b04      	subgt	r3, #4
 8003abe:	9307      	strgt	r3, [sp, #28]
 8003ac0:	9b07      	ldr	r3, [sp, #28]
 8003ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ac6:	bfcc      	ite	gt
 8003ac8:	2500      	movgt	r5, #0
 8003aca:	2501      	movle	r5, #1
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	f200 8085 	bhi.w	8003bdc <_dtoa_r+0x30c>
 8003ad2:	e8df f003 	tbb	[pc, r3]
 8003ad6:	3b2e      	.short	0x3b2e
 8003ad8:	5839      	.short	0x5839
 8003ada:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003ade:	441d      	add	r5, r3
 8003ae0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	bfc1      	itttt	gt
 8003ae8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8003af0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003af4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003af8:	bfd6      	itet	le
 8003afa:	f1c3 0320 	rsble	r3, r3, #32
 8003afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b02:	fa06 f003 	lslle.w	r0, r6, r3
 8003b06:	f7fc fcfd 	bl	8000504 <__aeabi_ui2d>
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003b10:	3d01      	subs	r5, #1
 8003b12:	920e      	str	r2, [sp, #56]	; 0x38
 8003b14:	e76f      	b.n	80039f6 <_dtoa_r+0x126>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e7b3      	b.n	8003a82 <_dtoa_r+0x1b2>
 8003b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8003b1c:	e7b2      	b.n	8003a84 <_dtoa_r+0x1b4>
 8003b1e:	9b05      	ldr	r3, [sp, #20]
 8003b20:	eba3 030b 	sub.w	r3, r3, fp
 8003b24:	9305      	str	r3, [sp, #20]
 8003b26:	f1cb 0300 	rsb	r3, fp, #0
 8003b2a:	9308      	str	r3, [sp, #32]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b30:	e7bf      	b.n	8003ab2 <_dtoa_r+0x1e2>
 8003b32:	2300      	movs	r3, #0
 8003b34:	9309      	str	r3, [sp, #36]	; 0x24
 8003b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dc52      	bgt.n	8003be2 <_dtoa_r+0x312>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	9304      	str	r3, [sp, #16]
 8003b42:	461a      	mov	r2, r3
 8003b44:	920a      	str	r2, [sp, #40]	; 0x28
 8003b46:	e00b      	b.n	8003b60 <_dtoa_r+0x290>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e7f3      	b.n	8003b34 <_dtoa_r+0x264>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b52:	445b      	add	r3, fp
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	bfb8      	it	lt
 8003b5e:	2301      	movlt	r3, #1
 8003b60:	69e0      	ldr	r0, [r4, #28]
 8003b62:	2100      	movs	r1, #0
 8003b64:	2204      	movs	r2, #4
 8003b66:	f102 0614 	add.w	r6, r2, #20
 8003b6a:	429e      	cmp	r6, r3
 8003b6c:	d93d      	bls.n	8003bea <_dtoa_r+0x31a>
 8003b6e:	6041      	str	r1, [r0, #4]
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fd9f 	bl	80046b4 <_Balloc>
 8003b76:	9000      	str	r0, [sp, #0]
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d139      	bne.n	8003bf0 <_dtoa_r+0x320>
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <_dtoa_r+0x308>)
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f240 11af 	movw	r1, #431	; 0x1af
 8003b84:	e6bd      	b.n	8003902 <_dtoa_r+0x32>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7e1      	b.n	8003b4e <_dtoa_r+0x27e>
 8003b8a:	2501      	movs	r5, #1
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9307      	str	r3, [sp, #28]
 8003b90:	9509      	str	r5, [sp, #36]	; 0x24
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2312      	movs	r3, #18
 8003b9e:	e7d1      	b.n	8003b44 <_dtoa_r+0x274>
 8003ba0:	636f4361 	.word	0x636f4361
 8003ba4:	3fd287a7 	.word	0x3fd287a7
 8003ba8:	8b60c8b3 	.word	0x8b60c8b3
 8003bac:	3fc68a28 	.word	0x3fc68a28
 8003bb0:	509f79fb 	.word	0x509f79fb
 8003bb4:	3fd34413 	.word	0x3fd34413
 8003bb8:	08005931 	.word	0x08005931
 8003bbc:	08005948 	.word	0x08005948
 8003bc0:	7ff00000 	.word	0x7ff00000
 8003bc4:	0800592d 	.word	0x0800592d
 8003bc8:	08005924 	.word	0x08005924
 8003bcc:	08005901 	.word	0x08005901
 8003bd0:	3ff80000 	.word	0x3ff80000
 8003bd4:	08005a38 	.word	0x08005a38
 8003bd8:	080059a0 	.word	0x080059a0
 8003bdc:	2301      	movs	r3, #1
 8003bde:	9309      	str	r3, [sp, #36]	; 0x24
 8003be0:	e7d7      	b.n	8003b92 <_dtoa_r+0x2c2>
 8003be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	e7ba      	b.n	8003b60 <_dtoa_r+0x290>
 8003bea:	3101      	adds	r1, #1
 8003bec:	0052      	lsls	r2, r2, #1
 8003bee:	e7ba      	b.n	8003b66 <_dtoa_r+0x296>
 8003bf0:	69e3      	ldr	r3, [r4, #28]
 8003bf2:	9a00      	ldr	r2, [sp, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	9b04      	ldr	r3, [sp, #16]
 8003bf8:	2b0e      	cmp	r3, #14
 8003bfa:	f200 80a8 	bhi.w	8003d4e <_dtoa_r+0x47e>
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	f000 80a5 	beq.w	8003d4e <_dtoa_r+0x47e>
 8003c04:	f1bb 0f00 	cmp.w	fp, #0
 8003c08:	dd38      	ble.n	8003c7c <_dtoa_r+0x3ac>
 8003c0a:	4bc0      	ldr	r3, [pc, #768]	; (8003f0c <_dtoa_r+0x63c>)
 8003c0c:	f00b 020f 	and.w	r2, fp, #15
 8003c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003c18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003c20:	d019      	beq.n	8003c56 <_dtoa_r+0x386>
 8003c22:	4bbb      	ldr	r3, [pc, #748]	; (8003f10 <_dtoa_r+0x640>)
 8003c24:	ec51 0b18 	vmov	r0, r1, d8
 8003c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c2c:	f7fc fe0e 	bl	800084c <__aeabi_ddiv>
 8003c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c34:	f008 080f 	and.w	r8, r8, #15
 8003c38:	2503      	movs	r5, #3
 8003c3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003f10 <_dtoa_r+0x640>
 8003c3e:	f1b8 0f00 	cmp.w	r8, #0
 8003c42:	d10a      	bne.n	8003c5a <_dtoa_r+0x38a>
 8003c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c48:	4632      	mov	r2, r6
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	f7fc fdfe 	bl	800084c <__aeabi_ddiv>
 8003c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c54:	e02b      	b.n	8003cae <_dtoa_r+0x3de>
 8003c56:	2502      	movs	r5, #2
 8003c58:	e7ef      	b.n	8003c3a <_dtoa_r+0x36a>
 8003c5a:	f018 0f01 	tst.w	r8, #1
 8003c5e:	d008      	beq.n	8003c72 <_dtoa_r+0x3a2>
 8003c60:	4630      	mov	r0, r6
 8003c62:	4639      	mov	r1, r7
 8003c64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003c68:	f7fc fcc6 	bl	80005f8 <__aeabi_dmul>
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	4606      	mov	r6, r0
 8003c70:	460f      	mov	r7, r1
 8003c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003c76:	f109 0908 	add.w	r9, r9, #8
 8003c7a:	e7e0      	b.n	8003c3e <_dtoa_r+0x36e>
 8003c7c:	f000 809f 	beq.w	8003dbe <_dtoa_r+0x4ee>
 8003c80:	f1cb 0600 	rsb	r6, fp, #0
 8003c84:	4ba1      	ldr	r3, [pc, #644]	; (8003f0c <_dtoa_r+0x63c>)
 8003c86:	4fa2      	ldr	r7, [pc, #648]	; (8003f10 <_dtoa_r+0x640>)
 8003c88:	f006 020f 	and.w	r2, r6, #15
 8003c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	ec51 0b18 	vmov	r0, r1, d8
 8003c98:	f7fc fcae 	bl	80005f8 <__aeabi_dmul>
 8003c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ca0:	1136      	asrs	r6, r6, #4
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2502      	movs	r5, #2
 8003ca6:	2e00      	cmp	r6, #0
 8003ca8:	d17e      	bne.n	8003da8 <_dtoa_r+0x4d8>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d0      	bne.n	8003c50 <_dtoa_r+0x380>
 8003cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8084 	beq.w	8003dc2 <_dtoa_r+0x4f2>
 8003cba:	4b96      	ldr	r3, [pc, #600]	; (8003f14 <_dtoa_r+0x644>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	f7fc ff0b 	bl	8000adc <__aeabi_dcmplt>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d07b      	beq.n	8003dc2 <_dtoa_r+0x4f2>
 8003cca:	9b04      	ldr	r3, [sp, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d078      	beq.n	8003dc2 <_dtoa_r+0x4f2>
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dd39      	ble.n	8003d4a <_dtoa_r+0x47a>
 8003cd6:	4b90      	ldr	r3, [pc, #576]	; (8003f18 <_dtoa_r+0x648>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fc8b 	bl	80005f8 <__aeabi_dmul>
 8003ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ce6:	9e01      	ldr	r6, [sp, #4]
 8003ce8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003cec:	3501      	adds	r5, #1
 8003cee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7fc fc16 	bl	8000524 <__aeabi_i2d>
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	f7fc fc7c 	bl	80005f8 <__aeabi_dmul>
 8003d00:	4b86      	ldr	r3, [pc, #536]	; (8003f1c <_dtoa_r+0x64c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	f7fc fac2 	bl	800028c <__adddf3>
 8003d08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d158      	bne.n	8003dc8 <_dtoa_r+0x4f8>
 8003d16:	4b82      	ldr	r3, [pc, #520]	; (8003f20 <_dtoa_r+0x650>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	f7fc fab3 	bl	8000288 <__aeabi_dsub>
 8003d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	f7fc fef5 	bl	8000b18 <__aeabi_dcmpgt>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	f040 8296 	bne.w	8004260 <_dtoa_r+0x990>
 8003d34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003d38:	4640      	mov	r0, r8
 8003d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d3e:	4649      	mov	r1, r9
 8003d40:	f7fc fecc 	bl	8000adc <__aeabi_dcmplt>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f040 8289 	bne.w	800425c <_dtoa_r+0x98c>
 8003d4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f2c0 814e 	blt.w	8003ff2 <_dtoa_r+0x722>
 8003d56:	f1bb 0f0e 	cmp.w	fp, #14
 8003d5a:	f300 814a 	bgt.w	8003ff2 <_dtoa_r+0x722>
 8003d5e:	4b6b      	ldr	r3, [pc, #428]	; (8003f0c <_dtoa_r+0x63c>)
 8003d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f280 80dc 	bge.w	8003f28 <_dtoa_r+0x658>
 8003d70:	9b04      	ldr	r3, [sp, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f300 80d8 	bgt.w	8003f28 <_dtoa_r+0x658>
 8003d78:	f040 826f 	bne.w	800425a <_dtoa_r+0x98a>
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <_dtoa_r+0x650>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4640      	mov	r0, r8
 8003d82:	4649      	mov	r1, r9
 8003d84:	f7fc fc38 	bl	80005f8 <__aeabi_dmul>
 8003d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d8c:	f7fc feba 	bl	8000b04 <__aeabi_dcmpge>
 8003d90:	9e04      	ldr	r6, [sp, #16]
 8003d92:	4637      	mov	r7, r6
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f040 8245 	bne.w	8004224 <_dtoa_r+0x954>
 8003d9a:	9d00      	ldr	r5, [sp, #0]
 8003d9c:	2331      	movs	r3, #49	; 0x31
 8003d9e:	f805 3b01 	strb.w	r3, [r5], #1
 8003da2:	f10b 0b01 	add.w	fp, fp, #1
 8003da6:	e241      	b.n	800422c <_dtoa_r+0x95c>
 8003da8:	07f2      	lsls	r2, r6, #31
 8003daa:	d505      	bpl.n	8003db8 <_dtoa_r+0x4e8>
 8003dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db0:	f7fc fc22 	bl	80005f8 <__aeabi_dmul>
 8003db4:	3501      	adds	r5, #1
 8003db6:	2301      	movs	r3, #1
 8003db8:	1076      	asrs	r6, r6, #1
 8003dba:	3708      	adds	r7, #8
 8003dbc:	e773      	b.n	8003ca6 <_dtoa_r+0x3d6>
 8003dbe:	2502      	movs	r5, #2
 8003dc0:	e775      	b.n	8003cae <_dtoa_r+0x3de>
 8003dc2:	9e04      	ldr	r6, [sp, #16]
 8003dc4:	465f      	mov	r7, fp
 8003dc6:	e792      	b.n	8003cee <_dtoa_r+0x41e>
 8003dc8:	9900      	ldr	r1, [sp, #0]
 8003dca:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <_dtoa_r+0x63c>)
 8003dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003dd0:	4431      	add	r1, r6
 8003dd2:	9102      	str	r1, [sp, #8]
 8003dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dd6:	eeb0 9a47 	vmov.f32	s18, s14
 8003dda:	eef0 9a67 	vmov.f32	s19, s15
 8003dde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003de2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d044      	beq.n	8003e74 <_dtoa_r+0x5a4>
 8003dea:	494e      	ldr	r1, [pc, #312]	; (8003f24 <_dtoa_r+0x654>)
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7fc fd2d 	bl	800084c <__aeabi_ddiv>
 8003df2:	ec53 2b19 	vmov	r2, r3, d9
 8003df6:	f7fc fa47 	bl	8000288 <__aeabi_dsub>
 8003dfa:	9d00      	ldr	r5, [sp, #0]
 8003dfc:	ec41 0b19 	vmov	d9, r0, r1
 8003e00:	4649      	mov	r1, r9
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7fc fea8 	bl	8000b58 <__aeabi_d2iz>
 8003e08:	4606      	mov	r6, r0
 8003e0a:	f7fc fb8b 	bl	8000524 <__aeabi_i2d>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f7fc fa37 	bl	8000288 <__aeabi_dsub>
 8003e1a:	3630      	adds	r6, #48	; 0x30
 8003e1c:	f805 6b01 	strb.w	r6, [r5], #1
 8003e20:	ec53 2b19 	vmov	r2, r3, d9
 8003e24:	4680      	mov	r8, r0
 8003e26:	4689      	mov	r9, r1
 8003e28:	f7fc fe58 	bl	8000adc <__aeabi_dcmplt>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d164      	bne.n	8003efa <_dtoa_r+0x62a>
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	4937      	ldr	r1, [pc, #220]	; (8003f14 <_dtoa_r+0x644>)
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fc fa26 	bl	8000288 <__aeabi_dsub>
 8003e3c:	ec53 2b19 	vmov	r2, r3, d9
 8003e40:	f7fc fe4c 	bl	8000adc <__aeabi_dcmplt>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f040 80b6 	bne.w	8003fb6 <_dtoa_r+0x6e6>
 8003e4a:	9b02      	ldr	r3, [sp, #8]
 8003e4c:	429d      	cmp	r5, r3
 8003e4e:	f43f af7c 	beq.w	8003d4a <_dtoa_r+0x47a>
 8003e52:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <_dtoa_r+0x648>)
 8003e54:	ec51 0b19 	vmov	r0, r1, d9
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f7fc fbcd 	bl	80005f8 <__aeabi_dmul>
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <_dtoa_r+0x648>)
 8003e60:	ec41 0b19 	vmov	d9, r0, r1
 8003e64:	2200      	movs	r2, #0
 8003e66:	4640      	mov	r0, r8
 8003e68:	4649      	mov	r1, r9
 8003e6a:	f7fc fbc5 	bl	80005f8 <__aeabi_dmul>
 8003e6e:	4680      	mov	r8, r0
 8003e70:	4689      	mov	r9, r1
 8003e72:	e7c5      	b.n	8003e00 <_dtoa_r+0x530>
 8003e74:	ec51 0b17 	vmov	r0, r1, d7
 8003e78:	f7fc fbbe 	bl	80005f8 <__aeabi_dmul>
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	9d00      	ldr	r5, [sp, #0]
 8003e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e82:	ec41 0b19 	vmov	d9, r0, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	4640      	mov	r0, r8
 8003e8a:	f7fc fe65 	bl	8000b58 <__aeabi_d2iz>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	f7fc fb48 	bl	8000524 <__aeabi_i2d>
 8003e94:	3630      	adds	r6, #48	; 0x30
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	f7fc f9f3 	bl	8000288 <__aeabi_dsub>
 8003ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8003ea6:	9b02      	ldr	r3, [sp, #8]
 8003ea8:	429d      	cmp	r5, r3
 8003eaa:	4680      	mov	r8, r0
 8003eac:	4689      	mov	r9, r1
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	d124      	bne.n	8003efe <_dtoa_r+0x62e>
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <_dtoa_r+0x654>)
 8003eb6:	ec51 0b19 	vmov	r0, r1, d9
 8003eba:	f7fc f9e7 	bl	800028c <__adddf3>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	f7fc fe27 	bl	8000b18 <__aeabi_dcmpgt>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d173      	bne.n	8003fb6 <_dtoa_r+0x6e6>
 8003ece:	ec53 2b19 	vmov	r2, r3, d9
 8003ed2:	4914      	ldr	r1, [pc, #80]	; (8003f24 <_dtoa_r+0x654>)
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fc f9d7 	bl	8000288 <__aeabi_dsub>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4640      	mov	r0, r8
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	f7fc fdfb 	bl	8000adc <__aeabi_dcmplt>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	f43f af2f 	beq.w	8003d4a <_dtoa_r+0x47a>
 8003eec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003eee:	1e6b      	subs	r3, r5, #1
 8003ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d0f8      	beq.n	8003eec <_dtoa_r+0x61c>
 8003efa:	46bb      	mov	fp, r7
 8003efc:	e04a      	b.n	8003f94 <_dtoa_r+0x6c4>
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <_dtoa_r+0x648>)
 8003f00:	f7fc fb7a 	bl	80005f8 <__aeabi_dmul>
 8003f04:	4680      	mov	r8, r0
 8003f06:	4689      	mov	r9, r1
 8003f08:	e7bd      	b.n	8003e86 <_dtoa_r+0x5b6>
 8003f0a:	bf00      	nop
 8003f0c:	08005a38 	.word	0x08005a38
 8003f10:	08005a10 	.word	0x08005a10
 8003f14:	3ff00000 	.word	0x3ff00000
 8003f18:	40240000 	.word	0x40240000
 8003f1c:	401c0000 	.word	0x401c0000
 8003f20:	40140000 	.word	0x40140000
 8003f24:	3fe00000 	.word	0x3fe00000
 8003f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f2c:	9d00      	ldr	r5, [sp, #0]
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	4630      	mov	r0, r6
 8003f34:	4639      	mov	r1, r7
 8003f36:	f7fc fc89 	bl	800084c <__aeabi_ddiv>
 8003f3a:	f7fc fe0d 	bl	8000b58 <__aeabi_d2iz>
 8003f3e:	9001      	str	r0, [sp, #4]
 8003f40:	f7fc faf0 	bl	8000524 <__aeabi_i2d>
 8003f44:	4642      	mov	r2, r8
 8003f46:	464b      	mov	r3, r9
 8003f48:	f7fc fb56 	bl	80005f8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4630      	mov	r0, r6
 8003f52:	4639      	mov	r1, r7
 8003f54:	f7fc f998 	bl	8000288 <__aeabi_dsub>
 8003f58:	9e01      	ldr	r6, [sp, #4]
 8003f5a:	9f04      	ldr	r7, [sp, #16]
 8003f5c:	3630      	adds	r6, #48	; 0x30
 8003f5e:	f805 6b01 	strb.w	r6, [r5], #1
 8003f62:	9e00      	ldr	r6, [sp, #0]
 8003f64:	1bae      	subs	r6, r5, r6
 8003f66:	42b7      	cmp	r7, r6
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	d134      	bne.n	8003fd8 <_dtoa_r+0x708>
 8003f6e:	f7fc f98d 	bl	800028c <__adddf3>
 8003f72:	4642      	mov	r2, r8
 8003f74:	464b      	mov	r3, r9
 8003f76:	4606      	mov	r6, r0
 8003f78:	460f      	mov	r7, r1
 8003f7a:	f7fc fdcd 	bl	8000b18 <__aeabi_dcmpgt>
 8003f7e:	b9c8      	cbnz	r0, 8003fb4 <_dtoa_r+0x6e4>
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	4630      	mov	r0, r6
 8003f86:	4639      	mov	r1, r7
 8003f88:	f7fc fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f8c:	b110      	cbz	r0, 8003f94 <_dtoa_r+0x6c4>
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d40f      	bmi.n	8003fb4 <_dtoa_r+0x6e4>
 8003f94:	4651      	mov	r1, sl
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 fbcc 	bl	8004734 <_Bfree>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fa0:	702b      	strb	r3, [r5, #0]
 8003fa2:	f10b 0301 	add.w	r3, fp, #1
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f43f ace2 	beq.w	8003974 <_dtoa_r+0xa4>
 8003fb0:	601d      	str	r5, [r3, #0]
 8003fb2:	e4df      	b.n	8003974 <_dtoa_r+0xa4>
 8003fb4:	465f      	mov	r7, fp
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	461d      	mov	r5, r3
 8003fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fbe:	2a39      	cmp	r2, #57	; 0x39
 8003fc0:	d106      	bne.n	8003fd0 <_dtoa_r+0x700>
 8003fc2:	9a00      	ldr	r2, [sp, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1f7      	bne.n	8003fb8 <_dtoa_r+0x6e8>
 8003fc8:	9900      	ldr	r1, [sp, #0]
 8003fca:	2230      	movs	r2, #48	; 0x30
 8003fcc:	3701      	adds	r7, #1
 8003fce:	700a      	strb	r2, [r1, #0]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	3201      	adds	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e790      	b.n	8003efa <_dtoa_r+0x62a>
 8003fd8:	4ba3      	ldr	r3, [pc, #652]	; (8004268 <_dtoa_r+0x998>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f7fc fb0c 	bl	80005f8 <__aeabi_dmul>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	460f      	mov	r7, r1
 8003fe8:	f7fc fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d09e      	beq.n	8003f2e <_dtoa_r+0x65e>
 8003ff0:	e7d0      	b.n	8003f94 <_dtoa_r+0x6c4>
 8003ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	f000 80ca 	beq.w	800418e <_dtoa_r+0x8be>
 8003ffa:	9a07      	ldr	r2, [sp, #28]
 8003ffc:	2a01      	cmp	r2, #1
 8003ffe:	f300 80ad 	bgt.w	800415c <_dtoa_r+0x88c>
 8004002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004004:	2a00      	cmp	r2, #0
 8004006:	f000 80a5 	beq.w	8004154 <_dtoa_r+0x884>
 800400a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800400e:	9e08      	ldr	r6, [sp, #32]
 8004010:	9d05      	ldr	r5, [sp, #20]
 8004012:	9a05      	ldr	r2, [sp, #20]
 8004014:	441a      	add	r2, r3
 8004016:	9205      	str	r2, [sp, #20]
 8004018:	9a06      	ldr	r2, [sp, #24]
 800401a:	2101      	movs	r1, #1
 800401c:	441a      	add	r2, r3
 800401e:	4620      	mov	r0, r4
 8004020:	9206      	str	r2, [sp, #24]
 8004022:	f000 fc3d 	bl	80048a0 <__i2b>
 8004026:	4607      	mov	r7, r0
 8004028:	b165      	cbz	r5, 8004044 <_dtoa_r+0x774>
 800402a:	9b06      	ldr	r3, [sp, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	dd09      	ble.n	8004044 <_dtoa_r+0x774>
 8004030:	42ab      	cmp	r3, r5
 8004032:	9a05      	ldr	r2, [sp, #20]
 8004034:	bfa8      	it	ge
 8004036:	462b      	movge	r3, r5
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	9205      	str	r2, [sp, #20]
 800403c:	9a06      	ldr	r2, [sp, #24]
 800403e:	1aed      	subs	r5, r5, r3
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	9306      	str	r3, [sp, #24]
 8004044:	9b08      	ldr	r3, [sp, #32]
 8004046:	b1f3      	cbz	r3, 8004086 <_dtoa_r+0x7b6>
 8004048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80a3 	beq.w	8004196 <_dtoa_r+0x8c6>
 8004050:	2e00      	cmp	r6, #0
 8004052:	dd10      	ble.n	8004076 <_dtoa_r+0x7a6>
 8004054:	4639      	mov	r1, r7
 8004056:	4632      	mov	r2, r6
 8004058:	4620      	mov	r0, r4
 800405a:	f000 fce1 	bl	8004a20 <__pow5mult>
 800405e:	4652      	mov	r2, sl
 8004060:	4601      	mov	r1, r0
 8004062:	4607      	mov	r7, r0
 8004064:	4620      	mov	r0, r4
 8004066:	f000 fc31 	bl	80048cc <__multiply>
 800406a:	4651      	mov	r1, sl
 800406c:	4680      	mov	r8, r0
 800406e:	4620      	mov	r0, r4
 8004070:	f000 fb60 	bl	8004734 <_Bfree>
 8004074:	46c2      	mov	sl, r8
 8004076:	9b08      	ldr	r3, [sp, #32]
 8004078:	1b9a      	subs	r2, r3, r6
 800407a:	d004      	beq.n	8004086 <_dtoa_r+0x7b6>
 800407c:	4651      	mov	r1, sl
 800407e:	4620      	mov	r0, r4
 8004080:	f000 fcce 	bl	8004a20 <__pow5mult>
 8004084:	4682      	mov	sl, r0
 8004086:	2101      	movs	r1, #1
 8004088:	4620      	mov	r0, r4
 800408a:	f000 fc09 	bl	80048a0 <__i2b>
 800408e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	4606      	mov	r6, r0
 8004094:	f340 8081 	ble.w	800419a <_dtoa_r+0x8ca>
 8004098:	461a      	mov	r2, r3
 800409a:	4601      	mov	r1, r0
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fcbf 	bl	8004a20 <__pow5mult>
 80040a2:	9b07      	ldr	r3, [sp, #28]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	4606      	mov	r6, r0
 80040a8:	dd7a      	ble.n	80041a0 <_dtoa_r+0x8d0>
 80040aa:	f04f 0800 	mov.w	r8, #0
 80040ae:	6933      	ldr	r3, [r6, #16]
 80040b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040b4:	6918      	ldr	r0, [r3, #16]
 80040b6:	f000 fba5 	bl	8004804 <__hi0bits>
 80040ba:	f1c0 0020 	rsb	r0, r0, #32
 80040be:	9b06      	ldr	r3, [sp, #24]
 80040c0:	4418      	add	r0, r3
 80040c2:	f010 001f 	ands.w	r0, r0, #31
 80040c6:	f000 8094 	beq.w	80041f2 <_dtoa_r+0x922>
 80040ca:	f1c0 0320 	rsb	r3, r0, #32
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	f340 8085 	ble.w	80041de <_dtoa_r+0x90e>
 80040d4:	9b05      	ldr	r3, [sp, #20]
 80040d6:	f1c0 001c 	rsb	r0, r0, #28
 80040da:	4403      	add	r3, r0
 80040dc:	9305      	str	r3, [sp, #20]
 80040de:	9b06      	ldr	r3, [sp, #24]
 80040e0:	4403      	add	r3, r0
 80040e2:	4405      	add	r5, r0
 80040e4:	9306      	str	r3, [sp, #24]
 80040e6:	9b05      	ldr	r3, [sp, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dd05      	ble.n	80040f8 <_dtoa_r+0x828>
 80040ec:	4651      	mov	r1, sl
 80040ee:	461a      	mov	r2, r3
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fcef 	bl	8004ad4 <__lshift>
 80040f6:	4682      	mov	sl, r0
 80040f8:	9b06      	ldr	r3, [sp, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dd05      	ble.n	800410a <_dtoa_r+0x83a>
 80040fe:	4631      	mov	r1, r6
 8004100:	461a      	mov	r2, r3
 8004102:	4620      	mov	r0, r4
 8004104:	f000 fce6 	bl	8004ad4 <__lshift>
 8004108:	4606      	mov	r6, r0
 800410a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d072      	beq.n	80041f6 <_dtoa_r+0x926>
 8004110:	4631      	mov	r1, r6
 8004112:	4650      	mov	r0, sl
 8004114:	f000 fd4a 	bl	8004bac <__mcmp>
 8004118:	2800      	cmp	r0, #0
 800411a:	da6c      	bge.n	80041f6 <_dtoa_r+0x926>
 800411c:	2300      	movs	r3, #0
 800411e:	4651      	mov	r1, sl
 8004120:	220a      	movs	r2, #10
 8004122:	4620      	mov	r0, r4
 8004124:	f000 fb28 	bl	8004778 <__multadd>
 8004128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800412e:	4682      	mov	sl, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 81b0 	beq.w	8004496 <_dtoa_r+0xbc6>
 8004136:	2300      	movs	r3, #0
 8004138:	4639      	mov	r1, r7
 800413a:	220a      	movs	r2, #10
 800413c:	4620      	mov	r0, r4
 800413e:	f000 fb1b 	bl	8004778 <__multadd>
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	4607      	mov	r7, r0
 8004148:	f300 8096 	bgt.w	8004278 <_dtoa_r+0x9a8>
 800414c:	9b07      	ldr	r3, [sp, #28]
 800414e:	2b02      	cmp	r3, #2
 8004150:	dc59      	bgt.n	8004206 <_dtoa_r+0x936>
 8004152:	e091      	b.n	8004278 <_dtoa_r+0x9a8>
 8004154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800415a:	e758      	b.n	800400e <_dtoa_r+0x73e>
 800415c:	9b04      	ldr	r3, [sp, #16]
 800415e:	1e5e      	subs	r6, r3, #1
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	42b3      	cmp	r3, r6
 8004164:	bfbf      	itttt	lt
 8004166:	9b08      	ldrlt	r3, [sp, #32]
 8004168:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800416a:	9608      	strlt	r6, [sp, #32]
 800416c:	1af3      	sublt	r3, r6, r3
 800416e:	bfb4      	ite	lt
 8004170:	18d2      	addlt	r2, r2, r3
 8004172:	1b9e      	subge	r6, r3, r6
 8004174:	9b04      	ldr	r3, [sp, #16]
 8004176:	bfbc      	itt	lt
 8004178:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800417a:	2600      	movlt	r6, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	bfb7      	itett	lt
 8004180:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004184:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004188:	1a9d      	sublt	r5, r3, r2
 800418a:	2300      	movlt	r3, #0
 800418c:	e741      	b.n	8004012 <_dtoa_r+0x742>
 800418e:	9e08      	ldr	r6, [sp, #32]
 8004190:	9d05      	ldr	r5, [sp, #20]
 8004192:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004194:	e748      	b.n	8004028 <_dtoa_r+0x758>
 8004196:	9a08      	ldr	r2, [sp, #32]
 8004198:	e770      	b.n	800407c <_dtoa_r+0x7ac>
 800419a:	9b07      	ldr	r3, [sp, #28]
 800419c:	2b01      	cmp	r3, #1
 800419e:	dc19      	bgt.n	80041d4 <_dtoa_r+0x904>
 80041a0:	9b02      	ldr	r3, [sp, #8]
 80041a2:	b9bb      	cbnz	r3, 80041d4 <_dtoa_r+0x904>
 80041a4:	9b03      	ldr	r3, [sp, #12]
 80041a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041aa:	b99b      	cbnz	r3, 80041d4 <_dtoa_r+0x904>
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041b2:	0d1b      	lsrs	r3, r3, #20
 80041b4:	051b      	lsls	r3, r3, #20
 80041b6:	b183      	cbz	r3, 80041da <_dtoa_r+0x90a>
 80041b8:	9b05      	ldr	r3, [sp, #20]
 80041ba:	3301      	adds	r3, #1
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	9b06      	ldr	r3, [sp, #24]
 80041c0:	3301      	adds	r3, #1
 80041c2:	9306      	str	r3, [sp, #24]
 80041c4:	f04f 0801 	mov.w	r8, #1
 80041c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f47f af6f 	bne.w	80040ae <_dtoa_r+0x7de>
 80041d0:	2001      	movs	r0, #1
 80041d2:	e774      	b.n	80040be <_dtoa_r+0x7ee>
 80041d4:	f04f 0800 	mov.w	r8, #0
 80041d8:	e7f6      	b.n	80041c8 <_dtoa_r+0x8f8>
 80041da:	4698      	mov	r8, r3
 80041dc:	e7f4      	b.n	80041c8 <_dtoa_r+0x8f8>
 80041de:	d082      	beq.n	80040e6 <_dtoa_r+0x816>
 80041e0:	9a05      	ldr	r2, [sp, #20]
 80041e2:	331c      	adds	r3, #28
 80041e4:	441a      	add	r2, r3
 80041e6:	9205      	str	r2, [sp, #20]
 80041e8:	9a06      	ldr	r2, [sp, #24]
 80041ea:	441a      	add	r2, r3
 80041ec:	441d      	add	r5, r3
 80041ee:	9206      	str	r2, [sp, #24]
 80041f0:	e779      	b.n	80040e6 <_dtoa_r+0x816>
 80041f2:	4603      	mov	r3, r0
 80041f4:	e7f4      	b.n	80041e0 <_dtoa_r+0x910>
 80041f6:	9b04      	ldr	r3, [sp, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dc37      	bgt.n	800426c <_dtoa_r+0x99c>
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	dd34      	ble.n	800426c <_dtoa_r+0x99c>
 8004202:	9b04      	ldr	r3, [sp, #16]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	9b01      	ldr	r3, [sp, #4]
 8004208:	b963      	cbnz	r3, 8004224 <_dtoa_r+0x954>
 800420a:	4631      	mov	r1, r6
 800420c:	2205      	movs	r2, #5
 800420e:	4620      	mov	r0, r4
 8004210:	f000 fab2 	bl	8004778 <__multadd>
 8004214:	4601      	mov	r1, r0
 8004216:	4606      	mov	r6, r0
 8004218:	4650      	mov	r0, sl
 800421a:	f000 fcc7 	bl	8004bac <__mcmp>
 800421e:	2800      	cmp	r0, #0
 8004220:	f73f adbb 	bgt.w	8003d9a <_dtoa_r+0x4ca>
 8004224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004226:	9d00      	ldr	r5, [sp, #0]
 8004228:	ea6f 0b03 	mvn.w	fp, r3
 800422c:	f04f 0800 	mov.w	r8, #0
 8004230:	4631      	mov	r1, r6
 8004232:	4620      	mov	r0, r4
 8004234:	f000 fa7e 	bl	8004734 <_Bfree>
 8004238:	2f00      	cmp	r7, #0
 800423a:	f43f aeab 	beq.w	8003f94 <_dtoa_r+0x6c4>
 800423e:	f1b8 0f00 	cmp.w	r8, #0
 8004242:	d005      	beq.n	8004250 <_dtoa_r+0x980>
 8004244:	45b8      	cmp	r8, r7
 8004246:	d003      	beq.n	8004250 <_dtoa_r+0x980>
 8004248:	4641      	mov	r1, r8
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fa72 	bl	8004734 <_Bfree>
 8004250:	4639      	mov	r1, r7
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fa6e 	bl	8004734 <_Bfree>
 8004258:	e69c      	b.n	8003f94 <_dtoa_r+0x6c4>
 800425a:	2600      	movs	r6, #0
 800425c:	4637      	mov	r7, r6
 800425e:	e7e1      	b.n	8004224 <_dtoa_r+0x954>
 8004260:	46bb      	mov	fp, r7
 8004262:	4637      	mov	r7, r6
 8004264:	e599      	b.n	8003d9a <_dtoa_r+0x4ca>
 8004266:	bf00      	nop
 8004268:	40240000 	.word	0x40240000
 800426c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80c8 	beq.w	8004404 <_dtoa_r+0xb34>
 8004274:	9b04      	ldr	r3, [sp, #16]
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	2d00      	cmp	r5, #0
 800427a:	dd05      	ble.n	8004288 <_dtoa_r+0x9b8>
 800427c:	4639      	mov	r1, r7
 800427e:	462a      	mov	r2, r5
 8004280:	4620      	mov	r0, r4
 8004282:	f000 fc27 	bl	8004ad4 <__lshift>
 8004286:	4607      	mov	r7, r0
 8004288:	f1b8 0f00 	cmp.w	r8, #0
 800428c:	d05b      	beq.n	8004346 <_dtoa_r+0xa76>
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4620      	mov	r0, r4
 8004292:	f000 fa0f 	bl	80046b4 <_Balloc>
 8004296:	4605      	mov	r5, r0
 8004298:	b928      	cbnz	r0, 80042a6 <_dtoa_r+0x9d6>
 800429a:	4b83      	ldr	r3, [pc, #524]	; (80044a8 <_dtoa_r+0xbd8>)
 800429c:	4602      	mov	r2, r0
 800429e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80042a2:	f7ff bb2e 	b.w	8003902 <_dtoa_r+0x32>
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	3202      	adds	r2, #2
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	f107 010c 	add.w	r1, r7, #12
 80042b0:	300c      	adds	r0, #12
 80042b2:	f000 ffab 	bl	800520c <memcpy>
 80042b6:	2201      	movs	r2, #1
 80042b8:	4629      	mov	r1, r5
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 fc0a 	bl	8004ad4 <__lshift>
 80042c0:	9b00      	ldr	r3, [sp, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ca:	4413      	add	r3, r2
 80042cc:	9308      	str	r3, [sp, #32]
 80042ce:	9b02      	ldr	r3, [sp, #8]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	46b8      	mov	r8, r7
 80042d6:	9306      	str	r3, [sp, #24]
 80042d8:	4607      	mov	r7, r0
 80042da:	9b04      	ldr	r3, [sp, #16]
 80042dc:	4631      	mov	r1, r6
 80042de:	3b01      	subs	r3, #1
 80042e0:	4650      	mov	r0, sl
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	f7ff fa6b 	bl	80037be <quorem>
 80042e8:	4641      	mov	r1, r8
 80042ea:	9002      	str	r0, [sp, #8]
 80042ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80042f0:	4650      	mov	r0, sl
 80042f2:	f000 fc5b 	bl	8004bac <__mcmp>
 80042f6:	463a      	mov	r2, r7
 80042f8:	9005      	str	r0, [sp, #20]
 80042fa:	4631      	mov	r1, r6
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fc71 	bl	8004be4 <__mdiff>
 8004302:	68c2      	ldr	r2, [r0, #12]
 8004304:	4605      	mov	r5, r0
 8004306:	bb02      	cbnz	r2, 800434a <_dtoa_r+0xa7a>
 8004308:	4601      	mov	r1, r0
 800430a:	4650      	mov	r0, sl
 800430c:	f000 fc4e 	bl	8004bac <__mcmp>
 8004310:	4602      	mov	r2, r0
 8004312:	4629      	mov	r1, r5
 8004314:	4620      	mov	r0, r4
 8004316:	9209      	str	r2, [sp, #36]	; 0x24
 8004318:	f000 fa0c 	bl	8004734 <_Bfree>
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004320:	9d04      	ldr	r5, [sp, #16]
 8004322:	ea43 0102 	orr.w	r1, r3, r2
 8004326:	9b06      	ldr	r3, [sp, #24]
 8004328:	4319      	orrs	r1, r3
 800432a:	d110      	bne.n	800434e <_dtoa_r+0xa7e>
 800432c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004330:	d029      	beq.n	8004386 <_dtoa_r+0xab6>
 8004332:	9b05      	ldr	r3, [sp, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	dd02      	ble.n	800433e <_dtoa_r+0xa6e>
 8004338:	9b02      	ldr	r3, [sp, #8]
 800433a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	f883 9000 	strb.w	r9, [r3]
 8004344:	e774      	b.n	8004230 <_dtoa_r+0x960>
 8004346:	4638      	mov	r0, r7
 8004348:	e7ba      	b.n	80042c0 <_dtoa_r+0x9f0>
 800434a:	2201      	movs	r2, #1
 800434c:	e7e1      	b.n	8004312 <_dtoa_r+0xa42>
 800434e:	9b05      	ldr	r3, [sp, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	db04      	blt.n	800435e <_dtoa_r+0xa8e>
 8004354:	9907      	ldr	r1, [sp, #28]
 8004356:	430b      	orrs	r3, r1
 8004358:	9906      	ldr	r1, [sp, #24]
 800435a:	430b      	orrs	r3, r1
 800435c:	d120      	bne.n	80043a0 <_dtoa_r+0xad0>
 800435e:	2a00      	cmp	r2, #0
 8004360:	dded      	ble.n	800433e <_dtoa_r+0xa6e>
 8004362:	4651      	mov	r1, sl
 8004364:	2201      	movs	r2, #1
 8004366:	4620      	mov	r0, r4
 8004368:	f000 fbb4 	bl	8004ad4 <__lshift>
 800436c:	4631      	mov	r1, r6
 800436e:	4682      	mov	sl, r0
 8004370:	f000 fc1c 	bl	8004bac <__mcmp>
 8004374:	2800      	cmp	r0, #0
 8004376:	dc03      	bgt.n	8004380 <_dtoa_r+0xab0>
 8004378:	d1e1      	bne.n	800433e <_dtoa_r+0xa6e>
 800437a:	f019 0f01 	tst.w	r9, #1
 800437e:	d0de      	beq.n	800433e <_dtoa_r+0xa6e>
 8004380:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004384:	d1d8      	bne.n	8004338 <_dtoa_r+0xa68>
 8004386:	9a01      	ldr	r2, [sp, #4]
 8004388:	2339      	movs	r3, #57	; 0x39
 800438a:	7013      	strb	r3, [r2, #0]
 800438c:	462b      	mov	r3, r5
 800438e:	461d      	mov	r5, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004396:	2a39      	cmp	r2, #57	; 0x39
 8004398:	d06c      	beq.n	8004474 <_dtoa_r+0xba4>
 800439a:	3201      	adds	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e747      	b.n	8004230 <_dtoa_r+0x960>
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	dd07      	ble.n	80043b4 <_dtoa_r+0xae4>
 80043a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043a8:	d0ed      	beq.n	8004386 <_dtoa_r+0xab6>
 80043aa:	9a01      	ldr	r2, [sp, #4]
 80043ac:	f109 0301 	add.w	r3, r9, #1
 80043b0:	7013      	strb	r3, [r2, #0]
 80043b2:	e73d      	b.n	8004230 <_dtoa_r+0x960>
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	9a08      	ldr	r2, [sp, #32]
 80043b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80043bc:	4293      	cmp	r3, r2
 80043be:	d043      	beq.n	8004448 <_dtoa_r+0xb78>
 80043c0:	4651      	mov	r1, sl
 80043c2:	2300      	movs	r3, #0
 80043c4:	220a      	movs	r2, #10
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 f9d6 	bl	8004778 <__multadd>
 80043cc:	45b8      	cmp	r8, r7
 80043ce:	4682      	mov	sl, r0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f04f 020a 	mov.w	r2, #10
 80043d8:	4641      	mov	r1, r8
 80043da:	4620      	mov	r0, r4
 80043dc:	d107      	bne.n	80043ee <_dtoa_r+0xb1e>
 80043de:	f000 f9cb 	bl	8004778 <__multadd>
 80043e2:	4680      	mov	r8, r0
 80043e4:	4607      	mov	r7, r0
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	3301      	adds	r3, #1
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	e775      	b.n	80042da <_dtoa_r+0xa0a>
 80043ee:	f000 f9c3 	bl	8004778 <__multadd>
 80043f2:	4639      	mov	r1, r7
 80043f4:	4680      	mov	r8, r0
 80043f6:	2300      	movs	r3, #0
 80043f8:	220a      	movs	r2, #10
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f9bc 	bl	8004778 <__multadd>
 8004400:	4607      	mov	r7, r0
 8004402:	e7f0      	b.n	80043e6 <_dtoa_r+0xb16>
 8004404:	9b04      	ldr	r3, [sp, #16]
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	9d00      	ldr	r5, [sp, #0]
 800440a:	4631      	mov	r1, r6
 800440c:	4650      	mov	r0, sl
 800440e:	f7ff f9d6 	bl	80037be <quorem>
 8004412:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004416:	9b00      	ldr	r3, [sp, #0]
 8004418:	f805 9b01 	strb.w	r9, [r5], #1
 800441c:	1aea      	subs	r2, r5, r3
 800441e:	9b01      	ldr	r3, [sp, #4]
 8004420:	4293      	cmp	r3, r2
 8004422:	dd07      	ble.n	8004434 <_dtoa_r+0xb64>
 8004424:	4651      	mov	r1, sl
 8004426:	2300      	movs	r3, #0
 8004428:	220a      	movs	r2, #10
 800442a:	4620      	mov	r0, r4
 800442c:	f000 f9a4 	bl	8004778 <__multadd>
 8004430:	4682      	mov	sl, r0
 8004432:	e7ea      	b.n	800440a <_dtoa_r+0xb3a>
 8004434:	9b01      	ldr	r3, [sp, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfc8      	it	gt
 800443a:	461d      	movgt	r5, r3
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	bfd8      	it	le
 8004440:	2501      	movle	r5, #1
 8004442:	441d      	add	r5, r3
 8004444:	f04f 0800 	mov.w	r8, #0
 8004448:	4651      	mov	r1, sl
 800444a:	2201      	movs	r2, #1
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fb41 	bl	8004ad4 <__lshift>
 8004452:	4631      	mov	r1, r6
 8004454:	4682      	mov	sl, r0
 8004456:	f000 fba9 	bl	8004bac <__mcmp>
 800445a:	2800      	cmp	r0, #0
 800445c:	dc96      	bgt.n	800438c <_dtoa_r+0xabc>
 800445e:	d102      	bne.n	8004466 <_dtoa_r+0xb96>
 8004460:	f019 0f01 	tst.w	r9, #1
 8004464:	d192      	bne.n	800438c <_dtoa_r+0xabc>
 8004466:	462b      	mov	r3, r5
 8004468:	461d      	mov	r5, r3
 800446a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800446e:	2a30      	cmp	r2, #48	; 0x30
 8004470:	d0fa      	beq.n	8004468 <_dtoa_r+0xb98>
 8004472:	e6dd      	b.n	8004230 <_dtoa_r+0x960>
 8004474:	9a00      	ldr	r2, [sp, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d189      	bne.n	800438e <_dtoa_r+0xabe>
 800447a:	f10b 0b01 	add.w	fp, fp, #1
 800447e:	2331      	movs	r3, #49	; 0x31
 8004480:	e796      	b.n	80043b0 <_dtoa_r+0xae0>
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <_dtoa_r+0xbdc>)
 8004484:	f7ff ba99 	b.w	80039ba <_dtoa_r+0xea>
 8004488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800448a:	2b00      	cmp	r3, #0
 800448c:	f47f aa6d 	bne.w	800396a <_dtoa_r+0x9a>
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <_dtoa_r+0xbe0>)
 8004492:	f7ff ba92 	b.w	80039ba <_dtoa_r+0xea>
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dcb5      	bgt.n	8004408 <_dtoa_r+0xb38>
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	f73f aeb1 	bgt.w	8004206 <_dtoa_r+0x936>
 80044a4:	e7b0      	b.n	8004408 <_dtoa_r+0xb38>
 80044a6:	bf00      	nop
 80044a8:	080059a0 	.word	0x080059a0
 80044ac:	08005900 	.word	0x08005900
 80044b0:	08005924 	.word	0x08005924

080044b4 <_free_r>:
 80044b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d044      	beq.n	8004544 <_free_r+0x90>
 80044ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044be:	9001      	str	r0, [sp, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f1a1 0404 	sub.w	r4, r1, #4
 80044c6:	bfb8      	it	lt
 80044c8:	18e4      	addlt	r4, r4, r3
 80044ca:	f000 f8e7 	bl	800469c <__malloc_lock>
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <_free_r+0x94>)
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	b933      	cbnz	r3, 80044e4 <_free_r+0x30>
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	6014      	str	r4, [r2, #0]
 80044da:	b003      	add	sp, #12
 80044dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044e0:	f000 b8e2 	b.w	80046a8 <__malloc_unlock>
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	d908      	bls.n	80044fa <_free_r+0x46>
 80044e8:	6825      	ldr	r5, [r4, #0]
 80044ea:	1961      	adds	r1, r4, r5
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf01      	itttt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	1949      	addeq	r1, r1, r5
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	e7ed      	b.n	80044d6 <_free_r+0x22>
 80044fa:	461a      	mov	r2, r3
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	b10b      	cbz	r3, 8004504 <_free_r+0x50>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d9fa      	bls.n	80044fa <_free_r+0x46>
 8004504:	6811      	ldr	r1, [r2, #0]
 8004506:	1855      	adds	r5, r2, r1
 8004508:	42a5      	cmp	r5, r4
 800450a:	d10b      	bne.n	8004524 <_free_r+0x70>
 800450c:	6824      	ldr	r4, [r4, #0]
 800450e:	4421      	add	r1, r4
 8004510:	1854      	adds	r4, r2, r1
 8004512:	42a3      	cmp	r3, r4
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	d1e0      	bne.n	80044da <_free_r+0x26>
 8004518:	681c      	ldr	r4, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	440c      	add	r4, r1
 8004520:	6014      	str	r4, [r2, #0]
 8004522:	e7da      	b.n	80044da <_free_r+0x26>
 8004524:	d902      	bls.n	800452c <_free_r+0x78>
 8004526:	230c      	movs	r3, #12
 8004528:	6003      	str	r3, [r0, #0]
 800452a:	e7d6      	b.n	80044da <_free_r+0x26>
 800452c:	6825      	ldr	r5, [r4, #0]
 800452e:	1961      	adds	r1, r4, r5
 8004530:	428b      	cmp	r3, r1
 8004532:	bf04      	itt	eq
 8004534:	6819      	ldreq	r1, [r3, #0]
 8004536:	685b      	ldreq	r3, [r3, #4]
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	bf04      	itt	eq
 800453c:	1949      	addeq	r1, r1, r5
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	6054      	str	r4, [r2, #4]
 8004542:	e7ca      	b.n	80044da <_free_r+0x26>
 8004544:	b003      	add	sp, #12
 8004546:	bd30      	pop	{r4, r5, pc}
 8004548:	2000039c 	.word	0x2000039c

0800454c <malloc>:
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <malloc+0xc>)
 800454e:	4601      	mov	r1, r0
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f000 b823 	b.w	800459c <_malloc_r>
 8004556:	bf00      	nop
 8004558:	2000007c 	.word	0x2000007c

0800455c <sbrk_aligned>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	4e0e      	ldr	r6, [pc, #56]	; (8004598 <sbrk_aligned+0x3c>)
 8004560:	460c      	mov	r4, r1
 8004562:	6831      	ldr	r1, [r6, #0]
 8004564:	4605      	mov	r5, r0
 8004566:	b911      	cbnz	r1, 800456e <sbrk_aligned+0x12>
 8004568:	f000 fe40 	bl	80051ec <_sbrk_r>
 800456c:	6030      	str	r0, [r6, #0]
 800456e:	4621      	mov	r1, r4
 8004570:	4628      	mov	r0, r5
 8004572:	f000 fe3b 	bl	80051ec <_sbrk_r>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	d00a      	beq.n	8004590 <sbrk_aligned+0x34>
 800457a:	1cc4      	adds	r4, r0, #3
 800457c:	f024 0403 	bic.w	r4, r4, #3
 8004580:	42a0      	cmp	r0, r4
 8004582:	d007      	beq.n	8004594 <sbrk_aligned+0x38>
 8004584:	1a21      	subs	r1, r4, r0
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fe30 	bl	80051ec <_sbrk_r>
 800458c:	3001      	adds	r0, #1
 800458e:	d101      	bne.n	8004594 <sbrk_aligned+0x38>
 8004590:	f04f 34ff 	mov.w	r4, #4294967295
 8004594:	4620      	mov	r0, r4
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	200003a0 	.word	0x200003a0

0800459c <_malloc_r>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	1ccd      	adds	r5, r1, #3
 80045a2:	f025 0503 	bic.w	r5, r5, #3
 80045a6:	3508      	adds	r5, #8
 80045a8:	2d0c      	cmp	r5, #12
 80045aa:	bf38      	it	cc
 80045ac:	250c      	movcc	r5, #12
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	4607      	mov	r7, r0
 80045b2:	db01      	blt.n	80045b8 <_malloc_r+0x1c>
 80045b4:	42a9      	cmp	r1, r5
 80045b6:	d905      	bls.n	80045c4 <_malloc_r+0x28>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	2600      	movs	r6, #0
 80045be:	4630      	mov	r0, r6
 80045c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004698 <_malloc_r+0xfc>
 80045c8:	f000 f868 	bl	800469c <__malloc_lock>
 80045cc:	f8d8 3000 	ldr.w	r3, [r8]
 80045d0:	461c      	mov	r4, r3
 80045d2:	bb5c      	cbnz	r4, 800462c <_malloc_r+0x90>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ffc0 	bl	800455c <sbrk_aligned>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	4604      	mov	r4, r0
 80045e0:	d155      	bne.n	800468e <_malloc_r+0xf2>
 80045e2:	f8d8 4000 	ldr.w	r4, [r8]
 80045e6:	4626      	mov	r6, r4
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	d145      	bne.n	8004678 <_malloc_r+0xdc>
 80045ec:	2c00      	cmp	r4, #0
 80045ee:	d048      	beq.n	8004682 <_malloc_r+0xe6>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	4631      	mov	r1, r6
 80045f4:	4638      	mov	r0, r7
 80045f6:	eb04 0903 	add.w	r9, r4, r3
 80045fa:	f000 fdf7 	bl	80051ec <_sbrk_r>
 80045fe:	4581      	cmp	r9, r0
 8004600:	d13f      	bne.n	8004682 <_malloc_r+0xe6>
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	1a6d      	subs	r5, r5, r1
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ffa7 	bl	800455c <sbrk_aligned>
 800460e:	3001      	adds	r0, #1
 8004610:	d037      	beq.n	8004682 <_malloc_r+0xe6>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	442b      	add	r3, r5
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	f8d8 3000 	ldr.w	r3, [r8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d038      	beq.n	8004692 <_malloc_r+0xf6>
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	42a2      	cmp	r2, r4
 8004624:	d12b      	bne.n	800467e <_malloc_r+0xe2>
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	e00f      	b.n	800464c <_malloc_r+0xb0>
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	1b52      	subs	r2, r2, r5
 8004630:	d41f      	bmi.n	8004672 <_malloc_r+0xd6>
 8004632:	2a0b      	cmp	r2, #11
 8004634:	d917      	bls.n	8004666 <_malloc_r+0xca>
 8004636:	1961      	adds	r1, r4, r5
 8004638:	42a3      	cmp	r3, r4
 800463a:	6025      	str	r5, [r4, #0]
 800463c:	bf18      	it	ne
 800463e:	6059      	strne	r1, [r3, #4]
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	bf08      	it	eq
 8004644:	f8c8 1000 	streq.w	r1, [r8]
 8004648:	5162      	str	r2, [r4, r5]
 800464a:	604b      	str	r3, [r1, #4]
 800464c:	4638      	mov	r0, r7
 800464e:	f104 060b 	add.w	r6, r4, #11
 8004652:	f000 f829 	bl	80046a8 <__malloc_unlock>
 8004656:	f026 0607 	bic.w	r6, r6, #7
 800465a:	1d23      	adds	r3, r4, #4
 800465c:	1af2      	subs	r2, r6, r3
 800465e:	d0ae      	beq.n	80045be <_malloc_r+0x22>
 8004660:	1b9b      	subs	r3, r3, r6
 8004662:	50a3      	str	r3, [r4, r2]
 8004664:	e7ab      	b.n	80045be <_malloc_r+0x22>
 8004666:	42a3      	cmp	r3, r4
 8004668:	6862      	ldr	r2, [r4, #4]
 800466a:	d1dd      	bne.n	8004628 <_malloc_r+0x8c>
 800466c:	f8c8 2000 	str.w	r2, [r8]
 8004670:	e7ec      	b.n	800464c <_malloc_r+0xb0>
 8004672:	4623      	mov	r3, r4
 8004674:	6864      	ldr	r4, [r4, #4]
 8004676:	e7ac      	b.n	80045d2 <_malloc_r+0x36>
 8004678:	4634      	mov	r4, r6
 800467a:	6876      	ldr	r6, [r6, #4]
 800467c:	e7b4      	b.n	80045e8 <_malloc_r+0x4c>
 800467e:	4613      	mov	r3, r2
 8004680:	e7cc      	b.n	800461c <_malloc_r+0x80>
 8004682:	230c      	movs	r3, #12
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4638      	mov	r0, r7
 8004688:	f000 f80e 	bl	80046a8 <__malloc_unlock>
 800468c:	e797      	b.n	80045be <_malloc_r+0x22>
 800468e:	6025      	str	r5, [r4, #0]
 8004690:	e7dc      	b.n	800464c <_malloc_r+0xb0>
 8004692:	605b      	str	r3, [r3, #4]
 8004694:	deff      	udf	#255	; 0xff
 8004696:	bf00      	nop
 8004698:	2000039c 	.word	0x2000039c

0800469c <__malloc_lock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_lock+0x8>)
 800469e:	f7ff b88c 	b.w	80037ba <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000398 	.word	0x20000398

080046a8 <__malloc_unlock>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__malloc_unlock+0x8>)
 80046aa:	f7ff b887 	b.w	80037bc <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	20000398 	.word	0x20000398

080046b4 <_Balloc>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	69c6      	ldr	r6, [r0, #28]
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	b976      	cbnz	r6, 80046dc <_Balloc+0x28>
 80046be:	2010      	movs	r0, #16
 80046c0:	f7ff ff44 	bl	800454c <malloc>
 80046c4:	4602      	mov	r2, r0
 80046c6:	61e0      	str	r0, [r4, #28]
 80046c8:	b920      	cbnz	r0, 80046d4 <_Balloc+0x20>
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <_Balloc+0x78>)
 80046cc:	4818      	ldr	r0, [pc, #96]	; (8004730 <_Balloc+0x7c>)
 80046ce:	216b      	movs	r1, #107	; 0x6b
 80046d0:	f000 fdaa 	bl	8005228 <__assert_func>
 80046d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046d8:	6006      	str	r6, [r0, #0]
 80046da:	60c6      	str	r6, [r0, #12]
 80046dc:	69e6      	ldr	r6, [r4, #28]
 80046de:	68f3      	ldr	r3, [r6, #12]
 80046e0:	b183      	cbz	r3, 8004704 <_Balloc+0x50>
 80046e2:	69e3      	ldr	r3, [r4, #28]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046ea:	b9b8      	cbnz	r0, 800471c <_Balloc+0x68>
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f605 	lsl.w	r6, r1, r5
 80046f2:	1d72      	adds	r2, r6, #5
 80046f4:	0092      	lsls	r2, r2, #2
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 fdb4 	bl	8005264 <_calloc_r>
 80046fc:	b160      	cbz	r0, 8004718 <_Balloc+0x64>
 80046fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004702:	e00e      	b.n	8004722 <_Balloc+0x6e>
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	2104      	movs	r1, #4
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fdab 	bl	8005264 <_calloc_r>
 800470e:	69e3      	ldr	r3, [r4, #28]
 8004710:	60f0      	str	r0, [r6, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <_Balloc+0x2e>
 8004718:	2000      	movs	r0, #0
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	6802      	ldr	r2, [r0, #0]
 800471e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004722:	2300      	movs	r3, #0
 8004724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004728:	e7f7      	b.n	800471a <_Balloc+0x66>
 800472a:	bf00      	nop
 800472c:	08005931 	.word	0x08005931
 8004730:	080059b1 	.word	0x080059b1

08004734 <_Bfree>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	69c6      	ldr	r6, [r0, #28]
 8004738:	4605      	mov	r5, r0
 800473a:	460c      	mov	r4, r1
 800473c:	b976      	cbnz	r6, 800475c <_Bfree+0x28>
 800473e:	2010      	movs	r0, #16
 8004740:	f7ff ff04 	bl	800454c <malloc>
 8004744:	4602      	mov	r2, r0
 8004746:	61e8      	str	r0, [r5, #28]
 8004748:	b920      	cbnz	r0, 8004754 <_Bfree+0x20>
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <_Bfree+0x3c>)
 800474c:	4809      	ldr	r0, [pc, #36]	; (8004774 <_Bfree+0x40>)
 800474e:	218f      	movs	r1, #143	; 0x8f
 8004750:	f000 fd6a 	bl	8005228 <__assert_func>
 8004754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004758:	6006      	str	r6, [r0, #0]
 800475a:	60c6      	str	r6, [r0, #12]
 800475c:	b13c      	cbz	r4, 800476e <_Bfree+0x3a>
 800475e:	69eb      	ldr	r3, [r5, #28]
 8004760:	6862      	ldr	r2, [r4, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004768:	6021      	str	r1, [r4, #0]
 800476a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	08005931 	.word	0x08005931
 8004774:	080059b1 	.word	0x080059b1

08004778 <__multadd>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	690d      	ldr	r5, [r1, #16]
 800477e:	4607      	mov	r7, r0
 8004780:	460c      	mov	r4, r1
 8004782:	461e      	mov	r6, r3
 8004784:	f101 0c14 	add.w	ip, r1, #20
 8004788:	2000      	movs	r0, #0
 800478a:	f8dc 3000 	ldr.w	r3, [ip]
 800478e:	b299      	uxth	r1, r3
 8004790:	fb02 6101 	mla	r1, r2, r1, r6
 8004794:	0c1e      	lsrs	r6, r3, #16
 8004796:	0c0b      	lsrs	r3, r1, #16
 8004798:	fb02 3306 	mla	r3, r2, r6, r3
 800479c:	b289      	uxth	r1, r1
 800479e:	3001      	adds	r0, #1
 80047a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047a4:	4285      	cmp	r5, r0
 80047a6:	f84c 1b04 	str.w	r1, [ip], #4
 80047aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047ae:	dcec      	bgt.n	800478a <__multadd+0x12>
 80047b0:	b30e      	cbz	r6, 80047f6 <__multadd+0x7e>
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc19      	bgt.n	80047ec <__multadd+0x74>
 80047b8:	6861      	ldr	r1, [r4, #4]
 80047ba:	4638      	mov	r0, r7
 80047bc:	3101      	adds	r1, #1
 80047be:	f7ff ff79 	bl	80046b4 <_Balloc>
 80047c2:	4680      	mov	r8, r0
 80047c4:	b928      	cbnz	r0, 80047d2 <__multadd+0x5a>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <__multadd+0x84>)
 80047ca:	480d      	ldr	r0, [pc, #52]	; (8004800 <__multadd+0x88>)
 80047cc:	21ba      	movs	r1, #186	; 0xba
 80047ce:	f000 fd2b 	bl	8005228 <__assert_func>
 80047d2:	6922      	ldr	r2, [r4, #16]
 80047d4:	3202      	adds	r2, #2
 80047d6:	f104 010c 	add.w	r1, r4, #12
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	300c      	adds	r0, #12
 80047de:	f000 fd15 	bl	800520c <memcpy>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ffa5 	bl	8004734 <_Bfree>
 80047ea:	4644      	mov	r4, r8
 80047ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047f0:	3501      	adds	r5, #1
 80047f2:	615e      	str	r6, [r3, #20]
 80047f4:	6125      	str	r5, [r4, #16]
 80047f6:	4620      	mov	r0, r4
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	080059a0 	.word	0x080059a0
 8004800:	080059b1 	.word	0x080059b1

08004804 <__hi0bits>:
 8004804:	0c03      	lsrs	r3, r0, #16
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	b9d3      	cbnz	r3, 8004840 <__hi0bits+0x3c>
 800480a:	0400      	lsls	r0, r0, #16
 800480c:	2310      	movs	r3, #16
 800480e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004812:	bf04      	itt	eq
 8004814:	0200      	lsleq	r0, r0, #8
 8004816:	3308      	addeq	r3, #8
 8004818:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800481c:	bf04      	itt	eq
 800481e:	0100      	lsleq	r0, r0, #4
 8004820:	3304      	addeq	r3, #4
 8004822:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004826:	bf04      	itt	eq
 8004828:	0080      	lsleq	r0, r0, #2
 800482a:	3302      	addeq	r3, #2
 800482c:	2800      	cmp	r0, #0
 800482e:	db05      	blt.n	800483c <__hi0bits+0x38>
 8004830:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004834:	f103 0301 	add.w	r3, r3, #1
 8004838:	bf08      	it	eq
 800483a:	2320      	moveq	r3, #32
 800483c:	4618      	mov	r0, r3
 800483e:	4770      	bx	lr
 8004840:	2300      	movs	r3, #0
 8004842:	e7e4      	b.n	800480e <__hi0bits+0xa>

08004844 <__lo0bits>:
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	f013 0207 	ands.w	r2, r3, #7
 800484a:	d00c      	beq.n	8004866 <__lo0bits+0x22>
 800484c:	07d9      	lsls	r1, r3, #31
 800484e:	d422      	bmi.n	8004896 <__lo0bits+0x52>
 8004850:	079a      	lsls	r2, r3, #30
 8004852:	bf49      	itett	mi
 8004854:	085b      	lsrmi	r3, r3, #1
 8004856:	089b      	lsrpl	r3, r3, #2
 8004858:	6003      	strmi	r3, [r0, #0]
 800485a:	2201      	movmi	r2, #1
 800485c:	bf5c      	itt	pl
 800485e:	6003      	strpl	r3, [r0, #0]
 8004860:	2202      	movpl	r2, #2
 8004862:	4610      	mov	r0, r2
 8004864:	4770      	bx	lr
 8004866:	b299      	uxth	r1, r3
 8004868:	b909      	cbnz	r1, 800486e <__lo0bits+0x2a>
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	2210      	movs	r2, #16
 800486e:	b2d9      	uxtb	r1, r3
 8004870:	b909      	cbnz	r1, 8004876 <__lo0bits+0x32>
 8004872:	3208      	adds	r2, #8
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	0719      	lsls	r1, r3, #28
 8004878:	bf04      	itt	eq
 800487a:	091b      	lsreq	r3, r3, #4
 800487c:	3204      	addeq	r2, #4
 800487e:	0799      	lsls	r1, r3, #30
 8004880:	bf04      	itt	eq
 8004882:	089b      	lsreq	r3, r3, #2
 8004884:	3202      	addeq	r2, #2
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d403      	bmi.n	8004892 <__lo0bits+0x4e>
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	f102 0201 	add.w	r2, r2, #1
 8004890:	d003      	beq.n	800489a <__lo0bits+0x56>
 8004892:	6003      	str	r3, [r0, #0]
 8004894:	e7e5      	b.n	8004862 <__lo0bits+0x1e>
 8004896:	2200      	movs	r2, #0
 8004898:	e7e3      	b.n	8004862 <__lo0bits+0x1e>
 800489a:	2220      	movs	r2, #32
 800489c:	e7e1      	b.n	8004862 <__lo0bits+0x1e>
	...

080048a0 <__i2b>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	2101      	movs	r1, #1
 80048a6:	f7ff ff05 	bl	80046b4 <_Balloc>
 80048aa:	4602      	mov	r2, r0
 80048ac:	b928      	cbnz	r0, 80048ba <__i2b+0x1a>
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <__i2b+0x24>)
 80048b0:	4805      	ldr	r0, [pc, #20]	; (80048c8 <__i2b+0x28>)
 80048b2:	f240 1145 	movw	r1, #325	; 0x145
 80048b6:	f000 fcb7 	bl	8005228 <__assert_func>
 80048ba:	2301      	movs	r3, #1
 80048bc:	6144      	str	r4, [r0, #20]
 80048be:	6103      	str	r3, [r0, #16]
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	080059a0 	.word	0x080059a0
 80048c8:	080059b1 	.word	0x080059b1

080048cc <__multiply>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	4691      	mov	r9, r2
 80048d2:	690a      	ldr	r2, [r1, #16]
 80048d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	bfb8      	it	lt
 80048dc:	460b      	movlt	r3, r1
 80048de:	460c      	mov	r4, r1
 80048e0:	bfbc      	itt	lt
 80048e2:	464c      	movlt	r4, r9
 80048e4:	4699      	movlt	r9, r3
 80048e6:	6927      	ldr	r7, [r4, #16]
 80048e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	6861      	ldr	r1, [r4, #4]
 80048f0:	eb07 060a 	add.w	r6, r7, sl
 80048f4:	42b3      	cmp	r3, r6
 80048f6:	b085      	sub	sp, #20
 80048f8:	bfb8      	it	lt
 80048fa:	3101      	addlt	r1, #1
 80048fc:	f7ff feda 	bl	80046b4 <_Balloc>
 8004900:	b930      	cbnz	r0, 8004910 <__multiply+0x44>
 8004902:	4602      	mov	r2, r0
 8004904:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <__multiply+0x14c>)
 8004906:	4845      	ldr	r0, [pc, #276]	; (8004a1c <__multiply+0x150>)
 8004908:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800490c:	f000 fc8c 	bl	8005228 <__assert_func>
 8004910:	f100 0514 	add.w	r5, r0, #20
 8004914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004918:	462b      	mov	r3, r5
 800491a:	2200      	movs	r2, #0
 800491c:	4543      	cmp	r3, r8
 800491e:	d321      	bcc.n	8004964 <__multiply+0x98>
 8004920:	f104 0314 	add.w	r3, r4, #20
 8004924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004928:	f109 0314 	add.w	r3, r9, #20
 800492c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004930:	9202      	str	r2, [sp, #8]
 8004932:	1b3a      	subs	r2, r7, r4
 8004934:	3a15      	subs	r2, #21
 8004936:	f022 0203 	bic.w	r2, r2, #3
 800493a:	3204      	adds	r2, #4
 800493c:	f104 0115 	add.w	r1, r4, #21
 8004940:	428f      	cmp	r7, r1
 8004942:	bf38      	it	cc
 8004944:	2204      	movcc	r2, #4
 8004946:	9201      	str	r2, [sp, #4]
 8004948:	9a02      	ldr	r2, [sp, #8]
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	429a      	cmp	r2, r3
 800494e:	d80c      	bhi.n	800496a <__multiply+0x9e>
 8004950:	2e00      	cmp	r6, #0
 8004952:	dd03      	ble.n	800495c <__multiply+0x90>
 8004954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <__multiply+0x148>
 800495c:	6106      	str	r6, [r0, #16]
 800495e:	b005      	add	sp, #20
 8004960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004964:	f843 2b04 	str.w	r2, [r3], #4
 8004968:	e7d8      	b.n	800491c <__multiply+0x50>
 800496a:	f8b3 a000 	ldrh.w	sl, [r3]
 800496e:	f1ba 0f00 	cmp.w	sl, #0
 8004972:	d024      	beq.n	80049be <__multiply+0xf2>
 8004974:	f104 0e14 	add.w	lr, r4, #20
 8004978:	46a9      	mov	r9, r5
 800497a:	f04f 0c00 	mov.w	ip, #0
 800497e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004982:	f8d9 1000 	ldr.w	r1, [r9]
 8004986:	fa1f fb82 	uxth.w	fp, r2
 800498a:	b289      	uxth	r1, r1
 800498c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004994:	f8d9 2000 	ldr.w	r2, [r9]
 8004998:	4461      	add	r1, ip
 800499a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800499e:	fb0a c20b 	mla	r2, sl, fp, ip
 80049a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049a6:	b289      	uxth	r1, r1
 80049a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049ac:	4577      	cmp	r7, lr
 80049ae:	f849 1b04 	str.w	r1, [r9], #4
 80049b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049b6:	d8e2      	bhi.n	800497e <__multiply+0xb2>
 80049b8:	9a01      	ldr	r2, [sp, #4]
 80049ba:	f845 c002 	str.w	ip, [r5, r2]
 80049be:	9a03      	ldr	r2, [sp, #12]
 80049c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049c4:	3304      	adds	r3, #4
 80049c6:	f1b9 0f00 	cmp.w	r9, #0
 80049ca:	d021      	beq.n	8004a10 <__multiply+0x144>
 80049cc:	6829      	ldr	r1, [r5, #0]
 80049ce:	f104 0c14 	add.w	ip, r4, #20
 80049d2:	46ae      	mov	lr, r5
 80049d4:	f04f 0a00 	mov.w	sl, #0
 80049d8:	f8bc b000 	ldrh.w	fp, [ip]
 80049dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049e0:	fb09 220b 	mla	r2, r9, fp, r2
 80049e4:	4452      	add	r2, sl
 80049e6:	b289      	uxth	r1, r1
 80049e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049ec:	f84e 1b04 	str.w	r1, [lr], #4
 80049f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80049f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80049f8:	f8be 1000 	ldrh.w	r1, [lr]
 80049fc:	fb09 110a 	mla	r1, r9, sl, r1
 8004a00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a04:	4567      	cmp	r7, ip
 8004a06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a0a:	d8e5      	bhi.n	80049d8 <__multiply+0x10c>
 8004a0c:	9a01      	ldr	r2, [sp, #4]
 8004a0e:	50a9      	str	r1, [r5, r2]
 8004a10:	3504      	adds	r5, #4
 8004a12:	e799      	b.n	8004948 <__multiply+0x7c>
 8004a14:	3e01      	subs	r6, #1
 8004a16:	e79b      	b.n	8004950 <__multiply+0x84>
 8004a18:	080059a0 	.word	0x080059a0
 8004a1c:	080059b1 	.word	0x080059b1

08004a20 <__pow5mult>:
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	4615      	mov	r5, r2
 8004a26:	f012 0203 	ands.w	r2, r2, #3
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460f      	mov	r7, r1
 8004a2e:	d007      	beq.n	8004a40 <__pow5mult+0x20>
 8004a30:	4c25      	ldr	r4, [pc, #148]	; (8004ac8 <__pow5mult+0xa8>)
 8004a32:	3a01      	subs	r2, #1
 8004a34:	2300      	movs	r3, #0
 8004a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a3a:	f7ff fe9d 	bl	8004778 <__multadd>
 8004a3e:	4607      	mov	r7, r0
 8004a40:	10ad      	asrs	r5, r5, #2
 8004a42:	d03d      	beq.n	8004ac0 <__pow5mult+0xa0>
 8004a44:	69f4      	ldr	r4, [r6, #28]
 8004a46:	b97c      	cbnz	r4, 8004a68 <__pow5mult+0x48>
 8004a48:	2010      	movs	r0, #16
 8004a4a:	f7ff fd7f 	bl	800454c <malloc>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	61f0      	str	r0, [r6, #28]
 8004a52:	b928      	cbnz	r0, 8004a60 <__pow5mult+0x40>
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <__pow5mult+0xac>)
 8004a56:	481e      	ldr	r0, [pc, #120]	; (8004ad0 <__pow5mult+0xb0>)
 8004a58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004a5c:	f000 fbe4 	bl	8005228 <__assert_func>
 8004a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a64:	6004      	str	r4, [r0, #0]
 8004a66:	60c4      	str	r4, [r0, #12]
 8004a68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a70:	b94c      	cbnz	r4, 8004a86 <__pow5mult+0x66>
 8004a72:	f240 2171 	movw	r1, #625	; 0x271
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff ff12 	bl	80048a0 <__i2b>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a82:	4604      	mov	r4, r0
 8004a84:	6003      	str	r3, [r0, #0]
 8004a86:	f04f 0900 	mov.w	r9, #0
 8004a8a:	07eb      	lsls	r3, r5, #31
 8004a8c:	d50a      	bpl.n	8004aa4 <__pow5mult+0x84>
 8004a8e:	4639      	mov	r1, r7
 8004a90:	4622      	mov	r2, r4
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7ff ff1a 	bl	80048cc <__multiply>
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff fe49 	bl	8004734 <_Bfree>
 8004aa2:	4647      	mov	r7, r8
 8004aa4:	106d      	asrs	r5, r5, #1
 8004aa6:	d00b      	beq.n	8004ac0 <__pow5mult+0xa0>
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	b938      	cbnz	r0, 8004abc <__pow5mult+0x9c>
 8004aac:	4622      	mov	r2, r4
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff ff0b 	bl	80048cc <__multiply>
 8004ab6:	6020      	str	r0, [r4, #0]
 8004ab8:	f8c0 9000 	str.w	r9, [r0]
 8004abc:	4604      	mov	r4, r0
 8004abe:	e7e4      	b.n	8004a8a <__pow5mult+0x6a>
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08005b00 	.word	0x08005b00
 8004acc:	08005931 	.word	0x08005931
 8004ad0:	080059b1 	.word	0x080059b1

08004ad4 <__lshift>:
 8004ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	460c      	mov	r4, r1
 8004ada:	6849      	ldr	r1, [r1, #4]
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	4691      	mov	r9, r2
 8004ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004aec:	f108 0601 	add.w	r6, r8, #1
 8004af0:	42b3      	cmp	r3, r6
 8004af2:	db0b      	blt.n	8004b0c <__lshift+0x38>
 8004af4:	4638      	mov	r0, r7
 8004af6:	f7ff fddd 	bl	80046b4 <_Balloc>
 8004afa:	4605      	mov	r5, r0
 8004afc:	b948      	cbnz	r0, 8004b12 <__lshift+0x3e>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <__lshift+0xd0>)
 8004b02:	4829      	ldr	r0, [pc, #164]	; (8004ba8 <__lshift+0xd4>)
 8004b04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004b08:	f000 fb8e 	bl	8005228 <__assert_func>
 8004b0c:	3101      	adds	r1, #1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	e7ee      	b.n	8004af0 <__lshift+0x1c>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f100 0114 	add.w	r1, r0, #20
 8004b18:	f100 0210 	add.w	r2, r0, #16
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	4553      	cmp	r3, sl
 8004b20:	db33      	blt.n	8004b8a <__lshift+0xb6>
 8004b22:	6920      	ldr	r0, [r4, #16]
 8004b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b28:	f104 0314 	add.w	r3, r4, #20
 8004b2c:	f019 091f 	ands.w	r9, r9, #31
 8004b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b38:	d02b      	beq.n	8004b92 <__lshift+0xbe>
 8004b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8004b3e:	468a      	mov	sl, r1
 8004b40:	2200      	movs	r2, #0
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	fa00 f009 	lsl.w	r0, r0, r9
 8004b48:	4310      	orrs	r0, r2
 8004b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8004b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b52:	459c      	cmp	ip, r3
 8004b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b58:	d8f3      	bhi.n	8004b42 <__lshift+0x6e>
 8004b5a:	ebac 0304 	sub.w	r3, ip, r4
 8004b5e:	3b15      	subs	r3, #21
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	3304      	adds	r3, #4
 8004b66:	f104 0015 	add.w	r0, r4, #21
 8004b6a:	4584      	cmp	ip, r0
 8004b6c:	bf38      	it	cc
 8004b6e:	2304      	movcc	r3, #4
 8004b70:	50ca      	str	r2, [r1, r3]
 8004b72:	b10a      	cbz	r2, 8004b78 <__lshift+0xa4>
 8004b74:	f108 0602 	add.w	r6, r8, #2
 8004b78:	3e01      	subs	r6, #1
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	612e      	str	r6, [r5, #16]
 8004b7e:	4621      	mov	r1, r4
 8004b80:	f7ff fdd8 	bl	8004734 <_Bfree>
 8004b84:	4628      	mov	r0, r5
 8004b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b8e:	3301      	adds	r3, #1
 8004b90:	e7c5      	b.n	8004b1e <__lshift+0x4a>
 8004b92:	3904      	subs	r1, #4
 8004b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b9c:	459c      	cmp	ip, r3
 8004b9e:	d8f9      	bhi.n	8004b94 <__lshift+0xc0>
 8004ba0:	e7ea      	b.n	8004b78 <__lshift+0xa4>
 8004ba2:	bf00      	nop
 8004ba4:	080059a0 	.word	0x080059a0
 8004ba8:	080059b1 	.word	0x080059b1

08004bac <__mcmp>:
 8004bac:	b530      	push	{r4, r5, lr}
 8004bae:	6902      	ldr	r2, [r0, #16]
 8004bb0:	690c      	ldr	r4, [r1, #16]
 8004bb2:	1b12      	subs	r2, r2, r4
 8004bb4:	d10e      	bne.n	8004bd4 <__mcmp+0x28>
 8004bb6:	f100 0314 	add.w	r3, r0, #20
 8004bba:	3114      	adds	r1, #20
 8004bbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004bc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004bc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004bc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004bcc:	42a5      	cmp	r5, r4
 8004bce:	d003      	beq.n	8004bd8 <__mcmp+0x2c>
 8004bd0:	d305      	bcc.n	8004bde <__mcmp+0x32>
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	bd30      	pop	{r4, r5, pc}
 8004bd8:	4283      	cmp	r3, r0
 8004bda:	d3f3      	bcc.n	8004bc4 <__mcmp+0x18>
 8004bdc:	e7fa      	b.n	8004bd4 <__mcmp+0x28>
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	e7f7      	b.n	8004bd4 <__mcmp+0x28>

08004be4 <__mdiff>:
 8004be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	460c      	mov	r4, r1
 8004bea:	4606      	mov	r6, r0
 8004bec:	4611      	mov	r1, r2
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4690      	mov	r8, r2
 8004bf2:	f7ff ffdb 	bl	8004bac <__mcmp>
 8004bf6:	1e05      	subs	r5, r0, #0
 8004bf8:	d110      	bne.n	8004c1c <__mdiff+0x38>
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7ff fd59 	bl	80046b4 <_Balloc>
 8004c02:	b930      	cbnz	r0, 8004c12 <__mdiff+0x2e>
 8004c04:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <__mdiff+0x10c>)
 8004c06:	4602      	mov	r2, r0
 8004c08:	f240 2137 	movw	r1, #567	; 0x237
 8004c0c:	4839      	ldr	r0, [pc, #228]	; (8004cf4 <__mdiff+0x110>)
 8004c0e:	f000 fb0b 	bl	8005228 <__assert_func>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1c:	bfa4      	itt	ge
 8004c1e:	4643      	movge	r3, r8
 8004c20:	46a0      	movge	r8, r4
 8004c22:	4630      	mov	r0, r6
 8004c24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004c28:	bfa6      	itte	ge
 8004c2a:	461c      	movge	r4, r3
 8004c2c:	2500      	movge	r5, #0
 8004c2e:	2501      	movlt	r5, #1
 8004c30:	f7ff fd40 	bl	80046b4 <_Balloc>
 8004c34:	b920      	cbnz	r0, 8004c40 <__mdiff+0x5c>
 8004c36:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <__mdiff+0x10c>)
 8004c38:	4602      	mov	r2, r0
 8004c3a:	f240 2145 	movw	r1, #581	; 0x245
 8004c3e:	e7e5      	b.n	8004c0c <__mdiff+0x28>
 8004c40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c44:	6926      	ldr	r6, [r4, #16]
 8004c46:	60c5      	str	r5, [r0, #12]
 8004c48:	f104 0914 	add.w	r9, r4, #20
 8004c4c:	f108 0514 	add.w	r5, r8, #20
 8004c50:	f100 0e14 	add.w	lr, r0, #20
 8004c54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004c58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c5c:	f108 0210 	add.w	r2, r8, #16
 8004c60:	46f2      	mov	sl, lr
 8004c62:	2100      	movs	r1, #0
 8004c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c6c:	fa11 f88b 	uxtah	r8, r1, fp
 8004c70:	b299      	uxth	r1, r3
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	eba8 0801 	sub.w	r8, r8, r1
 8004c78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c80:	fa1f f888 	uxth.w	r8, r8
 8004c84:	1419      	asrs	r1, r3, #16
 8004c86:	454e      	cmp	r6, r9
 8004c88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c8c:	f84a 3b04 	str.w	r3, [sl], #4
 8004c90:	d8e8      	bhi.n	8004c64 <__mdiff+0x80>
 8004c92:	1b33      	subs	r3, r6, r4
 8004c94:	3b15      	subs	r3, #21
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	3415      	adds	r4, #21
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	bf38      	it	cc
 8004ca2:	2304      	movcc	r3, #4
 8004ca4:	441d      	add	r5, r3
 8004ca6:	4473      	add	r3, lr
 8004ca8:	469e      	mov	lr, r3
 8004caa:	462e      	mov	r6, r5
 8004cac:	4566      	cmp	r6, ip
 8004cae:	d30e      	bcc.n	8004cce <__mdiff+0xea>
 8004cb0:	f10c 0203 	add.w	r2, ip, #3
 8004cb4:	1b52      	subs	r2, r2, r5
 8004cb6:	f022 0203 	bic.w	r2, r2, #3
 8004cba:	3d03      	subs	r5, #3
 8004cbc:	45ac      	cmp	ip, r5
 8004cbe:	bf38      	it	cc
 8004cc0:	2200      	movcc	r2, #0
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004cc8:	b17a      	cbz	r2, 8004cea <__mdiff+0x106>
 8004cca:	6107      	str	r7, [r0, #16]
 8004ccc:	e7a4      	b.n	8004c18 <__mdiff+0x34>
 8004cce:	f856 8b04 	ldr.w	r8, [r6], #4
 8004cd2:	fa11 f288 	uxtah	r2, r1, r8
 8004cd6:	1414      	asrs	r4, r2, #16
 8004cd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004ce2:	f84e 2b04 	str.w	r2, [lr], #4
 8004ce6:	1421      	asrs	r1, r4, #16
 8004ce8:	e7e0      	b.n	8004cac <__mdiff+0xc8>
 8004cea:	3f01      	subs	r7, #1
 8004cec:	e7ea      	b.n	8004cc4 <__mdiff+0xe0>
 8004cee:	bf00      	nop
 8004cf0:	080059a0 	.word	0x080059a0
 8004cf4:	080059b1 	.word	0x080059b1

08004cf8 <__d2b>:
 8004cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	460f      	mov	r7, r1
 8004cfe:	2101      	movs	r1, #1
 8004d00:	ec59 8b10 	vmov	r8, r9, d0
 8004d04:	4616      	mov	r6, r2
 8004d06:	f7ff fcd5 	bl	80046b4 <_Balloc>
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	b930      	cbnz	r0, 8004d1c <__d2b+0x24>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <__d2b+0xac>)
 8004d12:	4825      	ldr	r0, [pc, #148]	; (8004da8 <__d2b+0xb0>)
 8004d14:	f240 310f 	movw	r1, #783	; 0x30f
 8004d18:	f000 fa86 	bl	8005228 <__assert_func>
 8004d1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d24:	bb2d      	cbnz	r5, 8004d72 <__d2b+0x7a>
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	f1b8 0300 	subs.w	r3, r8, #0
 8004d2c:	d026      	beq.n	8004d7c <__d2b+0x84>
 8004d2e:	4668      	mov	r0, sp
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f7ff fd87 	bl	8004844 <__lo0bits>
 8004d36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004d3a:	b1e8      	cbz	r0, 8004d78 <__d2b+0x80>
 8004d3c:	f1c0 0320 	rsb	r3, r0, #32
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	430b      	orrs	r3, r1
 8004d46:	40c2      	lsrs	r2, r0
 8004d48:	6163      	str	r3, [r4, #20]
 8004d4a:	9201      	str	r2, [sp, #4]
 8004d4c:	9b01      	ldr	r3, [sp, #4]
 8004d4e:	61a3      	str	r3, [r4, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2202      	movne	r2, #2
 8004d56:	2201      	moveq	r2, #1
 8004d58:	6122      	str	r2, [r4, #16]
 8004d5a:	b1bd      	cbz	r5, 8004d8c <__d2b+0x94>
 8004d5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d60:	4405      	add	r5, r0
 8004d62:	603d      	str	r5, [r7, #0]
 8004d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d68:	6030      	str	r0, [r6, #0]
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	b003      	add	sp, #12
 8004d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d76:	e7d6      	b.n	8004d26 <__d2b+0x2e>
 8004d78:	6161      	str	r1, [r4, #20]
 8004d7a:	e7e7      	b.n	8004d4c <__d2b+0x54>
 8004d7c:	a801      	add	r0, sp, #4
 8004d7e:	f7ff fd61 	bl	8004844 <__lo0bits>
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	6163      	str	r3, [r4, #20]
 8004d86:	3020      	adds	r0, #32
 8004d88:	2201      	movs	r2, #1
 8004d8a:	e7e5      	b.n	8004d58 <__d2b+0x60>
 8004d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d94:	6038      	str	r0, [r7, #0]
 8004d96:	6918      	ldr	r0, [r3, #16]
 8004d98:	f7ff fd34 	bl	8004804 <__hi0bits>
 8004d9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004da0:	e7e2      	b.n	8004d68 <__d2b+0x70>
 8004da2:	bf00      	nop
 8004da4:	080059a0 	.word	0x080059a0
 8004da8:	080059b1 	.word	0x080059b1

08004dac <__ssputs_r>:
 8004dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db0:	688e      	ldr	r6, [r1, #8]
 8004db2:	461f      	mov	r7, r3
 8004db4:	42be      	cmp	r6, r7
 8004db6:	680b      	ldr	r3, [r1, #0]
 8004db8:	4682      	mov	sl, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4690      	mov	r8, r2
 8004dbe:	d82c      	bhi.n	8004e1a <__ssputs_r+0x6e>
 8004dc0:	898a      	ldrh	r2, [r1, #12]
 8004dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dc6:	d026      	beq.n	8004e16 <__ssputs_r+0x6a>
 8004dc8:	6965      	ldr	r5, [r4, #20]
 8004dca:	6909      	ldr	r1, [r1, #16]
 8004dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd0:	eba3 0901 	sub.w	r9, r3, r1
 8004dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd8:	1c7b      	adds	r3, r7, #1
 8004dda:	444b      	add	r3, r9
 8004ddc:	106d      	asrs	r5, r5, #1
 8004dde:	429d      	cmp	r5, r3
 8004de0:	bf38      	it	cc
 8004de2:	461d      	movcc	r5, r3
 8004de4:	0553      	lsls	r3, r2, #21
 8004de6:	d527      	bpl.n	8004e38 <__ssputs_r+0x8c>
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7ff fbd7 	bl	800459c <_malloc_r>
 8004dee:	4606      	mov	r6, r0
 8004df0:	b360      	cbz	r0, 8004e4c <__ssputs_r+0xa0>
 8004df2:	6921      	ldr	r1, [r4, #16]
 8004df4:	464a      	mov	r2, r9
 8004df6:	f000 fa09 	bl	800520c <memcpy>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	6126      	str	r6, [r4, #16]
 8004e08:	6165      	str	r5, [r4, #20]
 8004e0a:	444e      	add	r6, r9
 8004e0c:	eba5 0509 	sub.w	r5, r5, r9
 8004e10:	6026      	str	r6, [r4, #0]
 8004e12:	60a5      	str	r5, [r4, #8]
 8004e14:	463e      	mov	r6, r7
 8004e16:	42be      	cmp	r6, r7
 8004e18:	d900      	bls.n	8004e1c <__ssputs_r+0x70>
 8004e1a:	463e      	mov	r6, r7
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	4632      	mov	r2, r6
 8004e20:	4641      	mov	r1, r8
 8004e22:	f000 f9c9 	bl	80051b8 <memmove>
 8004e26:	68a3      	ldr	r3, [r4, #8]
 8004e28:	1b9b      	subs	r3, r3, r6
 8004e2a:	60a3      	str	r3, [r4, #8]
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	4433      	add	r3, r6
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	2000      	movs	r0, #0
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	462a      	mov	r2, r5
 8004e3a:	f000 fa3b 	bl	80052b4 <_realloc_r>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1e0      	bne.n	8004e06 <__ssputs_r+0x5a>
 8004e44:	6921      	ldr	r1, [r4, #16]
 8004e46:	4650      	mov	r0, sl
 8004e48:	f7ff fb34 	bl	80044b4 <_free_r>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	f8ca 3000 	str.w	r3, [sl]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5e:	e7e9      	b.n	8004e34 <__ssputs_r+0x88>

08004e60 <_svfiprintf_r>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	4698      	mov	r8, r3
 8004e66:	898b      	ldrh	r3, [r1, #12]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	b09d      	sub	sp, #116	; 0x74
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	460d      	mov	r5, r1
 8004e70:	4614      	mov	r4, r2
 8004e72:	d50e      	bpl.n	8004e92 <_svfiprintf_r+0x32>
 8004e74:	690b      	ldr	r3, [r1, #16]
 8004e76:	b963      	cbnz	r3, 8004e92 <_svfiprintf_r+0x32>
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	f7ff fb8f 	bl	800459c <_malloc_r>
 8004e7e:	6028      	str	r0, [r5, #0]
 8004e80:	6128      	str	r0, [r5, #16]
 8004e82:	b920      	cbnz	r0, 8004e8e <_svfiprintf_r+0x2e>
 8004e84:	230c      	movs	r3, #12
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e0d0      	b.n	8005030 <_svfiprintf_r+0x1d0>
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	616b      	str	r3, [r5, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9309      	str	r3, [sp, #36]	; 0x24
 8004e96:	2320      	movs	r3, #32
 8004e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea0:	2330      	movs	r3, #48	; 0x30
 8004ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005048 <_svfiprintf_r+0x1e8>
 8004ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eaa:	f04f 0901 	mov.w	r9, #1
 8004eae:	4623      	mov	r3, r4
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb6:	b10a      	cbz	r2, 8004ebc <_svfiprintf_r+0x5c>
 8004eb8:	2a25      	cmp	r2, #37	; 0x25
 8004eba:	d1f9      	bne.n	8004eb0 <_svfiprintf_r+0x50>
 8004ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec0:	d00b      	beq.n	8004eda <_svfiprintf_r+0x7a>
 8004ec2:	465b      	mov	r3, fp
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f7ff ff6f 	bl	8004dac <__ssputs_r>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f000 80a9 	beq.w	8005026 <_svfiprintf_r+0x1c6>
 8004ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed6:	445a      	add	r2, fp
 8004ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eda:	f89a 3000 	ldrb.w	r3, [sl]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80a1 	beq.w	8005026 <_svfiprintf_r+0x1c6>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eee:	f10a 0a01 	add.w	sl, sl, #1
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	9307      	str	r3, [sp, #28]
 8004ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efa:	931a      	str	r3, [sp, #104]	; 0x68
 8004efc:	4654      	mov	r4, sl
 8004efe:	2205      	movs	r2, #5
 8004f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f04:	4850      	ldr	r0, [pc, #320]	; (8005048 <_svfiprintf_r+0x1e8>)
 8004f06:	f7fb f963 	bl	80001d0 <memchr>
 8004f0a:	9a04      	ldr	r2, [sp, #16]
 8004f0c:	b9d8      	cbnz	r0, 8004f46 <_svfiprintf_r+0xe6>
 8004f0e:	06d0      	lsls	r0, r2, #27
 8004f10:	bf44      	itt	mi
 8004f12:	2320      	movmi	r3, #32
 8004f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f18:	0711      	lsls	r1, r2, #28
 8004f1a:	bf44      	itt	mi
 8004f1c:	232b      	movmi	r3, #43	; 0x2b
 8004f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f22:	f89a 3000 	ldrb.w	r3, [sl]
 8004f26:	2b2a      	cmp	r3, #42	; 0x2a
 8004f28:	d015      	beq.n	8004f56 <_svfiprintf_r+0xf6>
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	4654      	mov	r4, sl
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f04f 0c0a 	mov.w	ip, #10
 8004f34:	4621      	mov	r1, r4
 8004f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3a:	3b30      	subs	r3, #48	; 0x30
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d94d      	bls.n	8004fdc <_svfiprintf_r+0x17c>
 8004f40:	b1b0      	cbz	r0, 8004f70 <_svfiprintf_r+0x110>
 8004f42:	9207      	str	r2, [sp, #28]
 8004f44:	e014      	b.n	8004f70 <_svfiprintf_r+0x110>
 8004f46:	eba0 0308 	sub.w	r3, r0, r8
 8004f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	46a2      	mov	sl, r4
 8004f54:	e7d2      	b.n	8004efc <_svfiprintf_r+0x9c>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	1d19      	adds	r1, r3, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	9103      	str	r1, [sp, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbb      	ittet	lt
 8004f62:	425b      	neglt	r3, r3
 8004f64:	f042 0202 	orrlt.w	r2, r2, #2
 8004f68:	9307      	strge	r3, [sp, #28]
 8004f6a:	9307      	strlt	r3, [sp, #28]
 8004f6c:	bfb8      	it	lt
 8004f6e:	9204      	strlt	r2, [sp, #16]
 8004f70:	7823      	ldrb	r3, [r4, #0]
 8004f72:	2b2e      	cmp	r3, #46	; 0x2e
 8004f74:	d10c      	bne.n	8004f90 <_svfiprintf_r+0x130>
 8004f76:	7863      	ldrb	r3, [r4, #1]
 8004f78:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7a:	d134      	bne.n	8004fe6 <_svfiprintf_r+0x186>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	9203      	str	r2, [sp, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bfb8      	it	lt
 8004f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f8c:	3402      	adds	r4, #2
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005058 <_svfiprintf_r+0x1f8>
 8004f94:	7821      	ldrb	r1, [r4, #0]
 8004f96:	2203      	movs	r2, #3
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f7fb f919 	bl	80001d0 <memchr>
 8004f9e:	b138      	cbz	r0, 8004fb0 <_svfiprintf_r+0x150>
 8004fa0:	9b04      	ldr	r3, [sp, #16]
 8004fa2:	eba0 000a 	sub.w	r0, r0, sl
 8004fa6:	2240      	movs	r2, #64	; 0x40
 8004fa8:	4082      	lsls	r2, r0
 8004faa:	4313      	orrs	r3, r2
 8004fac:	3401      	adds	r4, #1
 8004fae:	9304      	str	r3, [sp, #16]
 8004fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb4:	4825      	ldr	r0, [pc, #148]	; (800504c <_svfiprintf_r+0x1ec>)
 8004fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fba:	2206      	movs	r2, #6
 8004fbc:	f7fb f908 	bl	80001d0 <memchr>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d038      	beq.n	8005036 <_svfiprintf_r+0x1d6>
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <_svfiprintf_r+0x1f0>)
 8004fc6:	bb1b      	cbnz	r3, 8005010 <_svfiprintf_r+0x1b0>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	3307      	adds	r3, #7
 8004fcc:	f023 0307 	bic.w	r3, r3, #7
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	9303      	str	r3, [sp, #12]
 8004fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd6:	4433      	add	r3, r6
 8004fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fda:	e768      	b.n	8004eae <_svfiprintf_r+0x4e>
 8004fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e7a6      	b.n	8004f34 <_svfiprintf_r+0xd4>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	3401      	adds	r4, #1
 8004fea:	9305      	str	r3, [sp, #20]
 8004fec:	4619      	mov	r1, r3
 8004fee:	f04f 0c0a 	mov.w	ip, #10
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff8:	3a30      	subs	r2, #48	; 0x30
 8004ffa:	2a09      	cmp	r2, #9
 8004ffc:	d903      	bls.n	8005006 <_svfiprintf_r+0x1a6>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0c6      	beq.n	8004f90 <_svfiprintf_r+0x130>
 8005002:	9105      	str	r1, [sp, #20]
 8005004:	e7c4      	b.n	8004f90 <_svfiprintf_r+0x130>
 8005006:	fb0c 2101 	mla	r1, ip, r1, r2
 800500a:	4604      	mov	r4, r0
 800500c:	2301      	movs	r3, #1
 800500e:	e7f0      	b.n	8004ff2 <_svfiprintf_r+0x192>
 8005010:	ab03      	add	r3, sp, #12
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	462a      	mov	r2, r5
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <_svfiprintf_r+0x1f4>)
 8005018:	a904      	add	r1, sp, #16
 800501a:	4638      	mov	r0, r7
 800501c:	f7fd fe64 	bl	8002ce8 <_printf_float>
 8005020:	1c42      	adds	r2, r0, #1
 8005022:	4606      	mov	r6, r0
 8005024:	d1d6      	bne.n	8004fd4 <_svfiprintf_r+0x174>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	065b      	lsls	r3, r3, #25
 800502a:	f53f af2d 	bmi.w	8004e88 <_svfiprintf_r+0x28>
 800502e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005030:	b01d      	add	sp, #116	; 0x74
 8005032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	ab03      	add	r3, sp, #12
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	462a      	mov	r2, r5
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <_svfiprintf_r+0x1f4>)
 800503e:	a904      	add	r1, sp, #16
 8005040:	4638      	mov	r0, r7
 8005042:	f7fe f8f5 	bl	8003230 <_printf_i>
 8005046:	e7eb      	b.n	8005020 <_svfiprintf_r+0x1c0>
 8005048:	08005b0c 	.word	0x08005b0c
 800504c:	08005b16 	.word	0x08005b16
 8005050:	08002ce9 	.word	0x08002ce9
 8005054:	08004dad 	.word	0x08004dad
 8005058:	08005b12 	.word	0x08005b12

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	0710      	lsls	r0, r2, #28
 8005066:	460c      	mov	r4, r1
 8005068:	d458      	bmi.n	800511c <__sflush_r+0xc0>
 800506a:	684b      	ldr	r3, [r1, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc05      	bgt.n	800507c <__sflush_r+0x20>
 8005070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc02      	bgt.n	800507c <__sflush_r+0x20>
 8005076:	2000      	movs	r0, #0
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507e:	2e00      	cmp	r6, #0
 8005080:	d0f9      	beq.n	8005076 <__sflush_r+0x1a>
 8005082:	2300      	movs	r3, #0
 8005084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005088:	682f      	ldr	r7, [r5, #0]
 800508a:	6a21      	ldr	r1, [r4, #32]
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	d032      	beq.n	80050f6 <__sflush_r+0x9a>
 8005090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	075a      	lsls	r2, r3, #29
 8005096:	d505      	bpl.n	80050a4 <__sflush_r+0x48>
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	1ac0      	subs	r0, r0, r3
 800509c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509e:	b10b      	cbz	r3, 80050a4 <__sflush_r+0x48>
 80050a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	4602      	mov	r2, r0
 80050a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050aa:	6a21      	ldr	r1, [r4, #32]
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	d106      	bne.n	80050c4 <__sflush_r+0x68>
 80050b6:	6829      	ldr	r1, [r5, #0]
 80050b8:	291d      	cmp	r1, #29
 80050ba:	d82b      	bhi.n	8005114 <__sflush_r+0xb8>
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <__sflush_r+0x108>)
 80050be:	410a      	asrs	r2, r1
 80050c0:	07d6      	lsls	r6, r2, #31
 80050c2:	d427      	bmi.n	8005114 <__sflush_r+0xb8>
 80050c4:	2200      	movs	r2, #0
 80050c6:	6062      	str	r2, [r4, #4]
 80050c8:	04d9      	lsls	r1, r3, #19
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	6022      	str	r2, [r4, #0]
 80050ce:	d504      	bpl.n	80050da <__sflush_r+0x7e>
 80050d0:	1c42      	adds	r2, r0, #1
 80050d2:	d101      	bne.n	80050d8 <__sflush_r+0x7c>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	b903      	cbnz	r3, 80050da <__sflush_r+0x7e>
 80050d8:	6560      	str	r0, [r4, #84]	; 0x54
 80050da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050dc:	602f      	str	r7, [r5, #0]
 80050de:	2900      	cmp	r1, #0
 80050e0:	d0c9      	beq.n	8005076 <__sflush_r+0x1a>
 80050e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d002      	beq.n	80050f0 <__sflush_r+0x94>
 80050ea:	4628      	mov	r0, r5
 80050ec:	f7ff f9e2 	bl	80044b4 <_free_r>
 80050f0:	2000      	movs	r0, #0
 80050f2:	6360      	str	r0, [r4, #52]	; 0x34
 80050f4:	e7c0      	b.n	8005078 <__sflush_r+0x1c>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	1c41      	adds	r1, r0, #1
 80050fe:	d1c8      	bne.n	8005092 <__sflush_r+0x36>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c5      	beq.n	8005092 <__sflush_r+0x36>
 8005106:	2b1d      	cmp	r3, #29
 8005108:	d001      	beq.n	800510e <__sflush_r+0xb2>
 800510a:	2b16      	cmp	r3, #22
 800510c:	d101      	bne.n	8005112 <__sflush_r+0xb6>
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	e7b1      	b.n	8005076 <__sflush_r+0x1a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7ad      	b.n	8005078 <__sflush_r+0x1c>
 800511c:	690f      	ldr	r7, [r1, #16]
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0a9      	beq.n	8005076 <__sflush_r+0x1a>
 8005122:	0793      	lsls	r3, r2, #30
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	600f      	str	r7, [r1, #0]
 800512c:	bf18      	it	ne
 800512e:	2300      	movne	r3, #0
 8005130:	eba6 0807 	sub.w	r8, r6, r7
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	dd9c      	ble.n	8005076 <__sflush_r+0x1a>
 800513c:	6a21      	ldr	r1, [r4, #32]
 800513e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005140:	4643      	mov	r3, r8
 8005142:	463a      	mov	r2, r7
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	dc06      	bgt.n	800515a <__sflush_r+0xfe>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e78e      	b.n	8005078 <__sflush_r+0x1c>
 800515a:	4407      	add	r7, r0
 800515c:	eba8 0800 	sub.w	r8, r8, r0
 8005160:	e7e9      	b.n	8005136 <__sflush_r+0xda>
 8005162:	bf00      	nop
 8005164:	dfbffffe 	.word	0xdfbffffe

08005168 <_fflush_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b913      	cbnz	r3, 8005178 <_fflush_r+0x10>
 8005172:	2500      	movs	r5, #0
 8005174:	4628      	mov	r0, r5
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	b118      	cbz	r0, 8005182 <_fflush_r+0x1a>
 800517a:	6a03      	ldr	r3, [r0, #32]
 800517c:	b90b      	cbnz	r3, 8005182 <_fflush_r+0x1a>
 800517e:	f7fe fa05 	bl	800358c <__sinit>
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f3      	beq.n	8005172 <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x32>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x32>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f7fe fb10 	bl	80037ba <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff5d 	bl	800505c <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07da      	lsls	r2, r3, #31
 80051a6:	4605      	mov	r5, r0
 80051a8:	d4e4      	bmi.n	8005174 <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4e1      	bmi.n	8005174 <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f7fe fb03 	bl	80037bc <__retarget_lock_release_recursive>
 80051b6:	e7dd      	b.n	8005174 <_fflush_r+0xc>

080051b8 <memmove>:
 80051b8:	4288      	cmp	r0, r1
 80051ba:	b510      	push	{r4, lr}
 80051bc:	eb01 0402 	add.w	r4, r1, r2
 80051c0:	d902      	bls.n	80051c8 <memmove+0x10>
 80051c2:	4284      	cmp	r4, r0
 80051c4:	4623      	mov	r3, r4
 80051c6:	d807      	bhi.n	80051d8 <memmove+0x20>
 80051c8:	1e43      	subs	r3, r0, #1
 80051ca:	42a1      	cmp	r1, r4
 80051cc:	d008      	beq.n	80051e0 <memmove+0x28>
 80051ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051d6:	e7f8      	b.n	80051ca <memmove+0x12>
 80051d8:	4402      	add	r2, r0
 80051da:	4601      	mov	r1, r0
 80051dc:	428a      	cmp	r2, r1
 80051de:	d100      	bne.n	80051e2 <memmove+0x2a>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ea:	e7f7      	b.n	80051dc <memmove+0x24>

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fc f838 	bl	800126c <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000394 	.word	0x20000394

0800520c <memcpy>:
 800520c:	440a      	add	r2, r1
 800520e:	4291      	cmp	r1, r2
 8005210:	f100 33ff 	add.w	r3, r0, #4294967295
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	4770      	bx	lr
 8005218:	b510      	push	{r4, lr}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005222:	4291      	cmp	r1, r2
 8005224:	d1f9      	bne.n	800521a <memcpy+0xe>
 8005226:	bd10      	pop	{r4, pc}

08005228 <__assert_func>:
 8005228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800522a:	4614      	mov	r4, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <__assert_func+0x2c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4605      	mov	r5, r0
 8005234:	68d8      	ldr	r0, [r3, #12]
 8005236:	b14c      	cbz	r4, 800524c <__assert_func+0x24>
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <__assert_func+0x30>)
 800523a:	9100      	str	r1, [sp, #0]
 800523c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005240:	4906      	ldr	r1, [pc, #24]	; (800525c <__assert_func+0x34>)
 8005242:	462b      	mov	r3, r5
 8005244:	f000 f872 	bl	800532c <fiprintf>
 8005248:	f000 f882 	bl	8005350 <abort>
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__assert_func+0x38>)
 800524e:	461c      	mov	r4, r3
 8005250:	e7f3      	b.n	800523a <__assert_func+0x12>
 8005252:	bf00      	nop
 8005254:	2000007c 	.word	0x2000007c
 8005258:	08005b27 	.word	0x08005b27
 800525c:	08005b34 	.word	0x08005b34
 8005260:	08005b62 	.word	0x08005b62

08005264 <_calloc_r>:
 8005264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005266:	fba1 2402 	umull	r2, r4, r1, r2
 800526a:	b94c      	cbnz	r4, 8005280 <_calloc_r+0x1c>
 800526c:	4611      	mov	r1, r2
 800526e:	9201      	str	r2, [sp, #4]
 8005270:	f7ff f994 	bl	800459c <_malloc_r>
 8005274:	9a01      	ldr	r2, [sp, #4]
 8005276:	4605      	mov	r5, r0
 8005278:	b930      	cbnz	r0, 8005288 <_calloc_r+0x24>
 800527a:	4628      	mov	r0, r5
 800527c:	b003      	add	sp, #12
 800527e:	bd30      	pop	{r4, r5, pc}
 8005280:	220c      	movs	r2, #12
 8005282:	6002      	str	r2, [r0, #0]
 8005284:	2500      	movs	r5, #0
 8005286:	e7f8      	b.n	800527a <_calloc_r+0x16>
 8005288:	4621      	mov	r1, r4
 800528a:	f7fe fa18 	bl	80036be <memset>
 800528e:	e7f4      	b.n	800527a <_calloc_r+0x16>

08005290 <__ascii_mbtowc>:
 8005290:	b082      	sub	sp, #8
 8005292:	b901      	cbnz	r1, 8005296 <__ascii_mbtowc+0x6>
 8005294:	a901      	add	r1, sp, #4
 8005296:	b142      	cbz	r2, 80052aa <__ascii_mbtowc+0x1a>
 8005298:	b14b      	cbz	r3, 80052ae <__ascii_mbtowc+0x1e>
 800529a:	7813      	ldrb	r3, [r2, #0]
 800529c:	600b      	str	r3, [r1, #0]
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	1e10      	subs	r0, r2, #0
 80052a2:	bf18      	it	ne
 80052a4:	2001      	movne	r0, #1
 80052a6:	b002      	add	sp, #8
 80052a8:	4770      	bx	lr
 80052aa:	4610      	mov	r0, r2
 80052ac:	e7fb      	b.n	80052a6 <__ascii_mbtowc+0x16>
 80052ae:	f06f 0001 	mvn.w	r0, #1
 80052b2:	e7f8      	b.n	80052a6 <__ascii_mbtowc+0x16>

080052b4 <_realloc_r>:
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b8:	4680      	mov	r8, r0
 80052ba:	4614      	mov	r4, r2
 80052bc:	460e      	mov	r6, r1
 80052be:	b921      	cbnz	r1, 80052ca <_realloc_r+0x16>
 80052c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	4611      	mov	r1, r2
 80052c6:	f7ff b969 	b.w	800459c <_malloc_r>
 80052ca:	b92a      	cbnz	r2, 80052d8 <_realloc_r+0x24>
 80052cc:	f7ff f8f2 	bl	80044b4 <_free_r>
 80052d0:	4625      	mov	r5, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d8:	f000 f841 	bl	800535e <_malloc_usable_size_r>
 80052dc:	4284      	cmp	r4, r0
 80052de:	4607      	mov	r7, r0
 80052e0:	d802      	bhi.n	80052e8 <_realloc_r+0x34>
 80052e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052e6:	d812      	bhi.n	800530e <_realloc_r+0x5a>
 80052e8:	4621      	mov	r1, r4
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7ff f956 	bl	800459c <_malloc_r>
 80052f0:	4605      	mov	r5, r0
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0ed      	beq.n	80052d2 <_realloc_r+0x1e>
 80052f6:	42bc      	cmp	r4, r7
 80052f8:	4622      	mov	r2, r4
 80052fa:	4631      	mov	r1, r6
 80052fc:	bf28      	it	cs
 80052fe:	463a      	movcs	r2, r7
 8005300:	f7ff ff84 	bl	800520c <memcpy>
 8005304:	4631      	mov	r1, r6
 8005306:	4640      	mov	r0, r8
 8005308:	f7ff f8d4 	bl	80044b4 <_free_r>
 800530c:	e7e1      	b.n	80052d2 <_realloc_r+0x1e>
 800530e:	4635      	mov	r5, r6
 8005310:	e7df      	b.n	80052d2 <_realloc_r+0x1e>

08005312 <__ascii_wctomb>:
 8005312:	b149      	cbz	r1, 8005328 <__ascii_wctomb+0x16>
 8005314:	2aff      	cmp	r2, #255	; 0xff
 8005316:	bf85      	ittet	hi
 8005318:	238a      	movhi	r3, #138	; 0x8a
 800531a:	6003      	strhi	r3, [r0, #0]
 800531c:	700a      	strbls	r2, [r1, #0]
 800531e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005322:	bf98      	it	ls
 8005324:	2001      	movls	r0, #1
 8005326:	4770      	bx	lr
 8005328:	4608      	mov	r0, r1
 800532a:	4770      	bx	lr

0800532c <fiprintf>:
 800532c:	b40e      	push	{r1, r2, r3}
 800532e:	b503      	push	{r0, r1, lr}
 8005330:	4601      	mov	r1, r0
 8005332:	ab03      	add	r3, sp, #12
 8005334:	4805      	ldr	r0, [pc, #20]	; (800534c <fiprintf+0x20>)
 8005336:	f853 2b04 	ldr.w	r2, [r3], #4
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	f000 f83f 	bl	80053c0 <_vfiprintf_r>
 8005342:	b002      	add	sp, #8
 8005344:	f85d eb04 	ldr.w	lr, [sp], #4
 8005348:	b003      	add	sp, #12
 800534a:	4770      	bx	lr
 800534c:	2000007c 	.word	0x2000007c

08005350 <abort>:
 8005350:	b508      	push	{r3, lr}
 8005352:	2006      	movs	r0, #6
 8005354:	f000 fa0c 	bl	8005770 <raise>
 8005358:	2001      	movs	r0, #1
 800535a:	f7fb ff0f 	bl	800117c <_exit>

0800535e <_malloc_usable_size_r>:
 800535e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005362:	1f18      	subs	r0, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfbc      	itt	lt
 8005368:	580b      	ldrlt	r3, [r1, r0]
 800536a:	18c0      	addlt	r0, r0, r3
 800536c:	4770      	bx	lr

0800536e <__sfputc_r>:
 800536e:	6893      	ldr	r3, [r2, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	b410      	push	{r4}
 8005376:	6093      	str	r3, [r2, #8]
 8005378:	da08      	bge.n	800538c <__sfputc_r+0x1e>
 800537a:	6994      	ldr	r4, [r2, #24]
 800537c:	42a3      	cmp	r3, r4
 800537e:	db01      	blt.n	8005384 <__sfputc_r+0x16>
 8005380:	290a      	cmp	r1, #10
 8005382:	d103      	bne.n	800538c <__sfputc_r+0x1e>
 8005384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005388:	f000 b934 	b.w	80055f4 <__swbuf_r>
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	1c58      	adds	r0, r3, #1
 8005390:	6010      	str	r0, [r2, #0]
 8005392:	7019      	strb	r1, [r3, #0]
 8005394:	4608      	mov	r0, r1
 8005396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800539a:	4770      	bx	lr

0800539c <__sfputs_r>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	4614      	mov	r4, r2
 80053a4:	18d5      	adds	r5, r2, r3
 80053a6:	42ac      	cmp	r4, r5
 80053a8:	d101      	bne.n	80053ae <__sfputs_r+0x12>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e007      	b.n	80053be <__sfputs_r+0x22>
 80053ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b2:	463a      	mov	r2, r7
 80053b4:	4630      	mov	r0, r6
 80053b6:	f7ff ffda 	bl	800536e <__sfputc_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	d1f3      	bne.n	80053a6 <__sfputs_r+0xa>
 80053be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053c0 <_vfiprintf_r>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	460d      	mov	r5, r1
 80053c6:	b09d      	sub	sp, #116	; 0x74
 80053c8:	4614      	mov	r4, r2
 80053ca:	4698      	mov	r8, r3
 80053cc:	4606      	mov	r6, r0
 80053ce:	b118      	cbz	r0, 80053d8 <_vfiprintf_r+0x18>
 80053d0:	6a03      	ldr	r3, [r0, #32]
 80053d2:	b90b      	cbnz	r3, 80053d8 <_vfiprintf_r+0x18>
 80053d4:	f7fe f8da 	bl	800358c <__sinit>
 80053d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053da:	07d9      	lsls	r1, r3, #31
 80053dc:	d405      	bmi.n	80053ea <_vfiprintf_r+0x2a>
 80053de:	89ab      	ldrh	r3, [r5, #12]
 80053e0:	059a      	lsls	r2, r3, #22
 80053e2:	d402      	bmi.n	80053ea <_vfiprintf_r+0x2a>
 80053e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053e6:	f7fe f9e8 	bl	80037ba <__retarget_lock_acquire_recursive>
 80053ea:	89ab      	ldrh	r3, [r5, #12]
 80053ec:	071b      	lsls	r3, r3, #28
 80053ee:	d501      	bpl.n	80053f4 <_vfiprintf_r+0x34>
 80053f0:	692b      	ldr	r3, [r5, #16]
 80053f2:	b99b      	cbnz	r3, 800541c <_vfiprintf_r+0x5c>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 f93a 	bl	8005670 <__swsetup_r>
 80053fc:	b170      	cbz	r0, 800541c <_vfiprintf_r+0x5c>
 80053fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005400:	07dc      	lsls	r4, r3, #31
 8005402:	d504      	bpl.n	800540e <_vfiprintf_r+0x4e>
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	b01d      	add	sp, #116	; 0x74
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	89ab      	ldrh	r3, [r5, #12]
 8005410:	0598      	lsls	r0, r3, #22
 8005412:	d4f7      	bmi.n	8005404 <_vfiprintf_r+0x44>
 8005414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005416:	f7fe f9d1 	bl	80037bc <__retarget_lock_release_recursive>
 800541a:	e7f3      	b.n	8005404 <_vfiprintf_r+0x44>
 800541c:	2300      	movs	r3, #0
 800541e:	9309      	str	r3, [sp, #36]	; 0x24
 8005420:	2320      	movs	r3, #32
 8005422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005426:	f8cd 800c 	str.w	r8, [sp, #12]
 800542a:	2330      	movs	r3, #48	; 0x30
 800542c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80055e0 <_vfiprintf_r+0x220>
 8005430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005434:	f04f 0901 	mov.w	r9, #1
 8005438:	4623      	mov	r3, r4
 800543a:	469a      	mov	sl, r3
 800543c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005440:	b10a      	cbz	r2, 8005446 <_vfiprintf_r+0x86>
 8005442:	2a25      	cmp	r2, #37	; 0x25
 8005444:	d1f9      	bne.n	800543a <_vfiprintf_r+0x7a>
 8005446:	ebba 0b04 	subs.w	fp, sl, r4
 800544a:	d00b      	beq.n	8005464 <_vfiprintf_r+0xa4>
 800544c:	465b      	mov	r3, fp
 800544e:	4622      	mov	r2, r4
 8005450:	4629      	mov	r1, r5
 8005452:	4630      	mov	r0, r6
 8005454:	f7ff ffa2 	bl	800539c <__sfputs_r>
 8005458:	3001      	adds	r0, #1
 800545a:	f000 80a9 	beq.w	80055b0 <_vfiprintf_r+0x1f0>
 800545e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005460:	445a      	add	r2, fp
 8005462:	9209      	str	r2, [sp, #36]	; 0x24
 8005464:	f89a 3000 	ldrb.w	r3, [sl]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80a1 	beq.w	80055b0 <_vfiprintf_r+0x1f0>
 800546e:	2300      	movs	r3, #0
 8005470:	f04f 32ff 	mov.w	r2, #4294967295
 8005474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005478:	f10a 0a01 	add.w	sl, sl, #1
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	9307      	str	r3, [sp, #28]
 8005480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005484:	931a      	str	r3, [sp, #104]	; 0x68
 8005486:	4654      	mov	r4, sl
 8005488:	2205      	movs	r2, #5
 800548a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548e:	4854      	ldr	r0, [pc, #336]	; (80055e0 <_vfiprintf_r+0x220>)
 8005490:	f7fa fe9e 	bl	80001d0 <memchr>
 8005494:	9a04      	ldr	r2, [sp, #16]
 8005496:	b9d8      	cbnz	r0, 80054d0 <_vfiprintf_r+0x110>
 8005498:	06d1      	lsls	r1, r2, #27
 800549a:	bf44      	itt	mi
 800549c:	2320      	movmi	r3, #32
 800549e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a2:	0713      	lsls	r3, r2, #28
 80054a4:	bf44      	itt	mi
 80054a6:	232b      	movmi	r3, #43	; 0x2b
 80054a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ac:	f89a 3000 	ldrb.w	r3, [sl]
 80054b0:	2b2a      	cmp	r3, #42	; 0x2a
 80054b2:	d015      	beq.n	80054e0 <_vfiprintf_r+0x120>
 80054b4:	9a07      	ldr	r2, [sp, #28]
 80054b6:	4654      	mov	r4, sl
 80054b8:	2000      	movs	r0, #0
 80054ba:	f04f 0c0a 	mov.w	ip, #10
 80054be:	4621      	mov	r1, r4
 80054c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c4:	3b30      	subs	r3, #48	; 0x30
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d94d      	bls.n	8005566 <_vfiprintf_r+0x1a6>
 80054ca:	b1b0      	cbz	r0, 80054fa <_vfiprintf_r+0x13a>
 80054cc:	9207      	str	r2, [sp, #28]
 80054ce:	e014      	b.n	80054fa <_vfiprintf_r+0x13a>
 80054d0:	eba0 0308 	sub.w	r3, r0, r8
 80054d4:	fa09 f303 	lsl.w	r3, r9, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	9304      	str	r3, [sp, #16]
 80054dc:	46a2      	mov	sl, r4
 80054de:	e7d2      	b.n	8005486 <_vfiprintf_r+0xc6>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	1d19      	adds	r1, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	9103      	str	r1, [sp, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfbb      	ittet	lt
 80054ec:	425b      	neglt	r3, r3
 80054ee:	f042 0202 	orrlt.w	r2, r2, #2
 80054f2:	9307      	strge	r3, [sp, #28]
 80054f4:	9307      	strlt	r3, [sp, #28]
 80054f6:	bfb8      	it	lt
 80054f8:	9204      	strlt	r2, [sp, #16]
 80054fa:	7823      	ldrb	r3, [r4, #0]
 80054fc:	2b2e      	cmp	r3, #46	; 0x2e
 80054fe:	d10c      	bne.n	800551a <_vfiprintf_r+0x15a>
 8005500:	7863      	ldrb	r3, [r4, #1]
 8005502:	2b2a      	cmp	r3, #42	; 0x2a
 8005504:	d134      	bne.n	8005570 <_vfiprintf_r+0x1b0>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	1d1a      	adds	r2, r3, #4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	9203      	str	r2, [sp, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	bfb8      	it	lt
 8005512:	f04f 33ff 	movlt.w	r3, #4294967295
 8005516:	3402      	adds	r4, #2
 8005518:	9305      	str	r3, [sp, #20]
 800551a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80055f0 <_vfiprintf_r+0x230>
 800551e:	7821      	ldrb	r1, [r4, #0]
 8005520:	2203      	movs	r2, #3
 8005522:	4650      	mov	r0, sl
 8005524:	f7fa fe54 	bl	80001d0 <memchr>
 8005528:	b138      	cbz	r0, 800553a <_vfiprintf_r+0x17a>
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	eba0 000a 	sub.w	r0, r0, sl
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	4082      	lsls	r2, r0
 8005534:	4313      	orrs	r3, r2
 8005536:	3401      	adds	r4, #1
 8005538:	9304      	str	r3, [sp, #16]
 800553a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553e:	4829      	ldr	r0, [pc, #164]	; (80055e4 <_vfiprintf_r+0x224>)
 8005540:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005544:	2206      	movs	r2, #6
 8005546:	f7fa fe43 	bl	80001d0 <memchr>
 800554a:	2800      	cmp	r0, #0
 800554c:	d03f      	beq.n	80055ce <_vfiprintf_r+0x20e>
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <_vfiprintf_r+0x228>)
 8005550:	bb1b      	cbnz	r3, 800559a <_vfiprintf_r+0x1da>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	3307      	adds	r3, #7
 8005556:	f023 0307 	bic.w	r3, r3, #7
 800555a:	3308      	adds	r3, #8
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005560:	443b      	add	r3, r7
 8005562:	9309      	str	r3, [sp, #36]	; 0x24
 8005564:	e768      	b.n	8005438 <_vfiprintf_r+0x78>
 8005566:	fb0c 3202 	mla	r2, ip, r2, r3
 800556a:	460c      	mov	r4, r1
 800556c:	2001      	movs	r0, #1
 800556e:	e7a6      	b.n	80054be <_vfiprintf_r+0xfe>
 8005570:	2300      	movs	r3, #0
 8005572:	3401      	adds	r4, #1
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	4619      	mov	r1, r3
 8005578:	f04f 0c0a 	mov.w	ip, #10
 800557c:	4620      	mov	r0, r4
 800557e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005582:	3a30      	subs	r2, #48	; 0x30
 8005584:	2a09      	cmp	r2, #9
 8005586:	d903      	bls.n	8005590 <_vfiprintf_r+0x1d0>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0c6      	beq.n	800551a <_vfiprintf_r+0x15a>
 800558c:	9105      	str	r1, [sp, #20]
 800558e:	e7c4      	b.n	800551a <_vfiprintf_r+0x15a>
 8005590:	fb0c 2101 	mla	r1, ip, r1, r2
 8005594:	4604      	mov	r4, r0
 8005596:	2301      	movs	r3, #1
 8005598:	e7f0      	b.n	800557c <_vfiprintf_r+0x1bc>
 800559a:	ab03      	add	r3, sp, #12
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	462a      	mov	r2, r5
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <_vfiprintf_r+0x22c>)
 80055a2:	a904      	add	r1, sp, #16
 80055a4:	4630      	mov	r0, r6
 80055a6:	f7fd fb9f 	bl	8002ce8 <_printf_float>
 80055aa:	4607      	mov	r7, r0
 80055ac:	1c78      	adds	r0, r7, #1
 80055ae:	d1d6      	bne.n	800555e <_vfiprintf_r+0x19e>
 80055b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b2:	07d9      	lsls	r1, r3, #31
 80055b4:	d405      	bmi.n	80055c2 <_vfiprintf_r+0x202>
 80055b6:	89ab      	ldrh	r3, [r5, #12]
 80055b8:	059a      	lsls	r2, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_vfiprintf_r+0x202>
 80055bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055be:	f7fe f8fd 	bl	80037bc <__retarget_lock_release_recursive>
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	065b      	lsls	r3, r3, #25
 80055c6:	f53f af1d 	bmi.w	8005404 <_vfiprintf_r+0x44>
 80055ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055cc:	e71c      	b.n	8005408 <_vfiprintf_r+0x48>
 80055ce:	ab03      	add	r3, sp, #12
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	462a      	mov	r2, r5
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <_vfiprintf_r+0x22c>)
 80055d6:	a904      	add	r1, sp, #16
 80055d8:	4630      	mov	r0, r6
 80055da:	f7fd fe29 	bl	8003230 <_printf_i>
 80055de:	e7e4      	b.n	80055aa <_vfiprintf_r+0x1ea>
 80055e0:	08005b0c 	.word	0x08005b0c
 80055e4:	08005b16 	.word	0x08005b16
 80055e8:	08002ce9 	.word	0x08002ce9
 80055ec:	0800539d 	.word	0x0800539d
 80055f0:	08005b12 	.word	0x08005b12

080055f4 <__swbuf_r>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	460e      	mov	r6, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	4605      	mov	r5, r0
 80055fc:	b118      	cbz	r0, 8005606 <__swbuf_r+0x12>
 80055fe:	6a03      	ldr	r3, [r0, #32]
 8005600:	b90b      	cbnz	r3, 8005606 <__swbuf_r+0x12>
 8005602:	f7fd ffc3 	bl	800358c <__sinit>
 8005606:	69a3      	ldr	r3, [r4, #24]
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	071a      	lsls	r2, r3, #28
 800560e:	d525      	bpl.n	800565c <__swbuf_r+0x68>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	b31b      	cbz	r3, 800565c <__swbuf_r+0x68>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	6922      	ldr	r2, [r4, #16]
 8005618:	1a98      	subs	r0, r3, r2
 800561a:	6963      	ldr	r3, [r4, #20]
 800561c:	b2f6      	uxtb	r6, r6
 800561e:	4283      	cmp	r3, r0
 8005620:	4637      	mov	r7, r6
 8005622:	dc04      	bgt.n	800562e <__swbuf_r+0x3a>
 8005624:	4621      	mov	r1, r4
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fd9e 	bl	8005168 <_fflush_r>
 800562c:	b9e0      	cbnz	r0, 8005668 <__swbuf_r+0x74>
 800562e:	68a3      	ldr	r3, [r4, #8]
 8005630:	3b01      	subs	r3, #1
 8005632:	60a3      	str	r3, [r4, #8]
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	701e      	strb	r6, [r3, #0]
 800563c:	6962      	ldr	r2, [r4, #20]
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	429a      	cmp	r2, r3
 8005642:	d004      	beq.n	800564e <__swbuf_r+0x5a>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	07db      	lsls	r3, r3, #31
 8005648:	d506      	bpl.n	8005658 <__swbuf_r+0x64>
 800564a:	2e0a      	cmp	r6, #10
 800564c:	d104      	bne.n	8005658 <__swbuf_r+0x64>
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f7ff fd89 	bl	8005168 <_fflush_r>
 8005656:	b938      	cbnz	r0, 8005668 <__swbuf_r+0x74>
 8005658:	4638      	mov	r0, r7
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f806 	bl	8005670 <__swsetup_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	d0d5      	beq.n	8005614 <__swbuf_r+0x20>
 8005668:	f04f 37ff 	mov.w	r7, #4294967295
 800566c:	e7f4      	b.n	8005658 <__swbuf_r+0x64>
	...

08005670 <__swsetup_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4b2a      	ldr	r3, [pc, #168]	; (800571c <__swsetup_r+0xac>)
 8005674:	4605      	mov	r5, r0
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	460c      	mov	r4, r1
 800567a:	b118      	cbz	r0, 8005684 <__swsetup_r+0x14>
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	b90b      	cbnz	r3, 8005684 <__swsetup_r+0x14>
 8005680:	f7fd ff84 	bl	800358c <__sinit>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800568a:	0718      	lsls	r0, r3, #28
 800568c:	d422      	bmi.n	80056d4 <__swsetup_r+0x64>
 800568e:	06d9      	lsls	r1, r3, #27
 8005690:	d407      	bmi.n	80056a2 <__swsetup_r+0x32>
 8005692:	2309      	movs	r3, #9
 8005694:	602b      	str	r3, [r5, #0]
 8005696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	e034      	b.n	800570c <__swsetup_r+0x9c>
 80056a2:	0758      	lsls	r0, r3, #29
 80056a4:	d512      	bpl.n	80056cc <__swsetup_r+0x5c>
 80056a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a8:	b141      	cbz	r1, 80056bc <__swsetup_r+0x4c>
 80056aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d002      	beq.n	80056b8 <__swsetup_r+0x48>
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7fe fefe 	bl	80044b4 <_free_r>
 80056b8:	2300      	movs	r3, #0
 80056ba:	6363      	str	r3, [r4, #52]	; 0x34
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	2300      	movs	r3, #0
 80056c6:	6063      	str	r3, [r4, #4]
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f043 0308 	orr.w	r3, r3, #8
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	b94b      	cbnz	r3, 80056ec <__swsetup_r+0x7c>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e2:	d003      	beq.n	80056ec <__swsetup_r+0x7c>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f884 	bl	80057f4 <__smakebuf_r>
 80056ec:	89a0      	ldrh	r0, [r4, #12]
 80056ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056f2:	f010 0301 	ands.w	r3, r0, #1
 80056f6:	d00a      	beq.n	800570e <__swsetup_r+0x9e>
 80056f8:	2300      	movs	r3, #0
 80056fa:	60a3      	str	r3, [r4, #8]
 80056fc:	6963      	ldr	r3, [r4, #20]
 80056fe:	425b      	negs	r3, r3
 8005700:	61a3      	str	r3, [r4, #24]
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	b943      	cbnz	r3, 8005718 <__swsetup_r+0xa8>
 8005706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800570a:	d1c4      	bne.n	8005696 <__swsetup_r+0x26>
 800570c:	bd38      	pop	{r3, r4, r5, pc}
 800570e:	0781      	lsls	r1, r0, #30
 8005710:	bf58      	it	pl
 8005712:	6963      	ldrpl	r3, [r4, #20]
 8005714:	60a3      	str	r3, [r4, #8]
 8005716:	e7f4      	b.n	8005702 <__swsetup_r+0x92>
 8005718:	2000      	movs	r0, #0
 800571a:	e7f7      	b.n	800570c <__swsetup_r+0x9c>
 800571c:	2000007c 	.word	0x2000007c

08005720 <_raise_r>:
 8005720:	291f      	cmp	r1, #31
 8005722:	b538      	push	{r3, r4, r5, lr}
 8005724:	4604      	mov	r4, r0
 8005726:	460d      	mov	r5, r1
 8005728:	d904      	bls.n	8005734 <_raise_r+0x14>
 800572a:	2316      	movs	r3, #22
 800572c:	6003      	str	r3, [r0, #0]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005736:	b112      	cbz	r2, 800573e <_raise_r+0x1e>
 8005738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800573c:	b94b      	cbnz	r3, 8005752 <_raise_r+0x32>
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f830 	bl	80057a4 <_getpid_r>
 8005744:	462a      	mov	r2, r5
 8005746:	4601      	mov	r1, r0
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800574e:	f000 b817 	b.w	8005780 <_kill_r>
 8005752:	2b01      	cmp	r3, #1
 8005754:	d00a      	beq.n	800576c <_raise_r+0x4c>
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	d103      	bne.n	8005762 <_raise_r+0x42>
 800575a:	2316      	movs	r3, #22
 800575c:	6003      	str	r3, [r0, #0]
 800575e:	2001      	movs	r0, #1
 8005760:	e7e7      	b.n	8005732 <_raise_r+0x12>
 8005762:	2400      	movs	r4, #0
 8005764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005768:	4628      	mov	r0, r5
 800576a:	4798      	blx	r3
 800576c:	2000      	movs	r0, #0
 800576e:	e7e0      	b.n	8005732 <_raise_r+0x12>

08005770 <raise>:
 8005770:	4b02      	ldr	r3, [pc, #8]	; (800577c <raise+0xc>)
 8005772:	4601      	mov	r1, r0
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f7ff bfd3 	b.w	8005720 <_raise_r>
 800577a:	bf00      	nop
 800577c:	2000007c 	.word	0x2000007c

08005780 <_kill_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_kill_r+0x20>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	f7fb fce5 	bl	800115c <_kill>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d102      	bne.n	800579c <_kill_r+0x1c>
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	b103      	cbz	r3, 800579c <_kill_r+0x1c>
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	bf00      	nop
 80057a0:	20000394 	.word	0x20000394

080057a4 <_getpid_r>:
 80057a4:	f7fb bcd2 	b.w	800114c <_getpid>

080057a8 <__swhatbuf_r>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	460c      	mov	r4, r1
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	2900      	cmp	r1, #0
 80057b2:	b096      	sub	sp, #88	; 0x58
 80057b4:	4615      	mov	r5, r2
 80057b6:	461e      	mov	r6, r3
 80057b8:	da0d      	bge.n	80057d6 <__swhatbuf_r+0x2e>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	bf0c      	ite	eq
 80057c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80057ca:	2340      	movne	r3, #64	; 0x40
 80057cc:	2000      	movs	r0, #0
 80057ce:	6031      	str	r1, [r6, #0]
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	b016      	add	sp, #88	; 0x58
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	466a      	mov	r2, sp
 80057d8:	f000 f848 	bl	800586c <_fstat_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	dbec      	blt.n	80057ba <__swhatbuf_r+0x12>
 80057e0:	9901      	ldr	r1, [sp, #4]
 80057e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057ea:	4259      	negs	r1, r3
 80057ec:	4159      	adcs	r1, r3
 80057ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f2:	e7eb      	b.n	80057cc <__swhatbuf_r+0x24>

080057f4 <__smakebuf_r>:
 80057f4:	898b      	ldrh	r3, [r1, #12]
 80057f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057f8:	079d      	lsls	r5, r3, #30
 80057fa:	4606      	mov	r6, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	d507      	bpl.n	8005810 <__smakebuf_r+0x1c>
 8005800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	6123      	str	r3, [r4, #16]
 8005808:	2301      	movs	r3, #1
 800580a:	6163      	str	r3, [r4, #20]
 800580c:	b002      	add	sp, #8
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	ab01      	add	r3, sp, #4
 8005812:	466a      	mov	r2, sp
 8005814:	f7ff ffc8 	bl	80057a8 <__swhatbuf_r>
 8005818:	9900      	ldr	r1, [sp, #0]
 800581a:	4605      	mov	r5, r0
 800581c:	4630      	mov	r0, r6
 800581e:	f7fe febd 	bl	800459c <_malloc_r>
 8005822:	b948      	cbnz	r0, 8005838 <__smakebuf_r+0x44>
 8005824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005828:	059a      	lsls	r2, r3, #22
 800582a:	d4ef      	bmi.n	800580c <__smakebuf_r+0x18>
 800582c:	f023 0303 	bic.w	r3, r3, #3
 8005830:	f043 0302 	orr.w	r3, r3, #2
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	e7e3      	b.n	8005800 <__smakebuf_r+0xc>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	6020      	str	r0, [r4, #0]
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	9b00      	ldr	r3, [sp, #0]
 8005844:	6163      	str	r3, [r4, #20]
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	6120      	str	r0, [r4, #16]
 800584a:	b15b      	cbz	r3, 8005864 <__smakebuf_r+0x70>
 800584c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005850:	4630      	mov	r0, r6
 8005852:	f000 f81d 	bl	8005890 <_isatty_r>
 8005856:	b128      	cbz	r0, 8005864 <__smakebuf_r+0x70>
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	431d      	orrs	r5, r3
 8005868:	81a5      	strh	r5, [r4, #12]
 800586a:	e7cf      	b.n	800580c <__smakebuf_r+0x18>

0800586c <_fstat_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d07      	ldr	r5, [pc, #28]	; (800588c <_fstat_r+0x20>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	f7fb fcce 	bl	800121a <_fstat>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d102      	bne.n	8005888 <_fstat_r+0x1c>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	b103      	cbz	r3, 8005888 <_fstat_r+0x1c>
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	20000394 	.word	0x20000394

08005890 <_isatty_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d06      	ldr	r5, [pc, #24]	; (80058ac <_isatty_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fb fccd 	bl	800123a <_isatty>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_isatty_r+0x1a>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_isatty_r+0x1a>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000394 	.word	0x20000394

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
